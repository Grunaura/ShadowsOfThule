REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\characters.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat_controller.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\commands.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\controller.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game_controller.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\items.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\main.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\characters.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat_controller.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\commands.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\controller.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game_controller.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\items.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\main.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\puzzles.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\quests.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\save_load.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\scene.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\story.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\view.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\whiteboard.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\description_generator.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\location_classes.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\map_generator.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\name_generator.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\planet_test_one.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_asciiart.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_image.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder_gui.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeOne.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeTwo.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_classes.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_definitions.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\maps.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\characters.py  
class Character:
    def __init__(self, name, health, inventory, alignment, location, dialogue):
        self.name = name
        self.health = health
        self.inventory = inventory
        self.alignment = alignment  # good, evil, neutral
        self.location = location
        self.dialogue = dialogue
        self.alive = True

    def greet(self):
        return f"Hello, I am {self.name}. I am on the {self.alignment} side."

    def is_alive(self):
        return self.alive

    def take_damage(self, damage):
        self.health -= damage
        if self.health <= 0:
            self.alive = False
            self.health = 0

    def speak(self):
        return self.dialogue


class Enemy(Character):
    def __init__(self, name, health, inventory, damage, location, dialogue, alignment="evil"):
        super().__init__(name, health, inventory, alignment, location, dialogue)
        self.damage = damage

    def attack(self, target):
        target.take_damage(self.damage)
        return f"{self.name} attacks {target.name} for {self.damage} damage!"


class Ally(Character):
    def __init__(self, name, health, inventory, help_text, location, dialogue, alignment="good"):
        super().__init__(name, health, inventory, alignment, location, dialogue)
        self.help_text = help_text

    def provide_help(self):
        return f"{self.name} says: {self.help_text}"


# Create characters with their respective locations and dialogues
caelum = Ally("Caelum", 100, [], "I possess extensive knowledge of the ancient civilization.", "Royal Library", "The secrets of the lost civilization shall be unraveled under my guidance!")
eris = Ally("Eris", 100, [], "My unparalleled combat skills and mastery of magic make me an unstoppable force.", "Warrior's Stronghold", "With sword and spell, justice shall prevail!")
vexis = Enemy("Lord Vexis", 120, [], 15, "Shadow Keep", "Your futile attempts to uncover the ancient secrets will only lead to your demise!")
informant1 = Enemy("Hepzibah", 80, [], 10, "Hidden Library", "My allegiance lies with Lord Vexis. Your every discovery shall be reported!", alignment="neutral")
informant2 = Enemy("Algernon", 80, [], 10, "Scholar's Retreat", "Rumors of your endeavors have reached my ears. Lord Vexis will be delighted!", alignment="neutral")
spy1 = Enemy("Phineas", 90, [], 12, "Underground Lair", "Your every move is being meticulously observed. Lord Vexis shall always have the advantage!", alignment="evil")
spy2 = Enemy("Lavinia", 90, [], 12, "Assassin's Hideout", "Lord Vexis demands your swift demise. Prepare to meet your untimely end!", alignment="evil")
hero1 = Ally("Gallant", 100, [], "I stand ready to assist you!", "Castle Stronghold", "Hail, noble adventurer! I am Gallant, ever loyal to our cause!")
villain1 = Enemy("Malachi", 100, [], 10, "Dark Citadel", "Tremble before the might of Malachi! True fear shall consume your heart!")
ally1 = Ally("Valeria", 80, [], "My expertise in combat is at your disposal.", "Frostholm Village", "Together, we shall triumph over any adversity!")
ally2 = Ally("Seraphine", 75, [], "My vast knowledge shall aid you in your quests.", "Academy of Wisdom", "Wisdom and courage shall guide our path to victory!")
villain2 = Enemy("Grimgor", 60, [], 8, "Shadow Caverns", "Behold the might of Grimgor, the harbinger of darkness!", alignment="evil")
ally3 = Ally("Braveheart", 80, [], "With unwavering loyalty, I shall fight alongside you.", "Warrior's Camp", "Fear not, for Braveheart shall stand as your shield!")
ally4 = Ally("Zephyrus", 70, [], "As master of the skies, I bring strategic advantage.", "Aerie Heights", "Take flight with me, and victory shall be ours to claim!")
ally5 = Ally("Ironclad", 80, [], "I shall shatter all obstacles with indomitable strength.", "Ironforge Fortress", "No barrier shall endure against the might of Ironclad!")
villain3 = Enemy("Vex'Nor", 70, [], 10, "Shadowed Ruins", "Tremble before the dark powers of Vex'Nor!", alignment="evil")
villain4 = Enemy("Lysandra", 60, [], 10, "Enchantress Tower", "The magic within me shall consume all of Elysium!", alignment="evil")
ally6 = Ally("Keeneye", 80, [], "My keen vision detects hidden dangers from afar.", "Woodland Outpost", "Ever watchful, I shall ensure our safety.")
ally7 = Ally("Bumblethorn", 75, [], "As a defender of the realm, I can aid with bee-related challenges.", "Beehive Grove", "In unity with the bees, we shall overcome all obstacles!")
ally8 = Ally("Morphius", 80, [], "I possess the power to shape-shift and deceive our foes.", "Shadowhaven Sanctum", "Through myriad forms, we shall emerge victorious!")
villain5 = Enemy("Dreadheart", 100, [], 12, "Twilight Keep", "I am the embodiment of your darkest nightmares! Dreadheart reigns supreme!", alignment="evil")
ally9 = Ally("Thornwhisper", 85, [], "I blend into nature's embrace, enabling stealth and subterfuge.", "Whispering Woods", "Nature's embrace conceals our every move.")
villain6 = Enemy("Arachnon", 70, [], 10, "Webbed Depths", "Escape from my intricate web? Impossible!", alignment="evil")
ally10 = Ally("Warden Reginald", 70, [], "As the noble ruler, I have knowledge and resources at our disposal.", "Royal Citadel", "With honor and wisdom, I lead our cause!")
ally11 = Ally("Lady Elara", 70, [], "As the wise councilor, my guidance shall illuminate our path.", "Chamber of Wisdom", "Never underestimate the power of compassion and wisdom.")
ally12 = Ally("Aurora", 90, [], "I am the mystical guardian, imbued with the essence of ancient magic.", "Sanctum of Mysteries", "Harness the magic within you, and all shall be possible!")
ally13 = Ally("Eldric", 100, [], "In the absence of the hero, I shall provide aid and guidance.", "Hall of Heroes", "By the ancient oaths, I answer your call!")
villain7 = Enemy("Slaughterbane", 75, [], 10, "Bloodthorn Arena", "No whip can match the fury of Slaughterbane!", alignment="evil")
villain8 = Enemy("Venomstrike", 70, [], 8, "Poisoned Marsh", "Feel the venom coursing through your veins! You are powerless against Venomstrike!", alignment="evil")
villain9 = Enemy("Nightshade", 80, [], 10, "Cursed Crypts", "Your darkest fears shall nourish Nightshade's power!", alignment="evil")
neutral1 = Character("Equinox", 90, [], "I maintain the delicate balance of the cosmos.", "Astral Sanctum", "I am Equinox, guardian of cosmic harmony.", alignment="neutral")
ally14 = Ally("Whirlwind", 80, [], "I summon the cyclone's might, tearing through our enemies.", "Tempest Spire", "The storm's wrath is at our command! Unleash the fury of the whirlwind!")

characters = [caelum, eris, vexis, informant1, informant2, spy1, spy2, hero1, villain1, ally1, ally2, villain2, ally3, ally4, ally5, villain3, villain4, ally6, ally7, ally8, villain5, ally9, villain6, ally10, ally11, ally12, ally13, villain7, villain8, villain9, neutral1, ally14]REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat.py  
#combat.py

from combat_controller import CombatController
import random


class Combat:
    @staticmethod
    def validate_character(character):
        """
        Validate the character object
        """
        if character is None or not all(hasattr(character, attr) for attr in ['attack_bonus', 'damage_bonus', 'weapon', 'armor_class', 'health']):
            raise ValueError('Invalid character')

    @staticmethod
    def roll_die(sides):
        """
        Simulate a roll of a die with the specified number of sides.
        """
        return random.randint(1, sides)

    @staticmethod
    def attack(attacker, defender):
        """
        Simulate an attack from the attacker to the defender.
        """
        # Validate the characters
        Combat.validate_character(attacker)
        Combat.validate_character(defender)

        # Roll a d20 to determine if the attack hits
        roll = Combat.roll_die(20) + attacker.attack_bonus
        if roll >= defender.armor_class:
            # The attack hits
            # Roll a die to determine damage
            damage = Combat.roll_die(attacker.weapon.damage_die) + attacker.damage_bonus
            # Apply special ability damage if available
            if attacker.weapon.special_ability:
                special_damage = Combat.roll_die(attacker.weapon.special_ability['damage_die'])
                damage += special_damage
                print(f"{attacker.name} hits {defender.name} with special ability {attacker.weapon.special_ability['name']} for {special_damage} damage.")
            # Apply damage to the defender
            defender.health -= damage
            print(f"{attacker.name} hits {defender.name} for {damage} damage.")
        else:
            # The attack misses
            print(f"{attacker.name}'s attack misses.")

def engage_combat(self, enemy_name):
    enemy = self.player.current_location.get_creature(enemy_name)
    if enemy:
        print(f"A wild {enemy.name} appears!")
        while self.player.health > 0 and enemy.health > 0:
            # Player's turn
            CombatController.attack(self.player, enemy)
            if enemy.health <= 0:
                print(f"You have defeated {enemy.name}!")
                break
            # Enemy's turn
            CombatController.attack(enemy, self.player)
            if self.player.health <= 0:
                print("You have been defeated...")
                break
    else:
        print("There is no such creature here.")
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat_controller.py  
# combat_controller.py
import random

class CombatController:
    @staticmethod
    def validate_character(character):
        # Validation code here
        if character is None or not all(hasattr(character, attr) for attr in ['attack_bonus', 'damage_bonus', 'weapon', 'armor_class', 'health']):
            raise ValueError('Invalid character')

    @staticmethod
    def roll_die(sides):
        # Roll die code here
        return random.randint(1, sides)

    @staticmethod
    def attack(attacker, defender):
        # Attack simulation code here
        roll = CombatController.roll_die(20) + attacker.attack_bonus
        if roll >= defender.armor_class:
            damage = CombatController.roll_die(attacker.weapon.damage_die) + attacker.damage_bonus
            defender.health -= damage
            print(f"{attacker.name} hits {defender.name} for {damage} damage.")
        else:
            print(f"{attacker.name}'s attack misses.")

    @staticmethod
    def engage_combat(player, enemy):
        # Combat engagement code here
        print(f"A wild {enemy.name} appears!")
        while player.health > 0 and enemy.health > 0:
            CombatController.attack(player, enemy)
            if enemy.health <= 0:
                print(f"You have defeated {enemy.name}!")
                break
            CombatController.attack(enemy, player)
            if player.health <= 0:
                print("You have been defeated...")
                break
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\commands.py  
#commands.py
from . import save_load
from . import controller
from . import combat
from .characters import characters

class Commands:

    def __init__(self, game_state):
        self.game_state = game_state
        self.combat = combat.Combat()
        
    def look(self):
        location = self.game_state.get_player_location()
        return location.get_description()

    def use_item(self, item_name):
        player = self.game_state.get_player()
        item = player.get_item(item_name)
        if item:
            return item.use()
        else:
            return "You don't have that item."

    def move(self, direction):
        if direction in ['north', 'south', 'east', 'west', 'northeast', 'northwest', 'southeast', 'southwest', 'up', 'down']:
            new_location = self.game_state.move_player(direction)
            return new_location.get_description()
        else:
            return "Invalid direction."

    def save(self):
        # Call the save function from save_load module
        save_load.save_game(self.game_state.player)
        return "Game saved."

    def restore(self):
        # Call the load function from save_load module
        self.game_state.player = save_load.load_game()
        return "Game restored."

    def restart(self):
        # Reset the game state in game_state
        self.game_state.reset_state()
        return "Game restarted."

    def verbose(self):
        # Enable verbose mode in game_state
        self.game_state.verbose = True
        return "Verbose mode on."

    def score(self):
        # Fetch score from player object
        return f"Your score is {self.game_state.player.score}."

    def diagnostic(self):
        # Let's assume game_state has a diagnostic method which runs some checks
        result = self.game_state.diagnostic()
        return "Everything seems to be working fine." if result else "Something seems off."

    def brief(self):
        # Enable brief mode in game_state
        self.game_state.brief = True
        return "Brief mode on."

    def superbrief(self):
        # Enable superbrief mode in game_state
        self.game_state.superbrief = True
        return "Superbrief mode on."

    def quit(self):
        # Call game_state's quit method
        self.game_state.quit()
        return "Quitting game."

    def climb(self):
        # Climb command implementation would depend on the game world.
        # If climbing is context-dependent, you'll need to check the player's location, possible actions, etc.
        # For now, let's say that climbing just changes the player's altitude
        self.game_state.player.altitude += 1
        return "You start to climb."

def redo_last_command(self):
    # Redo last command implementation
    if self.game_state.last_command is not None:
        # Recall the last command and parameters used and perform the action
        return getattr(self, self.game_state.last_command[0])(*self.game_state.last_command[1:])
    else:
        return "No previous command to redo."

def go(self, direction):
    # Go command implementation
    return self.move(direction)

def enter(self, place):
    # Enter command implementation
    if self.game_state.get_player_location().name == place:
        return "You're already here."
    else:
        possible_directions = self.game_state.get_player_location().get_exits()
        for direction in possible_directions:
            if possible_directions[direction].name == place:
                return self.move(direction)
        return f"There's no {place} nearby to enter."

def go_in(self, place):
    # Go in command implementation
    return self.enter(place)

def go_out(self):
    # Go out command implementation
    return self.move("out")

def say_hello(self):
    # Say hello command implementation
    return "You say hello. It echoes in the quiet."

def get_item(self, item_name):
    # Get/take/grab command implementation
    item = self.game_state.get_player_location().get_item(item_name)
    if item:
        self.game_state.get_player().add_item(item)
        return f"You have taken the {item_name}."
    else:
        return f"There's no {item_name} here to take."

def get_all_items(self):
    # Get/take/grab all command implementation
    items = self.game_state.get_player_location().get_items()
    for item in items:
        self.game_state.get_player().add_item(item)
    return "You've taken all the items."

def throw_item_at(self, item_name, target):
    # Throw item at command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        self.game_state.get_player().remove_item(item_name)
        return f"You've thrown the {item_name} at the {target}."
    else:
        return f"You don't have a {item_name} to throw."

def open_container(self, container_name):
    # Open container command implementation
    container = self.game_state.get_player_location().get_container(container_name)
    if container:
        return container.open()
    else:
        return f"There's no {container_name} here to open."

def open_exit(self, exit_name):
    # Open exit command implementation
    exit = self.game_state.get_player_location().get_exit(exit_name)
    if exit:
        if exit.is_locked():
            return f"The {exit_name} is locked."
        else:
            return exit.open()
    else:
        return f"There's no {exit_name} here to open."

def read_item(self, item_name):
    # Read command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_readable():
            return item.read()
        else:
            return f"You can't read the {item_name}."
    else:
        return f"You don't have a {item_name} to read."

def drop_item(self, item_name):
    # Drop command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        self.game_state.get_player().remove_item(item_name)
        self.game_state.get_player_location().add_item(item)
        return f"You have dropped the {item_name}."
    else:
        return f"You don't have a {item_name} to drop."

def put_item_in_container(self, item_name, container_name):
    # Put command implementation
    item = self.game_state.get_player().get_item(item_name)
    container = self.game_state.get_player_location().get_container(container_name)
    if item and container:
        self.game_state.get_player().remove_item(item_name)
        container.add_item(item)
        return f"You have put the {item_name} in the {container_name}."
    else:
        return f"You don't have a {item_name} to put in the {container_name}."

def turn_control_with_item(self, control_name, item_name):
    # Turn control with item command implementation
    control = self.game_state.get_player_location().get_control(control_name)
    item = self.game_state.get_player().get_item(item_name)
    if control and item:
        return control.turn_with(item)
    else:
        return f"You can't turn the {control_name} with the {item_name}."

def turn_on_item(self, item_name):
    # Turn on item command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.turn_on()
    else:
        return f"You don't have a {item_name} to turn on."

def turn_off_item(self, item_name):
    # Turn off item command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.turn_off()
    else:
        return f"You don't have a {item_name} to turn off."

def move_object(self, object_name):
    # Move object command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    if object:
        return object.move()
    else:
        return f"There's no {object_name} here to move."

def attack_creature_with_item(self, creature_name, item_name):
    # Attack creature with item command implementation
    creature = self.game_state.get_player_location().get_creature(creature_name)
    item = self.game_state.get_player().get_item(item_name)
    if creature and item:
        return self.combat.attack(creature, item)
    else:
        return f"You can't attack the {creature_name} with the {item_name}."

def examine_object(self, object_name):
    # Examine command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    if object:
        return object.examine()
    else:
        return f"There's no {object_name} here to examine."

def show_inventory(self):
    # Inventory command implementation
    return self.game_state.get_player().show_inventory()

def eat_item(self, item_name):
    # Eat command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_edible():
            self.game_state.get_player().remove_item(item_name)
            return item.eat()
        else:
            return f"You can't eat the {item_name}."
    else:
        return f"You don't have a {item_name} to eat."

def shout(self):
    # Shout command implementation
    return "You shout loudly. The echo lingers in the air."

def close_door(self, door_name):
    # Close door command implementation
    door = self.game_state.get_player_location().get_door(door_name)
    if door:
        return door.close()
    else:
        return f"There's no {door_name} here to close."

def tie_item_to_object(self, item_name, object_name):
    # Tie item to object command implementation
    item = self.game_state.get_player().get_item(item_name)
    object = self.game_state.get_player_location().get_object(object_name)
    if item and object:
        return object.tie_item(item)
    else:
        return f"You can't tie the {item_name} to the {object_name}."

def pick_item(self, item_name):
    # Pick command implementation
    return self.get_item(item_name)

def kill_self_with_weapon(self, weapon_name):
    # Kill self with weapon command implementation
    weapon = self.game_state.get_player().get_item(weapon_name)
    if weapon:
        return self.combat.self_harm(weapon)
    else:
        return "You don't have the weapon to do this."

def break_item_with_item(self, item_to_break_name, breaking_item_name):
    # Break item with item command implementation
    item_to_break = self.game_state.get_player().get_item(item_to_break_name)
    breaking_item = self.game_state.get_player().get_item(breaking_item_name)
    if item_to_break and breaking_item:
        return item_to_break.break_with(breaking_item)
    else:
        return "You don't have the necessary items to do this."

def attack_creature_with_item(self, creature_name, item_name):
    # Attack creature with item command implementation
    creature = self.game_state.get_player_location().get_creature(creature_name)
    item = self.game_state.get_player().get_item(item_name)
    if creature and item:
        return self.combat.attack(creature, item)
    else:
        return "You can't attack the creature with this item."

def pray(self):
    # Pray command implementation
    return "You start to pray."

def drink_item(self, item_name):
    # Drink command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_drinkable():
            self.game_state.get_player().remove_item(item_name)
            return item.drink()
        else:
            return "You can't drink this item."
    else:
        return "You don't have the item to drink."

def smell_item(self, item_name):
    # Smell command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.smell()
    else:
        return "You don't have the item to smell."

def cut_object_with_weapon(self, object_name, weapon_name):
    # Cut object with weapon command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    weapon = self.game_state.get_player().get_item(weapon_name)
    if object and weapon:
        return object.cut_with(weapon)
    else:
        return "You can't cut the object with this weapon."

def wand_commands(self):
    # Wand commands implementation
    return "The wand glows faintly."

def fall(self):
    # Wand fall command implementation
    return "You command the wand to fall. It thuds against the ground."

def fantasize(self):
    # Wand fantasize command implementation
    return "You command the wand to fantasize. It does nothing."

def fear(self):
    # Wand fear command implementation
    return "You command the wand to fear. It trembles slightly."

def feeble(self):
    # Wand feeble command implementation
    return "You command the wand to become feeble. It dims slightly."

def fence(self):
    # Wand fence command implementation
    return "You command the wand to fence. It does nothing."

def ferment(self):
    # Wand ferment command implementation
    return "You command the wand to ferment. It does nothing."

def fierce(self):
    # Wand fierce command implementation
    return "You command the wand to become fierce. It sparks briefly."

def filch(self):
    # Wand filch command implementation
    return "You command the wand to filch. It does nothing."

def fireproof(self):
    # Wand fireproof command implementation
    return "You command the wand to become fireproof. It glows red briefly."

def float(self):
    # Wand float command implementation
    return "You command the wand to float. It rises a few inches off the ground."

def fluoresce(self):
    # Wand fluoresce command implementation
    return "You command the wand to fluoresce. It emits a soft, radiant light."

def free(self):
    # Wand free command implementation
    return "You command the wand to free. It briefly feels lighter in your hand."

def freeze(self):
    # Wand freeze command implementation
    return "You command the wand to freeze. It chills momentarily."

def frobizz(self):
    # Wand frobizz command implementation
    return "You command the wand to frobizz. It vibrates momentarily."

def frobnoid(self):
    # Wand frobnoid command implementation
    return "You command the wand to frobnoid. It wobbles briefly."

def frobozzle(self):
    # Wand frobozzle command implementation
    return "You command the wand to frobozzle. It remains stubbornly normal."

def fry(self):
    # Wand fry command implementation
    return "You command the wand to fry. It warms up slightly."

def fudge(self):
    # Wand fudge command implementation
    return "You command the wand to fudge. It gets slightly sticky."

def fumble(self):
    # Wand fumble command implementation
    return "You command the wand to fumble. It nearly slips from your grip."

def engage_combat(self, enemy):
    # Engage combat command implementation
    enemy = self.game_state.get_player_location().get_creature(enemy)
    if enemy:
        self.combat.initiate_combat(self.game_state.get_player(), enemy)
        return "You engage in combat!"
    else:
        return "There is no such creature here."

    # Add more commands as needed
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\controller.py  
# controller.py

import curses

class Controller:
    def __init__(self, game):
        self.game = game
        self.actionable_commands = ["look", "use item", "move"]
        self.last_command = None

    def parse_input(self, c):
        # Map the key to an action
        if c == curses.KEY_UP:
            direction = "north"
            command = "move north"
        elif c == curses.KEY_DOWN:
            direction = "south"
            command = "move south"
        elif c == curses.KEY_LEFT:
            direction = "west"
            command = "move west"
        elif c == curses.KEY_RIGHT:
            direction = "east"
            command = "move east"
        elif c == ord('q'):
            command = "quit"
        else:
            return None  # Unhandled key press, return None

        # Save the last command
        self.last_command = command
        return command

    def run_command(self, command):
        if command == "quit":
            return False
        elif command in self.actionable_commands:
            # Call the corresponding function for this command
            getattr(self.game.player, command.replace(" ", "_"))()
        return True
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game.py  
#game.py

from combat_controller import CombatController

class Player:
    def __init__(self, name, health, inventory):
        self._name = name
        self._health = health
        self._inventory = inventory
        self._current_location = None
        self._active_quests = []

    @property
    def name(self):
        return self._name

    @property
    def health(self):
        return self._health

    @property
    def inventory(self):
        return self._inventory

    @property
    def current_location(self):
        return self._current_location

    @current_location.setter
    def current_location(self, location):
        self._current_location = location

    @property
    def active_quests(self):
        return self._active_quests

    def get_item(self, name):
        """
        Get the item with the specified name from the player's inventory.
        Returns the item if found, None otherwise.
        """
        for item in self._inventory:
            if item.name.lower() == name.lower():
                return item
        return None

    def use_item(self, item):
        """
        Use the specified item.
        Returns True if the item was successfully used, False otherwise.
        """
        if item in self._inventory:
            self._inventory.remove(item)
            self._health += item.effect
            return True
        else:
            return False

    def get_quest(self, name):
        """
        Get the quest with the specified name from the player's active quests.
        Returns the quest if found, None otherwise.
        """
        for quest in self._active_quests:
            if quest.name.lower() == name.lower():
                return quest
        return None

    def start_quest(self, quest):
        """
        Start the specified quest.
        Returns True if the quest was successfully started, False otherwise.
        """
        if quest in self._active_quests:
            return False
        else:
            self._active_quests.append(quest)
            return True

    def complete_quest(self, quest):
        """
        Complete the specified quest.
        Returns True if the quest was successfully completed, False otherwise.
        """
        if quest in self._active_quests:
            self._active_quests.remove(quest)
            return True
        else:
            return False

    def add_item(self, item):
        """
        Add the specified item to the player's inventory.
        """
        self._inventory.append(item)

    def move(self, direction):
        """
        Move the player in the specified direction if possible.
        Returns True if the move was successful, False otherwise.
        """
        next_location = self.current_location.get_adjacent_Location(direction)
        if next_location is not None:
            self.current_location = next_location
            return True
        else:
            return False
        
class Location:
    def __init__(self, name, description):
        self._name = name
        self._description = description
        self._adjacent_locations = {}

    @property
    def name(self):
        return self._name

    @property
    def description(self):
        return self._description

    @property
    def adjacent_locations(self):
        return self._adjacent_locations

    def connect_location(self, location, direction):
        """
        Connect this location to the specified location in the specified direction.
        """
        self._adjacent_locations[direction] = location
        location._adjacent_locations[self.get_opposite_direction(direction)] = self

    def get_adjacent_location(self, direction):
        """
        Get the adjacent location in the specified direction.
        Returns the location if found, None otherwise.
        """
        return self._adjacent_locations.get(direction)

    def get_opposite_direction(self, direction):
        """
        Get the opposite direction of the specified direction.
        """
        opposite_directions = {
            "north": "south",
            "south": "north",
            "east": "west",
            "west": "east"
        }
        return opposite_directions.get(direction)

    def move(self, direction):
        """
        Move the player in the specified direction if possible.
        Returns True if the move was successful, False otherwise.
        """
        next_location = self.current_location.get_adjacent_location(direction)
        if next_location is not None:
            self.current_location = next_location
            return True
        else:
            return False

    def get_item(self, name):
        """
        Get the item with the specified name from the player's inventory.
        Returns the item if found, None otherwise.
        """
        for item in self.inventory:
            if item.name.lower() == name.lower():
                return item
        return None

    def use_item(self, item):
        """
        Use the specified item.
        Returns True if the item was successfully used, False otherwise.
        """
        if item in self.inventory:
            self.inventory.remove(item)
            self.health += item.effect
            return True
        else:
            return False

    def get_quest(self, name):
        """
        Get the quest with the specified name from the player's active quests.
        Returns the quest if found, None otherwise.
        """
        for quest in self.active_quests:
            if quest.name.lower() == name.lower():
                return quest
        return None

    def start_quest(self, quest):
        """
        Start the specified quest.
        Returns True if the quest was successfully started, False otherwise.
        """
        if quest in self.active_quests:
            return False
        else:
            self.active_quests.append(quest)
            return True

    def complete_quest(self, quest):
        """
        Complete the specified quest.
        Returns True if the quest was successfully completed, False otherwise.
        """
        if quest in self.active_quests:
            self.active_quests.remove(quest)
            return True
        else:
            return False

    def add_item(self, item):
        """
        Add the specified item to the player's inventory.
        """
        self.inventory.append(item)


class Location:
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.adjacent_Locations = {}

    def connect(self, Location, direction):
        """
        Connect this Location to the specified Location in the specified direction.
        """
        self.adjacent_Locations[direction] = Location
        Location.adjacent_Locations[self.get_opposite_direction(direction)] = self

    def get_adjacent_Location(self, direction):
        """
        Get the adjacent Location in the specified direction.
        Returns the Location if found, None otherwise.
        """
        return self.adjacent_Locations.get(direction)

    def get_description(self):
        """
        Get the description of this Location.
        """
        return self.description

    def get_opposite_direction(self, direction):
        """
        Get the opposite direction of the specified direction.
        """
        if direction == "north":
            return "south"
        elif direction == "south":
            return "north"
        elif direction == "east":
            return "west"
        elif direction == "west":
            return "east"
        else:
            return None


class Item:
    def __init__(self, name, description, effect):
        self.name = name
        self.description = description
        self.effect = effect

    def get_description(self):
        """
        Get the description of this item.
        """
        return self.description

class Quest:
    def __init__(self, name, description, objectives):
        self.name = name
        self.description = description
        self.objectives = objectives

    def get_description(self):
        """
        Get the description of this quest.
        """

        return self.description
    
class SideQuest(Quest):
    def __init__(self, name, description, objectives):
        super().__init__(name, description, objectives)
        self.side_quest_property = None  # Add additional properties specific to side quests

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game_controller.py  
#game_controller.py

from combat_controller import CombatController
from game import Player, Location, Item, Quest

class GameController:
    def __init__(self):
        # Initialize game objects
        self.player = Player("Player", 100, [])
        self.location1 = Location("Start Village", "You are in a peaceful village.")
        self.location2 = Location("Dark Forest", "You have entered a gloomy forest.")
        self.location3 = Location("Mysterious Castle", "You are at the entrance of a grand castle.")
        # Connect locations
        self.location1.connect(self.location2, "north")
        self.location1.connect(self.location3, "east")
        self.location2.connect(self.location1, "south")
        self.location3.connect(self.location1, "west")
        self.player.current_location = self.location1
        self.show_actions = True  # Variable to track if actions should be displayed
        self.combat_controller = CombatController()

    def process_command(self, command):
        # Parse user input
        parts = command.split()
        action = parts[0]
        
        if action == "toggle actions":
            self.show_actions = not self.show_actions
        elif action == "move":            
            direction = parts[1]
            if self.player.move(direction):
                print("Moved to", self.player.current_location.name)
            else:
                print("Cannot move in that direction.")
        elif action == "use":
            item_name = " ".join(parts[1:])
            item = self.player.get_item(item_name)
            if item is not None:
                if self.player.use_item(item):
                    print("Used", item.name)
                else:
                    print("Cannot use that item.")
            else:
                print("Item not found.")
        elif action == "travel":
            destination = parts[1]
            method = " ".join(parts[2:])  # Assuming method can be more than one word
            self.player.travel(destination, method)
        elif action == "start":
            quest_name = " ".join(parts[1:])
            quest = self.player.get_quest(quest_name)
            if quest is not None:
                if self.player.start_quest(quest):
                    print("Started quest:", quest.name)
                else:
                    print("Cannot start that quest.")
            else:
                print("Quest not found.")
        elif action == "complete":
            quest_name = " ".join(parts[1:])
            quest = self.player.get_quest(quest_name)
            if quest is not None:
                if self.player.complete_quest(quest):
                    print("Completed quest:", quest.name)
                else:
                    print("Cannot complete that quest.")
            else:
                print("Quest not found.")
        elif action == "combat":
            enemy_name = " ".join(parts[1:])
            result = self.engage_combat(enemy_name)
            print(result)
        else:
            print("Invalid command.")

    def engage_combat(self, enemy_name):
        enemy = self.player.current_location.get_creature(enemy_name)
        if enemy:
            self.combat_controller.initiate_combat(self.player, enemy)
            return "You engage in combat!"
        else:
            return "There is no such creature here."

    def run_game_loop(self):
        # Start game loop
        while True:
            # Print current location description
            print(self.player.current_location.get_description())
            # Print available actions
            if self.show_actions:
                print("Available actions:")
                print("move <direction>")
                print("use <item>")
                print("start <quest>")
                print("complete <quest>")
                print("travel <destination> <method>")
                print("toggle actions")
                print("combat <enemy>")
            
            # Get user input
            command = input("Enter command: ")
            
            self.process_command(command)
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\items.py  
from game import Item
# items.py

class Item:
    def __init__(self, id, name, description, weight, armor_value, attack_value, durability, rarity, value, usable, stackable, effects=None, range=None, elemental_damage=None, required_level=0, quest_item=False):
        self.id = id
        self.name = name
        self.description = description
        self.weight = weight
        self.armor_value = armor_value
        self.attack_value = attack_value
        self.durability = durability
        self.rarity = rarity
        self.value = value
        self.usable = usable
        self.stackable = stackable
        self.effects = effects
        self.range = range
        self.elemental_damage = elemental_damage
        self.required_level = required_level
        self.quest_item = quest_item

item_type_translation = {
    "WEP": "Weapon",
    "KEY": "Key",
    "ARM": "Armor",
    "POT": "Potion",
    # Add more item type codes and translations as needed
}

item_dict = {
    "00000001": Item("00000001", "Healing Elixir", "A mystical elixir that restores health and mends wounds.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=10, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000002": Item("00000002", "Blade of Destiny", "Forged by ancient sorcery, this blade holds the fate of kingdoms.",
                     weight=5.0, armor_value=0, attack_value=50, durability=100, rarity="Legendary",
                     value=1000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000003": Item("00000003", "Shield of Guardians", "An enchanted shield that shields the bearer from dark forces.",
                     weight=10.0, armor_value=50, attack_value=0, durability=150, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000004": Item("00000004", "Ancient Map of Eldoria", "An ancient map that reveals the hidden realms of Eldoria.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000005": Item("00000005", "Key to Forbidden Citadel", "This key unlocks the gates of the forbidden Citadel.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=20, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=True),
    "00000006": Item("00000006", "Axe of Titan's Fury", "An immense battle axe imbued with the fury of ancient Titans.",
                     weight=8.0, armor_value=0, attack_value=75, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000007": Item("00000007", "Mystic Chest of Enigma", "A mystical chest filled with enigmatic secrets and hidden knowledge.",
                     weight=20.0, armor_value=0, attack_value=0, durability=1, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000008": Item("00000008", "Orb of Divine Insight", "A radiant orb that grants profound wisdom and foresight.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000009": Item("00000009", "Amulet of Arcane Power", "An amulet that channels arcane energy to enhance the wearer's abilities.",
                     weight=0.2, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "0000000A": Item("0000000A", "Ethereal Blaster", "A futuristic blaster that unleashes powerful ethereal energy bolts.",
                     weight=2.0, armor_value=0, attack_value=60, durability=60, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=6, quest_item=False),
    "0000000B": Item("0000000B", "Shadowstrike Blade", "A legendary blade that harnesses the darkness itself, capable of slicing through armor and vanquishing enemies with a single strike.",
                     weight=4.5, armor_value=0, attack_value=80, durability=120, rarity="Epic",
                     value=1500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "0000000C": Item("0000000C", "Crystalized Orb", "A mystic orb that emanates a brilliant light, capable of unlocking hidden powers and revealing the secrets of the arcane.",
                     weight=1.0, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000000D": Item("0000000D", "Radiant Essence", "A shimmering essence infused with celestial energy, radiating with healing properties and restoring vitality to the wounded.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=20, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000000E": Item("0000000E", "Dragonheart Pendant", "A pendant crafted from the heart of a mighty dragon, granting the wearer impenetrable defense and the power to withstand even the fiercest of attacks.",
                     weight=0.8, armor_value=60, attack_value=0, durability=80, rarity="Legendary",
                     value=2000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=15, quest_item=False),
    "0000000F": Item("0000000F", "Tome of Arcane Knowledge", "A tome filled with ancient wisdom and forbidden spells, offering the key to unlocking the secrets of the arcane arts.",
                     weight=2.0, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000010": Item("00000010", "Celestial Longbow", "A bow infused with celestial energy, granting unparalleled accuracy and the ability to unleash devastating arrows imbued with divine power.",
                     weight=3.5, armor_value=0, attack_value=70, durability=150, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000011": Item("00000011", "Frostbite Gauntlets", "Gauntlets forged in the heart of an icy mountain, capable of freezing foes upon contact and providing resistance against frost-based attacks.",
                     weight=1.2, armor_value=40, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000012": Item("00000012", "Thundering Warhammer", "A massive warhammer infused with the power of thunder, generating thunderstorms with each mighty swing and striking fear into the hearts of enemies.",
                     weight=6.0, armor_value=0, attack_value=90, durability=120, rarity="Epic",
                     value=1800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=14, quest_item=False),
    "00000013": Item("00000013", "Luminous Elixir", "An elixir concocted from rare glowing herbs, radiating a soothing aura that restores health and grants temporary resistance to dark magic.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=50, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000014": Item("00000014", "Enchanted Robes", "Robes woven with ancient enchantments, providing exceptional magical protection and enhancing the wearer's spellcasting abilities.",
                     weight=2.5, armor_value=50, attack_value=0, durability=80, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000015": Item("00000015", "Viper's Fang Dagger", "A deadly dagger crafted from the fang of a venomous serpent, delivering swift and precise strikes that inflict deadly poison upon enemies.",
                     weight=0.8, armor_value=0, attack_value=60, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000016": Item("00000016", "Golem Core Shard", "A shard imbued with the essence of a mighty golem, granting the bearer increased strength and the ability to withstand tremendous physical force.",
                     weight=1.5, armor_value=20, attack_value=0, durability=80, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000017": Item("00000017", "Phoenix Feather Quill", "A quill plucked from the majestic wings of a phoenix, enabling the writing of powerful spells and granting the ability to unleash fiery magic.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000018": Item("00000018", "Stormguard Shield", "A shield infused with the power of thunderstorms, creating a protective barrier that absorbs and redirects lightning-based attacks.",
                     weight=4.0, armor_value=70, attack_value=0, durability=150, rarity="Rare",
                     value=900, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "00000019": Item("00000019", "Whisperwind Boots", "Boots crafted from the ethereal essence of the Whisperwind, granting the wearer increased speed and the ability to move in silence.",
                     weight=1.2, armor_value=30, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000001A": Item("0000001A", "Silvermoon Amulet", "An amulet blessed by the moonlight of the Silvermoon, enhancing the bearer's magical prowess and granting the ability to harness moon-based spells.",
                     weight=0.4, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001B": Item("0000001B", "Venomous Vial", "A vial filled with potent venom extracted from deadly creatures, capable of poisoning enemies and causing debilitating effects.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=30, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001C": Item("0000001C", "Astral Compass", "A compass infused with astral energy, guiding the bearer through uncharted realms and revealing hidden paths to distant lands.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001D": Item("0000001D", "Runebound Armor", "Armor adorned with ancient runes, providing mystical protection and increasing the wearer's resistance against magical attacks.",
                     weight=5.0, armor_value=80, attack_value=0, durability=120, rarity="Epic",
                     value=2000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=15, quest_item=False),
    "0000001E": Item("0000001E", "Glimmering Pearl", "A radiant pearl imbued with shimmering magic, granting the ability to illuminate darkness and revealing hidden treasures.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=40, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001F": Item("0000001F", "Flameforged Greatsword", "A greatsword forged in the heart of an ancient volcano, engulfed in everlasting flames and capable of cleaving through any obstacle.",
                     weight=7.0, armor_value=0, attack_value=100, durability=150, rarity="Epic",
                     value=2200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=16, quest_item=False),
    "00000020": Item("00000020", "Dreamweaver Staff", "A staff woven with the essence of dreams, allowing the bearer to delve into the realm of dreams and harness its power to shape reality.",
                     weight=4.5, armor_value=0, attack_value=60, durability=120, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "00000021": Item("00000021", "Serpent's Scale Mail", "Armor crafted from the scales of a mighty serpent, providing exceptional protection against poison and granting resistance to venomous attacks.",
                     weight=6.5, armor_value=90, attack_value=0, durability=150, rarity="Epic",
                     value=2500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=18, quest_item=False),
    "00000022": Item("00000022", "Starlight Cloak", "A cloak infused with the power of the stars, granting the wearer enhanced agility and the ability to blend with the night sky, rendering them invisible.",
                     weight=2.0, armor_value=30, attack_value=0, durability=100, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000023": Item("00000023", "Ancient Relic", "A relic from a bygone era, radiating ancient magic and holding the key to unlocking forgotten knowledge and secrets of the past.",
                     weight=3.0, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000024": Item("00000024", "Swiftwind Boots", "Boots imbued with the swiftness of the wind, granting the wearer increased speed and agility, allowing them to move with unparalleled grace.",
                     weight=1.0, armor_value=20, attack_value=0, durability=80, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000025": Item("00000025", "Cursed Skull Pendant", "A pendant cursed by dark sorcery, granting the bearer increased power but at a terrible cost, consuming their life essence over time.",
                     weight=0.6, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000026": Item("00000026", "Thunderstrike Gauntlets", "Gauntlets infused with the power of thunderstorms, allowing the wearer to summon lightning bolts and unleash devastating electrical attacks.",
                     weight=1.5, armor_value=40, attack_value=0, durability=100, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000027": Item("00000027", "Frostbite Arrows", "Arrows crafted from enchanted ice, capable of freezing enemies upon impact and leaving them vulnerable to subsequent attacks.",
                     weight=0.1, armor_value=0, attack_value=40, durability=100, rarity="Uncommon",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000028": Item("00000028", "Essence of Eternal Flame", "A vial containing the essence of an eternal flame, granting the ability to unleash devastating fire-based attacks and ignite surroundings.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=30, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000031": Item("00000031", "Wooden Shovel", "A basic wooden shovel, suitable for digging small holes and trenches.",
                     weight=2.0, armor_value=0, attack_value=5, durability=50, rarity="Common",
                     value=15, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000032": Item("00000032", "Iron Spade", "An iron spade with a sturdy handle, designed for digging in tough and rocky terrains.",
                     weight=3.5, armor_value=0, attack_value=8, durability=75, rarity="Common",
                     value=25, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000033": Item("00000033", "Oil Lantern", "A traditional oil-powered lantern that provides a steady source of light in dark environments.",
                     weight=1.5, armor_value=0, attack_value=0, durability=30, rarity="Common",
                     value=10, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000034": Item("00000034", "Iron Key", "A simple iron key that can unlock various standard locks.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000035": Item("00000035", "Leather Gloves", "A pair of simple leather gloves, providing basic protection for the hands.",
                     weight=0.3, armor_value=5, attack_value=0, durability=20, rarity="Common",
                     value=8, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000036": Item("00000036", "Iron Keyring", "A keyring made of iron, capable of holding multiple keys.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=3, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000037": Item("00000037", "Leather Pouch", "A small leather pouch, useful for storing coins, gems, and other small items.",
                     weight=0.5, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000038": Item("00000038", "Rope", "A sturdy rope made of natural fibers, suitable for various utility purposes.",
                     weight=1.0, armor_value=0, attack_value=0, durability=50, rarity="Common",
                     value=10, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000039": Item("00000039", "Cooking Pot", "A medium-sized cooking pot made of cast iron, perfect for preparing meals during outdoor adventures.",
                     weight=2.5, armor_value=0, attack_value=0, durability=40, rarity="Common",
                     value=15, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003A": Item("0000003A", "Ink Bottle", "A small glass bottle filled with ink, commonly used for writing and drawing.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003B": Item("0000003B", "Chalk", "A piece of chalk made from compressed calcium carbonate, often used for writing on blackboards or marking paths.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003C": Item("0000003C", "Glass Bottle", "A transparent glass bottle with a cork stopper, suitable for holding liquids or small items.",
                     weight=0.4, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003D": Item("0000003D", "Wooden Bowl", "A simple wooden bowl, useful for holding food or other small items.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=3, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003E": Item("0000003E", "Fishing Net", "A sturdy net made of woven fibers, designed for catching fish or other aquatic creatures.",
                     weight=1.2, armor_value=0, attack_value=0, durability=30, rarity="Common",
                     value=12, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003F": Item("0000003F", "Iron Buckle", "A sturdy iron buckle commonly used for fastening belts or straps.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000040": Item("00000040", "Leather Belt", "A simple leather belt with a metal buckle, used to hold clothing or secure equipment.",
                     weight=0.4, armor_value=2, attack_value=0, durability=15, rarity="Common",
                     value=6, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000041": Item("00000041", "Wooden Mug", "A sturdy wooden mug, suitable for holding and drinking beverages.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=3, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000042": Item("00000042", "Flint and Steel", "A set consisting of a small piece of flint and a metal striker, used to create sparks and start fires.",
                     weight=0.2, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=7, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000043": Item("00000043", "Wooden Spoon", "A basic wooden spoon, useful for stirring and mixing ingredients while cooking.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=2, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000044": Item("00000044", "Traveler's Journal", "A compact journal with blank pages, intended for recording travel experiences and observations.",
                     weight=0.6, armor_value=0, attack_value=0, durability=15, rarity="Common",
                     value=8, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000045": Item("00000045", "Cloth Bandage", "A soft cloth bandage used to wrap wounds and provide basic medical care.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=3, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000046": Item("00000046", "Iron Nails", "A small bundle of iron nails, commonly used for construction or repairing items.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=4, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000047": Item("00000047", "Wooden Comb", "A simple wooden comb, used for grooming and styling hair.",
                     weight=0.2, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=2, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000048": Item("00000048", "Fishing Hook", "A sharp fishing hook attached to a line, used for catching fish.",
                     weight=0.1, armor_value=0, attack_value=2, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000049": Item("00000049", "Enchanted Cloak", "A magical cloak that provides protection against the elements.",
                     weight=2.0, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "0000004A": Item("0000004A", "Satchel of Holding", "A satchel enchanted with a dimensional pocket, allowing for increased storage capacity.",
                     weight=1.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004B": Item("0000004B", "Glowstone Pendant", "A pendant infused with magical energy, emitting a soft glow in dark environments.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004C": Item("0000004C", "Smoke Bomb", "A small explosive device that creates a dense cloud of smoke, useful for stealth and distraction.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004D": Item("0000004D", "Mystic Rune", "An ancient rune inscribed on a small stone tablet, believed to hold mystical powers.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004E": Item("0000004E", "Pocket Watch", "A finely crafted pocket watch, allowing for accurate timekeeping.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004F": Item("0000004F", "Elven Tonic", "A special elven brew that provides temporary enhancements to agility and reflexes.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=250, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000050": Item("00000050", "Ancient Relic", "A mysterious artifact from a long-lost civilization, holding untold secrets.",
                     weight=5.0, armor_value=0, attack_value=0, durability=1, rarity="Rare",
                     value=1000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000051": Item("00000051", "Crystal Staff", "A staff carved from a rare crystal, amplifying magical abilities.",
                     weight=4.0, armor_value=0, attack_value=50, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000052": Item("00000052", "Dwarven Ale", "A strong and flavorful ale brewed by skilled dwarven craftsmen.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000053": Item("00000053", "Lucky Charm", "A small charm believed to bring good fortune and increase luck.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000054": Item("00000054", "Ranger's Quiver", "A specially designed quiver that increases arrow capacity and quickens reloading.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000055": Item("00000055", "Silk Gloves", "Elegant gloves made from fine silk, providing dexterity and comfort.",
                     weight=0.2, armor_value=5, attack_value=0, durability=20, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000056": Item("00000056", "Harmonious Flute", "A beautifully crafted wooden flute, capable of producing enchanting melodies.",
                     weight=0.4, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000057": Item("00000057", "Poisoned Dagger", "A small dagger coated with a deadly poison, inflicting additional damage over time.",
                     weight=0.8, armor_value=0, attack_value=30, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000058": Item("00000058", "Thieves' Tools", "A set of tools commonly used by skilled thieves for lockpicking and stealthy activities.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000059": Item("00000059", "Wanderer's Boots", "Sturdy leather boots designed for long journeys, providing comfort and endurance.",
                     weight=1.2, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005A": Item("0000005A", "Soulstone", "A small crystal imbued with ancient magic, capable of storing the essence of fallen creatures.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005B": Item("0000005B", "Hunter's Bow", "A well-crafted bow favored by hunters, providing increased accuracy and range.",
                     weight=2.0, armor_value=0, attack_value=40, durability=60, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005C": Item("0000005C", "Potion of Invisibility", "A magical potion that grants temporary invisibility to the drinker.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005D": Item("0000005D", "Elven Bow", "An elegant bow crafted by skilled elven archers, granting increased precision and power.",
                     weight=1.8, armor_value=0, attack_value=45, durability=70, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=7, quest_item=False),
    "0000005E": Item("0000005E", "Wand of Fireballs", "A wand infused with fire magic, allowing the wielder to unleash powerful fireballs.",
                     weight=0.8, armor_value=0, attack_value=55, durability=60, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000005F": Item("0000005F", "Elixir of Strength", "A potent elixir that temporarily enhances the drinker's physical strength.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000060": Item("00000060", "Enchanted Necklace", "A necklace adorned with enchanted gemstones, bestowing magical protection.",
                     weight=0.6, armor_value=15, attack_value=0, durability=40, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000061": Item("00000061", "Bard's Lute", "A musical instrument favored by bards, capable of enchanting listeners with its melodies.",
                     weight=1.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000062": Item("00000062", "Cloak of Shadows", "A dark cloak that grants the wearer enhanced stealth and evasion abilities.",
                     weight=1.5, armor_value=20, attack_value=0, durability=50, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000063": Item("00000063", "Scroll of Teleportation", "A magical scroll that instantly transports the reader to a previously marked location.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000064": Item("00000064", "Silk Robes", "Exquisite robes made from fine silk, providing magical affinity and comfort.",
                     weight=2.0, armor_value=15, attack_value=0, durability=30, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000065": Item("00000065", "Book of Enchantments", "A thick book containing ancient knowledge of enchantments and magical rituals.",
                     weight=1.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000066": Item("00000066", "Trap Kit", "A set of tools used for setting up traps and mechanisms to deter intruders.",
                     weight=1.2, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000067": Item("00000067", "Enchanted Bracelet", "A bracelet infused with magical energies, enhancing the wearer's spellcasting abilities.",
                     weight=0.4, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000068": Item("00000068", "Phoenix Feather", "A feather from a mythical phoenix, said to possess regenerative properties.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000069": Item("00000069", "Crystal Shard", "A shard of rare crystal with various magical properties.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006A": Item("0000006A", "Sneak's Dagger", "A small, lightweight dagger favored by stealthy assassins.",
                     weight=0.6, armor_value=0, attack_value=25, durability=40, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006B": Item("0000006B", "Sorcerer's Hat", "A pointed hat worn by sorcerers and wizards, enhancing magical potency.",
                     weight=0.3, armor_value=5, attack_value=0, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006C": Item("0000006C", "Sleeping Bag", "A portable and comfortable sleeping bag for resting during long journeys.",
                     weight=1.0, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006D": Item("0000006D", "Elixir of Clarity", "A magical elixir that clears the mind and enhances focus and concentration.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006E": Item("0000006E", "Explorer's Hat", "A wide-brimmed hat favored by adventurers and explorers, providing protection from the sun and rain.",
                     weight=0.4, armor_value=5, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006F": Item("0000006F", "Book of Shadows", "A tome containing dark and forbidden knowledge, granting access to powerful dark magic spells.",
                     weight=1.5, armor_value=0, attack_value=0, durability=1, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000070": Item("00000070", "Horn of Summoning", "A magical horn used to summon and communicate with mystical creatures.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000071": Item("00000071", "Spider Silk Gloves", "Gloves made from the silk of giant spiders, providing increased dexterity and resistance to web-based attacks.",
                     weight=0.3, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000072": Item("00000072", "Gem of Power", "A precious gem imbued with raw magical energy, used for various enchantments and rituals.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000073": Item("00000073", "Blessed Water", "Water that has been blessed by divine entities, capable of healing wounds and curing ailments.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000074": Item("00000074", "Moonstone Ring", "A ring adorned with a moonstone, enhancing the wearer's magical abilities during nighttime.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000075": Item("00000075", "Crystal Orb", "A crystal orb used by seers and fortune-tellers to glimpse into the future.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000076": Item("00000076", "Warding Talisman", "A talisman inscribed with protective runes, providing enhanced defense against magical attacks.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000077": Item("00000077", "Bandit Mask", "A mask worn by bandits and rogues to conceal their identity and intimidate their victims.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000078": Item("00000078", "Skull Lantern", "A lantern made from a human skull, emitting an eerie glow that repels undead creatures.",
                     weight=1.0, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000079": Item("00000079", "Mystic Feather", "A feather infused with magical energies, capable of redirecting projectiles and providing limited levitation.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=120, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007A": Item("0000007A", "Enchanted Mirror", "A mystical mirror that reveals hidden truths and reflects the soul.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Rare",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007B": Item("0000007B", "Soulstone Pendant", "A pendant containing a captured soul, which grants the wearer increased vitality.",
                     weight=0.3, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007C": Item("0000007C", "Whispering Dagger", "A dagger forged by ancient assassins, rumored to whisper secrets to its wielder.",
                     weight=0.8, armor_value=0, attack_value=30, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007D": Item("0000007D", "Elven Bow", "A finely crafted bow of elven design, known for its accuracy and long range.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007E": Item("0000007E", "Scroll of Knowledge", "A scroll containing ancient wisdom and knowledge, granting insights to its reader.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007F": Item("0000007F", "Ring of Protection", "A ring imbued with protective enchantments, increasing the wearer's defense.",
                     weight=0.1, armor_value=3, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000080": Item("00000080", "Dragon Scale Armor", "Armor crafted from the scales of a mighty dragon, providing exceptional protection.",
                     weight=8.0, armor_value=70, attack_value=0, durability=120, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000081": Item("00000081", "Invisibility Cloak", "A cloak that grants the ability to become invisible, allowing the wearer to sneak undetected.",
                     weight=1.2, armor_value=8, attack_value=0, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000082": Item("00000082", "Frost Shard", "A shard of ice imbued with the power of frost, capable of freezing enemies on contact.",
                     weight=0.4, armor_value=0, attack_value=20, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Frost", required_level=0, quest_item=False),
    "00000083": Item("00000083", "Wand of Fireballs", "A wand that unleashes powerful fireballs, engulfing enemies in flames.",
                     weight=0.6, armor_value=0, attack_value=25, durability=40, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "00000084": Item("00000084", "Book of Shadows", "A forbidden tome containing dark and arcane knowledge, empowering the reader with forbidden spells.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000085": Item("00000085", "Amulet of the Moon", "An amulet infused with lunar magic, enhancing the wearer's mystical abilities during the night.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000086": Item("00000086", "Hunter's Crossbow", "A crossbow favored by skilled hunters, designed for precision and ease of use.",
                     weight=3.0, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000087": Item("00000087", "Druidic Staff", "A staff infused with the power of nature, allowing the wielder to channel the elements.",
                     weight=2.5, armor_value=0, attack_value=35, durability=60, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000088": Item("00000088", "Shadow Cloak", "A cloak woven from shadowy fabric, granting the wearer enhanced stealth and agility.",
                     weight=1.2, armor_value=6, attack_value=0, durability=60, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000089": Item("00000089", "Elixir of Agility", "An elixir that enhances the user's speed and reflexes, granting increased agility.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008A": Item("0000008A", "Enchanted Gloves", "Gloves infused with enchantments, increasing the wearer's dexterity and magical prowess.",
                     weight=0.5, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008B": Item("0000008B", "Holy Relic", "A sacred relic imbued with divine energy, capable of repelling dark forces.",
                     weight=0.8, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008C": Item("0000008C", "Sonic Boom Boots", "Boots that harness the power of sound, allowing the wearer to unleash devastating shockwaves.",
                     weight=1.5, armor_value=3, attack_value=0, durability=60, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008D": Item("0000008D", "Venomous Blade", "A blade coated with deadly venom, causing additional poison damage to enemies.",
                     weight=1.0, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Poison", required_level=0, quest_item=False),
    "0000008E": Item("0000008E", "Glowing Crystal", "A crystal that emits a soft, enchanting glow, providing illumination in the darkest of places.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008F": Item("0000008F", "Enchanted Bowtie", "A stylish bowtie enchanted with magic, granting the wearer a touch of elegance and charm.",
                     weight=0.1, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000090": Item("00000090", "Oracle's Staff", "A staff infused with the power of foresight, enabling the wielder to see into the future.",
                     weight=2.0, armor_value=0, attack_value=30, durability=60, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000091": Item("00000091", "Gauntlets of Strength", "Gauntlets imbued with ancient strength-enhancing enchantments, granting incredible power.",
                     weight=1.5, armor_value=5, attack_value=0, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000092": Item("00000092", "Mysterious Elixir", "A mysterious elixir with unknown properties, rumored to bestow temporary magical abilities.",
                     weight=0.4, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=400, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000093": Item("00000093", "Shield of Reflection", "A shield that reflects incoming projectiles and spells, providing enhanced defense.",
                     weight=4.0, armor_value=60, attack_value=0, durability=90, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000094": Item("00000094", "Moonstone Necklace", "A necklace adorned with a shimmering moonstone, granting heightened magical abilities under moonlight.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000095": Item("00000095", "Cross Pendant", "A pendant bearing the symbol of faith, providing protection against undead creatures.",
                     weight=0.3, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000096": Item("00000096", "Thunderstorm Tome", "A powerful tome that conjures a raging thunderstorm, striking down enemies with lightning bolts.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "00000097": Item("00000097", "Assassin's Hood", "A hood favored by assassins, providing increased stealth and critical strike chance.",
                     weight=0.8, armor_value=4, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000098": Item("00000098", "Crimson Orchid", "A rare orchid with crimson petals, possessing healing properties when consumed.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000099": Item("00000099", "Enchanted Harp", "A harp enchanted with magical melodies, capable of soothing hearts and calming minds.",
                     weight=2.0, armor_value=0, attack_value=25, durability=60, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009A": Item("0000009A", "Glimmering Dagger", "A dagger that glimmers with ethereal light, striking fear into the hearts of enemies.",
                     weight=0.6, armor_value=0, attack_value=35, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009B": Item("0000009B", "Crystal Shield", "A shield crafted from enchanted crystals, providing excellent magical defense.",
                     weight=5.0, armor_value=50, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009C": Item("0000009C", "Stealthy Boots", "Boots designed for silent movement, allowing the wearer to move undetected in the shadows.",
                     weight=1.2, armor_value=3, attack_value=0, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009D": Item("0000009D", "Scepter of Light", "A powerful scepter emanating a radiant light, capable of banishing darkness and dispelling evil.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009E": Item("0000009E", "Ancient Scroll", "An ancient scroll inscribed with forgotten knowledge, containing powerful incantations.",
                     weight=0.3, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009F": Item("0000009F", "Enchanted Necklace", "A necklace adorned with enchantments, enhancing the wearer's magical abilities.",
                     weight=0.2, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A0": Item("000000A0", "Vampiric Blade", "A blade that drains the life force of enemies, granting health to the wielder with each strike.",
                     weight=1.2, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A1": Item("000000A1", "Arcane Runestone", "A runestone inscribed with arcane symbols, empowering spells and increasing magical potency.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A2": Item("000000A2", "Feathered Hat", "A hat adorned with colorful feathers, bestowing a touch of elegance and style.",
                     weight=0.3, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A3": Item("000000A3", "Harmony Medallion", "A medallion that radiates harmony, providing increased resistance against disruptive magic.",
                     weight=0.2, armor_value=2, attack_value=0, durability=20, rarity="Rare",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A4": Item("000000A4", "Singing Sword", "A sword that sings with a melodic hum, resonating with the wielder's battle prowess.",
                     weight=2.5, armor_value=0, attack_value=50, durability=80, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A5": Item("000000A5", "Gem of Enlightenment", "A gem infused with ancient wisdom, granting profound insights and increased intellect.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A6": Item("000000A6", "Enchanted Boots", "Boots enchanted with magical swiftness, enhancing the wearer's speed and mobility.",
                     weight=1.0, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A7": Item("000000A7", "Nightshade Dagger", "A dagger infused with the essence of shadows, granting increased critical strike chance under the cover of darkness.",
                     weight=0.8, armor_value=0, attack_value=35, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A8": Item("000000A8", "Spellbound Grimoire", "A grimoire filled with enchantments and magical formulas, enabling the casting of advanced spells.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A9": Item("000000A9", "Phoenix Feather", "A feather from a mythical phoenix, radiating intense heat and capable of igniting fires.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000AA": Item("000000AA", "Crystalized Bow", "A bow crafted from crystalized energy, shooting arrows infused with magical power.",
                     weight=2.5, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AB": Item("000000AB", "Glowing Lantern", "A lantern that emits a gentle, soothing glow, illuminating the surroundings.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Common",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AC": Item("000000AC", "Crystal Blade", "A blade crafted from enchanted crystals, capable of channeling magical energy for devastating attacks.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AD": Item("000000AD", "Oracle's Robe", "A robe worn by seers and prophets, empowering the wearer with heightened magical perception.",
                     weight=2.0, armor_value=10, attack_value=0, durability=80, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AE": Item("000000AE", "Soulbound Necklace", "A necklace imbued with the essence of a powerful soul, providing protection against dark forces.",
                     weight=0.3, armor_value=3, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AF": Item("000000AF", "Thunderstrike Hammer", "A mighty hammer capable of summoning thunderstorms and unleashing powerful lightning strikes.",
                     weight=8.0, armor_value=0, attack_value=55, durability=90, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "000000B0": Item("000000B0", "Enchanted Quiver", "A quiver enchanted with magical properties, providing an endless supply of arrows.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B1": Item("000000B1", "Scroll of Teleportation", "A scroll that allows the user to instantly teleport to a known location.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B2": Item("000000B2", "Golem's Heartstone", "A heart-shaped stone extracted from a defeated golem, radiating with residual magical energy.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B3": Item("000000B3", "Silent Boots", "Boots designed for stealthy movement, muffling footsteps and suppressing sound.",
                     weight=1.2, armor_value=4, attack_value=0, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B4": Item("000000B4", "Fiery Essence", "A vial containing a potent essence of fire, capable of enhancing fire-based spells and attacks.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000B5": Item("000000B5", "Enchanted Cuffs", "Cuffs adorned with enchantments, granting the wearer increased resistance to magic.",
                     weight=0.4, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B6": Item("000000B6", "Mystic Cloak", "A cloak woven with intricate mystical patterns, enhancing the wearer's magical abilities.",
                     weight=1.5, armor_value=6, attack_value=0, durability=70, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B7": Item("000000B7", "Sapphire Pendant", "A pendant adorned with a sparkling sapphire, enhancing the wearer's magical aptitude.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B8": Item("000000B8", "Spiritbound Bow", "A bow infused with the essence of ethereal spirits, granting increased accuracy and critical strike chance.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B9": Item("000000B9", "Cursed Talisman", "A talisman imbued with a dark curse, amplifying the wearer's dark magic but at a cost.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BA": Item("000000BA", "Glowing Mushroom", "A luminescent mushroom that emits a soft glow, providing light in dark places.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BB": Item("000000BB", "Enchanted Mirror", "A mirror enchanted with a spell of reflection, capable of reflecting magical attacks.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BC": Item("000000BC", "Helm of the Berserker", "A helm infused with the spirit of a raging berserker, enhancing the wearer's strength and ferocity in battle.",
                     weight=2.0, armor_value=8, attack_value=0, durability=80, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BD": Item("000000BD", "Crystal of Resilience", "A crystal that fortifies the wearer's resilience, reducing the duration of negative status effects.",
                     weight=0.2, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BE": Item("000000BE", "Nightshade Elixir", "An elixir brewed from rare nightshade plants, providing temporary heightened senses and perception.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BF": Item("000000BF", "Mystic Amulet", "An amulet infused with ancient mystical energies, amplifying the wearer's magical abilities.",
                     weight=0.1, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C0": Item("000000C0", "Enchanted Gloves", "Gloves imbued with enchantments, granting the wearer increased dexterity and magical finesse.",
                     weight=0.5, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C1": Item("000000C1", "Silent Shiv", "A small, deadly Shiv that makes no sound when wielded, perfect for stealthy assassinations.",
                     weight=0.3, armor_value=0, attack_value=25, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C2": Item("000000C2", "Wand of Frost", "A wand that unleashes icy blasts, freezing enemies and slowing their movements.",
                     weight=0.4, armor_value=0, attack_value=30, durability=40, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Frost", required_level=0, quest_item=False),
    "000000C3": Item("000000C3", "Ethereal Robe", "A robe crafted from ethereal fabric, enhancing the wearer's magical abilities and providing ethereal protection.",
                     weight=1.5, armor_value=6, attack_value=0, durability=70, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C4": Item("000000C4", "Vampiric Amulet", "An amulet that feeds on the life force of enemies, granting health to the wearer with each successful attack.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C5": Item("000000C5", "Flaming Sword", "A sword imbued with the essence of fire, engulfing enemies in flames upon striking.",
                     weight=2.0, armor_value=0, attack_value=35, durability=60, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000C6": Item("000000C6", "Glyphed Dagger", "A dagger inscribed with ancient glyphs, increasing critical strike chance and amplifying magical damage.",
                     weight=0.6, armor_value=0, attack_value=30, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C7": Item("000000C7", "Crystal Staff", "A staff crafted from enchanted crystals, channeling the power of arcane energy with great precision.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C8": Item("000000C8", "Soulstone Ring", "A ring containing a captured soul, providing enhanced magical abilities to the wearer.",
                     weight=0.1, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C9": Item("000000C9", "Nature's Embrace", "A charm infused with the essence of nature, granting the wearer increased vitality and affinity with flora and fauna.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CA": Item("000000CA", "Whisperwind Bow", "A bow favored by skilled archers, known for its whisper-quiet string and deadly accuracy.",
                     weight=2.5, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CB": Item("000000CB", "Chaos Stone", "A stone infused with chaotic energy, unleashing unpredictable elemental effects upon activation.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CC": Item("000000CC", "Enchanted Earrings", "Earrings adorned with enchantments, increasing the wearer's magical affinity and spellcasting proficiency.",
                     weight=0.2, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CD": Item("000000CD", "Soulbound Gauntlets", "Gauntlets imbued with the essence of powerful souls, increasing the wearer's strength and resilience.",
                     weight=1.0, armor_value=5, attack_value=0, durability=60, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CE": Item("000000CE", "Stormcaller Ring", "A ring that harnesses the power of storms, allowing the wearer to summon lightning and control the weather.",
                     weight=0.1, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "000000CF": Item("000000CF", "Glimmering Crown", "A crown adorned with glimmering jewels, representing nobility and granting enhanced magical presence.",
                     weight=0.5, armor_value=3, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D0": Item("000000D0", "Phantom Blade", "A blade that phases in and out of reality, allowing the wielder to bypass defenses and strike ethereal targets.",
                     weight=1.5, armor_value=0, attack_value=35, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D1": Item("000000D1", "Voidstone Pendant", "A pendant containing a fragment of the void, providing increased resistance to dark magic.",
                     weight=0.2, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D2": Item("000000D2", "Crescent Blade", "A curved blade resembling the moon's crescent, enhancing the wielder's agility and critical strike chance.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D3": Item("000000D3", "Arcane Bracelet", "A bracelet infused with arcane energy, enhancing the wearer's spellcasting speed and mana regeneration.",
                     weight=0.3, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D4": Item("000000D4", "Duskblade", "A blade forged from twilight steel, radiating with a haunting aura and increasing shadow-based attacks.",
                     weight=2.0, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D5": Item("000000D5", "Enchanted Chalice", "A chalice filled with magical energy, restoring the user's health and mana when consumed.",
                     weight=0.5, armor_value=0, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D6": Item("000000D6", "Spectral Cloak", "A cloak woven from spectral threads, providing increased evasion and resistance against ethereal attacks.",
                     weight=1.5, armor_value=5, attack_value=0, durability=70, rarity="Uncommon",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D7": Item("000000D7", "Arcane Talisman", "A talisman infused with arcane magic, amplifying the wearer's spellcasting potency and accuracy.",
                     weight=0.2, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D8": Item("000000D8", "Luminous Earrings", "Earrings adorned with radiant gems, bestowing a radiant aura and increased magical power.",
                     weight=0.2, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D9": Item("000000D9", "Venomous Vial", "A vial containing potent venom, coating weapons with deadly poison upon application.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage="Poison", required_level=0, quest_item=False),
    "000000DA": Item("000000DA", "Sage's Tome", "A tome filled with ancient wisdom and knowledge, increasing the wearer's intellect and spellcasting abilities.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DB": Item("000000DB", "Crystal Shard", "A shard of enchanted crystal, radiating with residual magical energy.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DC": Item("000000DC", "Arcane Bracers", "Bracers infused with arcane power, increasing the wearer's spellcasting speed and accuracy.",
                     weight=0.4, armor_value=3, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DD": Item("000000DD", "Whispering Dagger", "A dagger that whispers secrets to the wielder, increasing critical strike chance and granting sneak attack bonuses.",
                     weight=0.5, armor_value=0, attack_value=30, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DE": Item("000000DE", "Scepter of Shadows", "A scepter shrouded in darkness, channeling the power of shadows and granting control over the unseen.",
                     weight=2.0, armor_value=0, attack_value=40, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DF": Item("000000DF", "Crown of Illusions", "A crown that creates illusions and conceals the wearer's true identity, granting increased deception and stealth abilities.",
                     weight=0.8, armor_value=2, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000E0": Item("000000E0", "Crystal of Tranquility", "A crystal that emits a calming aura, reducing stress and increasing focus.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False)
}

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\main.py  
# main.py

from game_controller import GameController

def main():
    game_controller = GameController()
    game_controller.run_game_loop()

if __name__ == "__main__":
    main()REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\puzzles.py  
class Puzzle:
    def __init__(self, description, solution):
        self.description = description
        self.solution = solution
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\quests.py  
#quests.py

from game import Quest, SideQuest
from story import story

# Define quests and side quests
main_quest = Quest("Unravel the Mystery", "Embark on a journey to unravel the mystery behind the lost civilization.", ["Unravel the Mystery"])
decipher_quest = Quest("Decipher the Ancient Text", "Decipher the encrypted portion of the tome to gain deeper knowledge.", ["Decipher the Ancient Text"])
allies_quest = Quest("Seek Allies", "Seek out potential allies who can aid you in your quest to protect Lumina.", ["Seek Allies"])
confrontation_quest = Quest("Confront Lord Vexis", "Prepare for the final confrontation and defeat Lord Vexis to save Lumina.", ["Confront Lord Vexis"])

first_barrier_side_quest = SideQuest("Unearth the Lost Art of Deciphering", "Find and learn the lost art of deciphering the arcane script.", ["Unearth the Lost Art of Deciphering"])
evidence_side_quest = SideQuest("Gather Evidence of the Threat", "Search for evidence that connects Lord Vexis's ambitions with the prophetic warning.", ["Gather Evidence of the Threat"])
unexpected_ally_side_quest = SideQuest("Earn the Trust of an Unexpected Ally", "Prove your worth and earn the trust of Eris, the enigmatic warrior-mage.", ["Earn the Trust of an Unexpected Ally"])
hidden_secrets_side_quest = SideQuest("Search for Hidden Secrets", "Explore the Royal Library and uncover the hidden chambers filled with scrolls of lost knowledge.", ["Search for Hidden Secrets"])
journey_to_shrine_side_quest = SideQuest("Embark on the Journey to the Hidden Shrine", "Embark on a perilous journey to find the hidden shrine linked to the lost civilization.", ["Embark on the Journey to the Hidden Shrine"])

blank_quest = Quest("No Active Quests", "You currently have no active quests.", [])

# Assign the blank quest for sections without quests
for section in story.values():
    if "quest" not in section:
        section["quest"] = blank_quest
    if "side_quest" not in section:
        section["side_quest"] = blank_quest

# Assign quests and side quests to the corresponding story sections
story["start"]["quest"] = main_quest
story["decision_to_learn"]["quest"] = decipher_quest
story["first_barrier"]["side_quest"] = first_barrier_side_quest
story["learning_the_language"]["side_quest"] = decipher_quest
story["first_insight"]["side_quest"] = hidden_secrets_side_quest
story["evidence_of_threat"]["side_quest"] = evidence_side_quest
story["burden_of_knowledge"]["quest"] = allies_quest
story["seeking_allies"]["quest"] = allies_quest
story["doubt_and_rejection"]["side_quest"] = unexpected_ally_side_quest
story["unexpected_ally"]["side_quest"] = unexpected_ally_side_quest
story["solidifying_the_partnership"]["side_quest"] = unexpected_ally_side_quest
story["curiosity_piqued"]["quest"] = hidden_secrets_side_quest
story["unexpected_allies"]["side_quest"] = hidden_secrets_side_quest
story["realizing_common_goals"]["side_quest"] = hidden_secrets_side_quest
story["first_shared_adventure"]["quest"] = journey_to_shrine_side_quest
story["revelation_of_eris_past"]["side_quest"] = journey_to_shrine_side_quest


REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\save_load.py  
import os
import json
from .game import Player, Item

class SaveLoad:
    @staticmethod
    def save_game(player, save_file='save.json'):
        """
        Save the game state to a file.
        """
        try:
            save_dir = os.path.dirname(save_file)
            if save_dir and not os.path.exists(save_dir):
                os.makedirs(save_dir)
            with open(save_file, 'w') as f:
                game_state = {
                    'player': {
                        'name': player.name,
                        'health': player.health,
                        'inventory': [item.__dict__ for item in player.inventory],
                    },
                    # Add other game state data as needed
                }
                json.dump(game_state, f)
        except Exception as e:
            print(f"Error while saving the game: {e}")

    @staticmethod
    def load_game(save_file='save.json'):
        """
        Load the game state from a file.
        """
        if not os.path.exists(save_file):
            print(f"No save file found at {save_file}")
            return None
        try:
            with open(save_file, 'r') as f:
                saved_data = json.load(f)
                player_data = saved_data.get('player')
                if player_data:
                    player = Player(
                        name=player_data.get('name'),
                        health=player_data.get('health'),
                        inventory=[Item(**item_data) for item_data in player_data.get('inventory')],
                    )
                    # Add other game state loading as needed
                    return player
                else:
                    print("Invalid save file format: Missing player data")
                    return None
        except Exception as e:
            print(f"Error while loading the game: {e}")
            return None
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\scene.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\story.py  
#story.py
'''
class Story:
    def __init__(self, name, description):
        self.name = name
        self.description = description

story = {
    "start": Story("Start", "In the royal city of Lumina, renowned for its vibrant culture and ancient history, our protagonist Caelum, an erudite scholar, comes across an enigmatic tome that hints at a lost civilization. His journey to unravel this mystery commences, unknowingly drawing the attention of the nefarious Lord Vexis."),
    "decision_to_learn": Story("Decision to Learn", "Deciding that the knowledge in the tome is too crucial to be left unearthed, Caelum dedicates himself to deciphering the ancient text, realizing this could be a turning point in his life."),
    "first_barrier": Story("First Barrier", "Caelum faces his first obstacle when he finds a portion of the tome encrypted in an arcane script. He must unearth the lost art of deciphering this ancient language."),
    "learning_the_language": Story("Learning the Language", "After weeks of study and cross-referencing ancient texts, Caelum manages to gain a basic understanding of the lost language, making it possible to slowly decrypt the tome."),
    "first_insight": Story("First Insight", "The first decrypted passages reveal knowledge far beyond Lumina's current understanding of magic and technology. This fuels Caelum's curiosity even further."),
    "evidence_of_threat": Story("Evidence of Threat", "While diving deeper into the translated text, Caelum stumbles upon a prophetic warning about a great darkness that once threatened the lost civilization. It bears unsettling similarities to Lord Vexis’s ambitions."),
    "burden_of_knowledge": Story("Burden of Knowledge", "Understanding the magnitude of the threat, Caelum feels the weight of responsibility. His quest is no longer just about curiosity but about protecting Lumina from a potentially devastating fate."),
    "seeking_allies": Story("Seeking Allies", "Knowing the enormity of his task, Caelum realizes he needs allies. He decides to share his discoveries with trusted scholars and influencers within Lumina."),
    "doubt_and_rejection": Story("Doubt and Rejection", "To his disappointment, Caelum's warnings are met with skepticism and disbelief from many. Some even accuse him of fearmongering and alarmism."),
    "unexpected_ally": Story("Unexpected Ally", "Just when Caelum is losing hope, Eris, who has overheard his attempts to convince others, approaches him. She believes in his cause and offers her help."),
    "solidifying_the_partnership": Story("Solidifying the Partnership", "Eris and Caelum form a pact to explore the secrets of the lost civilization together and stand against the darkness that looms over Lumina."),
    "curiosity_piqued": Story("Curiosity Piqued", "Caelum delves into the esoteric texts and discovers tantalizing hints of powerful magic and advanced knowledge possessed by the lost civilization. His desire to learn more solidifies his resolve to pursue this quest."),
    "hidden_secrets": Story("Hidden Secrets", "While deciphering the tome, Caelum discovers the existence of hidden chambers within the Royal Library. After a relentless search, they unearth a room filled with scrolls that disclose the lost civilization’s secrets. This revelation strengthens their resolve and enhances their abilities."),
    "understanding_the_secrets": Story("Understanding the Secrets", "The group dedicates days to studying the scrolls, gaining insights into the lost civilization's technology, magic, culture, and the catastrophe that led to their downfall."),
    "first_application_of_new_knowledge": Story("First Application of New Knowledge", "Using the newfound knowledge, Caelum and Eris experiment with ancient spells and devices, boosting their capabilities and defenses."),
    "gin's_disturbing_dream": Story("Gin's Disturbing Dream", "While the group is engrossed in their research, Gin has a vivid, disturbing dream that hints at a hidden shrine and an imminent transformation."),
    "interpreting_the_dream": Story("Interpreting the Dream", "Caelum and Eris, drawing upon their knowledge from the scrolls, decipher Gin's dream. They realize it's directing them to a shrine linked to the lost civilization."),
    "journey_to_the_shrine": Story("Journey to the Shrine", "Leaving the library, they embark on a quest to find the hidden shrine. Their journey is fraught with danger and obstacles, testing their strength and resolve."),
    "discovery_of_the_shrine": Story("Discovery of the Shrine", "After a grueling journey, they locate the shrine nestled deep in an ancient forest. Its imposing architecture and arcane energy affirm the insights from Gin's dream."),
    "gin's_transformation_begins": Story("Gin's Transformation Begins", "As Gin steps into the shrine, he's enveloped in a radiant light. His body undergoes a shocking transformation as he morphs into a majestic phoenix."),
    "group's_reaction_and_acceptance": Story("Group's Reaction and Acceptance", "While initially shocked, the group quickly adapts to the unexpected change. They see the transformed Gin not as a monstrous beast, but as a powerful protector and guide."),
    "gin's_new_abilities": Story("Gin's New Abilities", "In his phoenix form, Gin gains enhanced abilities. His prophetic dreams become clearer, and he can now manipulate fire and fly. These skills add a new dynamic to the group and their quest."),
    "vexis_revealed": Story("Vexis Revealed", "With their growing knowledge, Caelum and Eris uncover the true extent of Lord Vexis's ambitions. His pursuit of power, they realize, threatens to shroud Lumina in darkness."),
    "understanding_vexis_plan": Story("Understanding Vexis's Plan", "They decipher that Vexis intends to harness the lost civilization's technology to seize control of Lumina and extend his dominion."),
    "preparation_to_confront_vexis": Story("Preparation to Confront Vexis", "Recognizing the impending danger, the group decides to confront Lord Vexis. They begin preparing for the inevitable showdown, fortifying their defenses and planning their strategy."),
    "gin_predicts_vexis_next_move": Story("Gin Predicts Vexis's Next Move", "In a prophetic dream, Gin sees Vexis making a move to seize an ancient artifact of immense power. The group decides to intercept him and claim the artifact first."),
    "race_against_time": Story("Race Against Time", "The group embarks on a desperate race against time to locate and secure the artifact before Vexis does."),
    "unexpected_setback": Story("Unexpected Setback", "Their journey is hindered by a horde of Vexis’s minions. The group is forced to engage them, delaying their quest."),
    "retrieving_the_artifact": Story("Retrieving the Artifact", "After a grueling battle, the group finally reaches the artifact's location. Using their knowledge of the ancient civilization, they manage to secure it."),
    "vexis_confrontation": Story("Vexis Confrontation", "With the artifact in their possession, the group is ready to confront Vexis. They reach his stronghold, prepared for the inevitable battle."),
    "vexis_battle": Story("Vexis Battle", "The group engages in a fierce battle with Vexis. The fight tests their limits, but they manage to hold their ground, refusing to surrender."),
    "vexis_past": Story("Vexis's Past", "Further research reveals shocking information about Vexis's past, his connections to the lost civilization, and the personal motivations behind his nefarious ambitions."),
    "confirming_vexis_plan": Story("Confirming Vexis's Plan", "Caelum and Eris manage to infiltrate a secret meeting of Vexis's lieutenants, confirming their suspicions and understanding the immediacy of the threat."),
    "gin's_prophetic_dream": Story("Gin's Prophetic Dream", "While the duo deciphers Vexis's plan, Gin has a prophetic dream foretelling an impending attack on their faction and a deadly challenge he must face."),
    "decoding_gin's_dream": Story("Decoding Gin's Dream", "With their enriched understanding of the arcane, Caelum and Eris interpret Gin's dream. They realize that while their faction is at risk, Gin must also confront a colossal dragon."),
    "weighing_the_options": Story("Weighing the Options", "Facing the double-edged sword of danger, they contemplate their options. Should they help their faction ward off Vexis's forces, or should they aid Gin in his potentially deadly challenge?"),
    "internal_struggles": Story("Internal Struggles", "Each member of the trio wrestles with this decision, torn between loyalty to their allies and the urge to protect one another. Their camaraderie is tested as they weigh the stakes."),
    "resolution_to_act": Story("Resolution to Act", "They eventually reach a difficult decision, realizing that their individual paths lie in the choices they make now. They resolve to act, aware of the consequences."),
    "before_the_storm": Story("Before the Storm", "As they prepare for the trials ahead, they spend a moment in silent camaraderie, strengthening their resolve and promising to endure whatever comes their way."),
    "revelations_and_choices": Story("Revelations and Choices", "The trio learns of an impending attack on their faction by Vexis's forces. Simultaneously, Gin, in his phoenix form, is challenged by a colossal dragon, endangering his life. They face a difficult choice, deciding where their aid is needed most."),
    "final_preparation": Story("Final Preparation", "Having made their difficult decision, they engage in a fierce battle, either protecting their faction or saving Gin. Regardless of the outcome, they use the experience, strength, and knowledge they've gained to prepare for the imminent confrontation with Lord Vexis."),
    "repercussions_of_choice": Story("Repercussions of Choice", "The aftermath of their choice leaves an indelible impact, leading to joy, despair, or a bittersweet combination of both. But, it reinforces their determination to thwart Vexis's plans."),
    "gathering_allies": Story("Gathering Allies", "Recognizing the magnitude of their final battle, they rally their allies, forging a united front against Vexis. They make strategic plans, ensuring each ally's strengths are used to their full potential."),
    "strengthening_bonds": Story("Strengthening Bonds", "During the preparation, the group grows closer, strengthening their bonds and forging unbreakable friendships. They draw strength from one another, knowing they can rely on their comrades in the coming fight."),
    "calm_before_the_storm": Story("Calm Before the Storm", "In a brief respite before the final battle, the group finds solace in each other's company. They reflect on their journey, share stories, and brace themselves for what lies ahead."),
    "final_confrontation_with_vexis": Story("Final Confrontation with Vexis", "The time has come to face Lord Vexis. The group, armed with knowledge, allies, and unwavering determination, storms his stronghold, ready to put an end to his reign of darkness."),
    "climactic_battle": Story("Climactic Battle", "The battle between the group and Vexis reaches its climax. Each member fights with everything they have, using their unique abilities and working together to overcome Vexis's powerful magic and minions."),
    "victory_and_revelation": Story("Victory and Revelation", "After a grueling battle, the group emerges victorious, defeating Lord Vexis. In the aftermath, they uncover shocking revelations about Vexis's true identity and the origins of the lost civilization."),
    "rebuilding_and_recovery": Story("Rebuilding and Recovery", "With Vexis defeated, Lumina begins the process of rebuilding and recovery. The group plays a pivotal role in restoring balance, using their knowledge to advance the city's magic and technology."),
    "legacy_of_the_lost_civilization": Story("Legacy of the Lost Civilization", "The group ensures that the knowledge and artifacts of the lost civilization are preserved, recognizing their historical and cultural significance. They establish an institute dedicated to the study and protection of this legacy."),
    "reflection_and_new_beginnings": Story("Reflection and New Beginnings", "As the dust settles, the group takes a moment to reflect on their incredible journey and the personal growth they've experienced. They part ways for a while, but their bond remains unbreakable, and they eagerly anticipate new adventures on the horizon.")
}
'''
story = {
    "start": {
        "name": "Start",
        "description": "In the royal city of Lumina, renowned for its vibrant culture and ancient history, our protagonist Caelum, an erudite scholar, comes across an enigmatic tome that hints at a lost civilization. His journey to unravel this mystery commences, unknowingly drawing the attention of the nefarious Lord Vexis."
    },
    "decision_to_learn": {
        "name": "Decision to Learn",
        "description": "Deciding that the knowledge in the tome is too crucial to be left unearthed, Caelum dedicates himself to deciphering the ancient text, realizing this could be a turning point in his life."
    },
    "first_barrier": {
        "name": "First Barrier",
        "description": "Caelum faces his first obstacle when he finds a portion of the tome encrypted in an arcane script. He must unearth the lost art of deciphering this ancient language."
    },
    "learning_the_language": {
        "name": "Learning the Language",
        "description": "After weeks of study and cross-referencing ancient texts, Caelum manages to gain a basic understanding of the lost language, making it possible to slowly decrypt the tome."
    },
    "first_insight": {
        "name": "First Insight",
        "description": "The first decrypted passages reveal knowledge far beyond Lumina's current understanding of magic and technology. This fuels Caelum's curiosity even further."
    },
    "evidence_of_threat": {
        "name": "Evidence of Threat",
        "description": "While diving deeper into the translated text, Caelum stumbles upon a prophetic warning about a great darkness that once threatened the lost civilization. It bears unsettling similarities to Lord Vexis’s ambitions."
    },
    "burden_of_knowledge": {
        "name": "Burden of Knowledge",
        "description": "Understanding the magnitude of the threat, Caelum feels the weight of responsibility. His quest is no longer just about curiosity but about protecting Lumina from a potentially devastating fate."
    },
    "seeking_allies": {
        "name": "Seeking Allies",
        "description": "Knowing the enormity of his task, Caelum realizes he needs allies. He decides to share his discoveries with trusted scholars and influencers within Lumina."
    },
    "doubt_and_rejection": {
        "name": "Doubt and Rejection",
        "description": "To his disappointment, Caelum's warnings are met with skepticism and disbelief from many. Some even accuse him of fearmongering and alarmism."
    },
    "unexpected_ally": {
        "name": "Unexpected Ally",
        "description": "Just when Caelum is losing hope, Eris, who has overheard his attempts to convince others, approaches him. She believes in his cause and offers her help."
    },
    "solidifying_the_partnership": {
        "name": "Solidifying the Partnership",
        "description": "Eris and Caelum form a pact to explore the secrets of the lost civilization together and stand against the darkness that looms over Lumina."
    },
    "curiosity_piqued": {
        "name": "Curiosity Piqued",
        "description": "Caelum delves into the esoteric texts and discovers tantalizing hints of powerful magic and advanced knowledge possessed by the lost civilization. His desire to learn more solidifies his resolve to pursue this quest."
    },
    "unexpected_allies": {
        "name": "Unexpected Allies",
        "description": "While researching, Caelum encounters Eris, a warrior-mage with an enigmatic past. Her interests align with his, and she offers her aid. Their partnership is formed, each complimenting the other's skills."
    },
    "realizing_common_goals": {
        "name": "Realizing Common Goals",
        "description": "As Caelum and Eris spend more time together, they find common ground in their ambitions and dreams. Their bond strengthens as they commit to aiding each other in their respective quests."
    },
    "first_shared_adventure": {
        "name": "First Shared Adventure",
        "description": "The duo embarks on their first adventure together to retrieve a lost artifact, said to be tied to the ancient civilization. Through their trials and tribulations, they learn to trust and rely on each other."
    },
    "revelation_of_eris_past": {
        "name": "Revelation of Eris' Past",
        "description": "In an emotional moment, Eris shares her past with Caelum. She reveals that she's the last of her kind, a survivor of a forgotten tribe related to the lost civilization. Her personal connection to their quest cements their partnership."
    },
    "eris_teaches_caelum": {
        "name": "Eris Teaches Caelum",
        "description": "Eris begins to teach Caelum martial arts and basic spellcraft, augmenting his scholarly knowledge with practical skills. This not only broadens Caelum's capabilities but also deepens their trust and understanding."
    },
    "first_encounter_with_vexis_forces": {
        "name": "First Encounter with Vexis's Forces",
        "description": "Caelum and Eris face their first encounter with Vexis's minions. They manage to escape but realize that they are being hunted, raising the stakes of their quest."
    },
    "realization_of_their_limitations": {
        "name": "Realization of Their Limitations",
        "description": "Following their narrow escape, Caelum and Eris realize they are ill-prepared to face the dangers ahead alone. They acknowledge the need for allies."
    },
    "research_on_potential_allies": {
        "name": "Research on Potential Allies",
        "description": "They delve into researching potential allies. Two names consistently emerge: the Arcane Circle, a secretive society focused on preserving ancient knowledge, and the Royal Guard, the determined protectors of Lumina."
    },
    "investigation_and_deliberation": {
        "name": "Investigation and Deliberation",
        "description": "Caelum and Eris spend days investigating these factions, weighing the benefits and drawbacks of each. They consider their values, resources, and potential risks involved."
    },
    "resolution_to_join": {
        "name": "Resolution to Join",
        "description": "After much deliberation, they decide it's time to align themselves with one of the factions. They prepare to approach their chosen faction, fully aware that this decision will drastically shape their journey."
    },
    "join_faction": {
        "name": "Joining a Faction",
        "description": "Soon, they are faced with a choice: should they join the Arcane Circle, a clandestine society focused on safeguarding ancient knowledge, or ally with the Royal Guard, stalwart protectors of Lumina? The decision would shape their journey and future alliances."
    },
    "first_conflict": {
        "name": "First Conflict",
        "description": "The duo finds themselves targeted by Lord Vexis’s minions, who aim to hinder their progress. Supported by their chosen faction, Caelum and Eris defend themselves, marking their first battle against Lord Vexis's forces."
    },
    "aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "The first conflict leaves its mark on the group, both physically and emotionally. It's a harsh reminder of the dangers they face but also strengthens their resolve."
    },
    "strengthening_alliances": {
        "name": "Strengthening Alliances",
        "description": "Recognizing the scale of their opposition, Caelum and Eris focus on strengthening their alliances. They undertake missions to help their chosen faction, earning their trust and support."
    },
    "discovery_of_gin": {
        "name": "Discovery of Gin",
        "description": "On one such mission, they come across Gin, a simple farmer with strange, prophetic dreams. Intrigued by his visions, they decide to investigate further."
    },
    "gin_reveals_dreams": {
        "name": "Gin Reveals Dreams",
        "description": "Gin hesitantly shares his dreams, which cryptically hint at looming threats and the path they should take. Caelum and Eris realize the significance of these visions in their quest."
    },
    "confirmation_of_gin's_abilities": {
        "name": "Confirmation of Gin's Abilities",
        "description": "To confirm Gin's abilities, they cautiously act on information from his dreams. When his predictions come true, they understand his immense potential."
    },
    "welcoming_gin": {
        "name": "Welcoming Gin",
        "description": "Convinced of Gin's unique ability, Caelum and Eris offer him a place in their group. They promise to keep him safe and help understand his abilities better."
    },
    "gin's_doubts_and_fears": {
        "name": "Gin's Doubts and Fears",
        "description": "Initially, Gin is overwhelmed by the sudden change and the weight of his abilities. He grapples with fear and doubt, uncertain of his place in this grand quest."
    },
    "assuaging_gin's_fears": {
        "name": "Assuaging Gin's Fears",
        "description": "Seeing his struggle, Caelum and Eris comfort Gin. They assure him that his gift is not a burden but a beacon of hope. They pledge to stand by him, no matter what."
    },
    "gin_accepts": {
        "name": "Gin Accepts",
        "description": "Strengthened by their support, Gin agrees to join their group. He begins to view his gift as a means to contribute to a cause larger than himself."
    },
    "meet_gin": {
        "name": "Meet Gin",
        "description": "During their adventures, they meet Gin, a humble dreamer with the uncanny ability to receive prophetic dreams. Sensing his potential, they welcome him to their group, unaware of the critical role he would play."
    },
    "hidden_secrets": {
        "name": "Hidden Secrets",
        "description": "While deciphering the tome, Caelum discovers the existence of hidden chambers within the Royal Library. After a relentless search, they unearth a room filled with scrolls that disclose the lost civilization’s secrets. This revelation strengthens their resolve and enhances their abilities."
    },
    "understanding_the_secrets": {
        "name": "Understanding the Secrets",
        "description": "The group dedicates days to studying the scrolls, gaining insights into the lost civilization's technology, magic, culture, and the catastrophe that led to their downfall."
    },
    "first_application_of_new_knowledge": {
        "name": "First Application of New Knowledge",
        "description": "Using the newfound knowledge, Caelum and Eris experiment with ancient spells and devices, boosting their capabilities and defenses."
    },
    "gin's_disturbing_dream": {
        "name": "Gin's Disturbing Dream",
        "description": "While the group is engrossed in their research, Gin has a vivid, disturbing dream that hints at a hidden shrine and an imminent transformation."
    },
    "interpreting_the_dream": {
        "name": "Interpreting the Dream",
        "description": "Caelum and Eris, drawing upon their knowledge from the scrolls, decipher Gin's dream. They realize it's directing them to a shrine linked to the lost civilization."
    },
    "journey_to_the_shrine": {
        "name": "Journey to the Shrine",
        "description": "Leaving the library, they embark on a quest to find the hidden shrine. Their journey is fraught with danger and obstacles, testing their strength and resolve."
    },
    "discovery_of_the_shrine": {
        "name": "Discovery of the Shrine",
        "description": "After a grueling journey, they locate the shrine nestled deep in an ancient forest. Its imposing architecture and arcane energy affirm the insights from Gin's dream."
    },
    "gin's_transformation_begins": {
        "name": "Gin's Transformation Begins",
        "description": "As Gin steps into the shrine, he's enveloped in a radiant light. His body undergoes a shocking transformation as he morphs into a majestic phoenix."
    },
    "group's_reaction_and_acceptance": {
        "name": "Group's Reaction and Acceptance",
        "description": "While initially shocked, the group quickly adapts to the unexpected change. They see the transformed Gin not as a monstrous beast, but as a powerful protector and guide."
    },
    "gin's_new_abilities": {
        "name": "Gin's New Abilities",
        "description": "In his phoenix form, Gin gains enhanced abilities. His prophetic dreams become clearer, and he can now manipulate fire and fly. These skills add a new dynamic to the group and their quest."
    },
    "legendary_transformation": {
        "name": "Legendary Transformation",
        "description": "Following a particular prophetic dream, Gin leads the group to a hidden shrine where he undergoes an unexpected transformation. He morphs into a majestic phoenix, serving as a protector and guide, proving pivotal to their quest."
    },
    "vexis_revealed": {
        "name": "Vexis Revealed",
        "description": "With their growing knowledge, Caelum and Eris uncover the true extent of Lord Vexis's ambitions. His pursuit of power, they realize, threatens to shroud Lumina in darkness."
    },
    "understanding_vexis_plan": {
        "name": "Understanding Vexis's Plan",
        "description": "They decipher that Vexis intends to harness the lost civilization's technology to seize control of Lumina and extend his dominion."
    },
    "preparation_to_confront_vexis": {
        "name": "Preparation to Confront Vexis",
        "description": "Recognizing the impending danger, the group decides to confront Lord Vexis. They begin preparing for the inevitable showdown, fortifying their defenses and planning their strategy."
    },
    "gin_predicts_vexis_next_move": {
        "name": "Gin Predicts Vexis's Next Move",
        "description": "In a prophetic dream, Gin sees Vexis making a move to seize an ancient artifact of immense power. The group decides to intercept him and claim the artifact first."
    },
    "race_against_time": {
        "name": "Race Against Time",
        "description": "The group embarks on a desperate race against time to locate and secure the artifact before Vexis does."
    },
    "unexpected_setback": {
        "name": "Unexpected Setback",
        "description": "Their journey is hindered by a horde of Vexis’s minions. The group is forced to engage them, delaying their quest."
    },
    "retrieving_the_artifact": {
        "name": "Retrieving the Artifact",
        "description": "After a grueling battle, the group finally reaches the artifact's location. Using their knowledge of the ancient civilization, they manage to secure it."
    },
    "vexis_confrontation": {
        "name": "Vexis Confrontation",
        "description": "With the artifact in their possession, the group is ready to confront Vexis. They reach his stronghold, prepared for the inevitable battle."
    },
    "vexis_battle": {
        "name": "Vexis Battle",
        "description": "The group engages in a fierce battle with Vexis. The fight tests their limits, but they manage to hold their ground, refusing to surrender."
    },
    "vexis_past": {
        "name": "Vexis's Past",
        "description": "Further research reveals shocking information about Vexis's past, his connections to the lost civilization, and the personal motivations behind his nefarious ambitions."
    },
    "confirming_vexis_plan": {
        "name": "Confirming Vexis's Plan",
        "description": "Caelum and Eris manage to infiltrate a secret meeting of Vexis's lieutenants, confirming their suspicions and understanding the immediacy of the threat."
    },
    "gin's_prophetic_dream": {
        "name": "Gin's Prophetic Dream",
        "description": "While the duo deciphers Vexis's plan, Gin has a prophetic dream foretelling an impending attack on their faction and a deadly challenge he must face."
    },
    "decoding_gin's_dream": {
        "name": "Decoding Gin's Dream",
        "description": "With their enriched understanding of the arcane, Caelum and Eris interpret Gin's dream. They realize that while their faction is at risk, Gin must also confront a colossal dragon."
    },
    "weighing_the_options": {
        "name": "Weighing the Options",
        "description": "Facing the double-edged sword of danger, they contemplate their options. Should they help their faction ward off Vexis's forces, or should they aid Gin in his potentially deadly challenge?"
    },
    "internal_struggles": {
        "name": "Internal Struggles",
        "description": "Each member of the trio wrestles with this decision, torn between loyalty to their allies and the urge to protect one another. Their camaraderie is tested as they weigh the stakes."
    },
    "resolution_to_act": {
        "name": "Resolution to Act",
        "description": "They eventually reach a difficult decision, realizing that their individual paths lie in the choices they make now. They resolve to act, aware of the consequences."
    },
    "before_the_storm": {
        "name": "Before the Storm",
        "description": "As they prepare for the trials ahead, they spend a moment in silent camaraderie, strengthening their resolve and promising to endure whatever comes their way."
    },
    "revelations_and_choices": {
        "name": "Revelations and Choices",
        "description": "The trio learns of an impending attack on their faction by Vexis's forces. Simultaneously, Gin, in his phoenix form, is challenged by a colossal dragon, endangering his life. They face a difficult choice, deciding where their aid is needed most."
    },
    "final_preparation": {
        "name": "Final Preparation",
        "description": "Having made their difficult decision, they engage in a fierce battle, either protecting their faction or saving Gin. Regardless of the outcome, they use the experience, strength, and knowledge they've gained to prepare for the imminent confrontation with Lord Vexis."
    },
    "repercussions_of_choice": {
        "name": "Repercussions of Choice",
        "description": "The aftermath of their choice leaves an indelible impact, leading to joy, despair, or a bittersweet combination of both. But, it reinforces their determination to thwart Vexis's plans."
    },
    "gathering_allies": {
        "name": "Gathering Allies",
        "description": "Recognizing the magnitude of their final battle, they rally their allies, forging a united front against Vexis. They make strategic plans, ensuring each ally's strengths are used to their full potential."
    },
    "strengthening_personal_abilities": {
        "name": "Strengthening Personal Abilities",
        "description": "Each member of the trio focuses on honing their abilities. Eris trains vigorously, Caelum delves into the arcane knowledge, and Gin learns to harness his phoenix powers more effectively."
    },
    "the_last_night": {
        "name": "The Last Night",
        "description": "The night before the final confrontation, they share stories, fears, and hopes around a campfire. Their camaraderie deepens, and they draw strength from their shared resolve."
    },
    "approaching_the_cursed_spire": {
        "name": "Approaching the Cursed Spire",
        "description": "They approach the Cursed Spire, the stage for their final battle. The imposing edifice emanates an oppressive aura, yet they press on, courage unwavering."
    },
    "battles_outside_the_spire": {
        "name": "Battles Outside the Spire",
        "description": "Before they can confront Vexis, they must overcome his formidable defenses. They, along with their allies, engage in intense battles, slowly progressing towards the spire's peak."
    },
    "ascension_to_the_peak": {
        "name": "Ascension to the Peak",
        "description": "With their allies holding the line, the trio ascends the spire. They confront and overcome numerous trials, their resolve tested at each step."
    },
    "vexis_confrontation_prep": {
        "name": "Vexis Confrontation Preparation",
        "description": "As they reach the peak, they steel themselves for the ultimate confrontation. They exchange a final glance of shared determination before stepping into the fray."
    },
    "final_battle": {
        "name": "Final Battle",
        "description": "Armed with the wisdom of the lost civilization, their unique abilities, and their unwavering resolve, Caelum, Eris, and Gin confront Lord Vexis in a climactic battle atop the Cursed Spire."
    },
    "battle_climax": {
        "name": "Battle Climax",
        "description": "The trio's combined efforts begin to overpower Vexis. The battle is intense, but their unity, trust, and shared resolve tip the balance in their favor."
    },
    "good_vexis_defeat": {
        "name": "Vexis's Defeat",
        "description": "With a final, concerted effort, they vanquish Vexis, his dark ambitions crumbling along with him. They stand victorious, the daunting spire resonating with their triumph."
    },
    "good_aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "In the wake of the battle, they help their allies regroup, healing the wounded and mourning the fallen. Their victory is bittersweet, marked with the relief of overcoming a great evil, but also the sorrow of their losses."
    },
    "good_return_to_lumina": {
        "name": "Return to Lumina",
        "description": "They return to Lumina as heroes. The city, once on the brink of despair, now radiates hope and gratitude. Their bravery and tenacity have saved the city and its citizens from Vexis's darkness."
    },
    "good_recognition_of_heroes": {
        "name": "Recognition of Heroes",
        "description": "Caelum, Eris, and Gin are celebrated as the saviors of Lumina. Their deeds become the stuff of legends, stories to inspire future generations."
    },
    "good_peaceful_respite": {
        "name": "Peaceful Respite",
        "description": "After the tumultuous events, they find a moment of peace. They reflect on their journey, understanding the depth of their transformation, and the bonds they've forged."
    },
    "good_glimpse_of_future": {
        "name": "Glimpse of the Future",
        "description": "As they watch Lumina rejoice, they know that their journey doesn't end here. There are still secrets to uncover, battles to fight, and a world to protect."
    },
    "good_end": {
        "name": "Good End",
        "description": "Congratulations! Our heroes have triumphed over Lord Vexis, liberating Lumina from his malicious intentions. Peace returns, and they are hailed as heroes. However, as they look upon the tranquil kingdom, they know that their journey is far from over..."
    },
    "bad_vexis_victory": {
        "name": "Vexis's Victory",
        "description": "Lord Vexis triumphs over the trio, seizing the ancient knowledge they had worked so hard to protect. His malicious laugh echoes across the spire as Lumina falls into his hands."
    },
    "bad_aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "They retreat, nursing their wounds and their bruised spirits. They mourn their defeat, but the flame of resistance still flickers within them."
    },
    "bad_occupied_lumina": {
        "name": "Occupied Lumina",
        "description": "Returning to Lumina, they find a city gripped by Vexis's power. Fear and despair taint the once-vibrant city, but in the hearts of its citizens, hope remains, kindled by the heroes' undying resolve."
    },
    "bad_underground_resistance": {
        "name": "Underground Resistance",
        "description": "Caelum, Eris, and Gin join the budding resistance, vowing to free Lumina from Vexis's iron grip. They operate in the shadows, carefully planning their next move."
    },
    "bad_sacrifices_made": {
        "name": "Sacrifices Made",
        "description": "The trio faces difficult choices, sacrifices made in the name of their cause. They lose allies and experience personal losses, fueling their determination to bring an end to Vexis's tyranny."
    },
    "bad_final_showdown": {
        "name": "Final Showdown",
        "description": "With the resistance rallying behind them, they confront Vexis in a final, desperate battle. The outcome hangs in the balance as they give their all, fighting for the freedom of Lumina."
    },
    "bad_vexis_defeated": {
        "name": "Vexis Defeated",
        "description": "Against all odds, they manage to defeat Vexis, shattering his reign of darkness. The city rejoices, liberated from his oppressive rule."
    },
    "bad_rebuilding_lumina": {
        "name": "Rebuilding Lumina",
        "description": "The trio and the remaining resistance members unite to rebuild Lumina. It's a daunting task, but their determination and the support of the citizens push them forward."
    },
    "bad_bittersweet_victory": {
        "name": "Bittersweet Victory",
        "description": "Although they have freed Lumina, the scars of the conflict run deep. They mourn the losses, but their triumph serves as a beacon of hope, a reminder that darkness can be overcome."
    },
    "bad_end": {
        "name": "Bad End",
        "description": "Oh no! Lord Vexis emerges victorious, plunging Lumina into darkness. However, a flicker of hope remains, as Caelum, Eris, and Gin join the underground resistance to fight against Vexis's tyranny. Their journey to liberate Lumina continues, against all odds..."
    }
}
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\view.py  
# view.py
import curses 

class GameView:
    def __init__(self, game, controller):
        self.game = game
        self.controller = controller

        # Initialize curses
        self.stdscr = curses.initscr()
        curses.cbreak()
        curses.noecho()
        self.stdscr.keypad(True)

    def cleanup(self):
        curses.nocbreak()
        self.stdscr.keypad(False)
        curses.echo()
        curses.endwin()

    def run(self):
        running = True
        while running:
            # Get the key pressed
            c = self.stdscr.getch()

            # Parse the key to a command
            command = self.controller.parse_input(c)
            if command is not None:
                self.stdscr.addstr(f"{command}\n")  # Display the command on the screen
                self.stdscr.refresh()

                # Run the command
                running = self.controller.run_command(command)

        self.cleanup()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\whiteboard.py  
from math import sin,cos,sqrt,atan2,pi
import pygame
pygame.init()

class Planet:
    dt = 1/100
    G = 6.67428e-11 #G constant
    scale = 1/(1409466.667) #1 m = 1/1409466.667 pixlar
    def __init__(self,x=0,y=0,radius=0,color=(0,0,0),mass=0,vx=0,vy=0):
        self.x = x #x-coordinate pygame-window
        self.y = y #y-coordinate pygame-window
        self.radius = radius
        self.color = color
        self.mass = mass
        self.vx = vx #velocity in the x axis
        self.vy = vy #velocity in the y axis
        
    def draw(self,screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)
    
    def orbit(self,trace):
        pygame.draw.rect(trace, self.color, (self.x, self.y, 2, 2))
        
    def update_vel(self,Fnx,Fny):
        ax = Fnx/self.mass #Calculates acceleration in x- and y-axis for body 1.
        ay = Fny/self.mass
        self.vx -= ((ax * Planet.dt)/Planet.scale)
        self.vy -= ((ay * Planet.dt)/Planet.scale)
        self.update_pos()
     
    def update_pos(self):
        self.x += ((self.vx * Planet.dt)) #changes position considering each body's velocity.
        self.y += ((self.vy * Planet.dt))
        
    def move(self,body):
        dx = (self.x - body.x) #Calculates difference in x- and y-axis between the bodies
        dy = (self.y - body.y)
        r = (sqrt((dy**2)+(dx**2))) #Calculates the distance between the bodies
        angle = atan2(dy, dx) #Calculates the angle between the bodies with atan2!
        if r < self.radius: #Checks if the distance between the bodies is less than the radius of the bodies. Uses then Gauss gravitational law to calculate force.
            F = 4/3 * pi * r
            Fx = cos(angle) * F
            Fy = sin(angle) * F
        else:  
            F = (Planet.G*self.mass*body.mass)/((r/Planet.scale)**2) #Newtons gravitational formula.
            Fx = cos(angle) * F
            Fy = sin(angle) * F
        return Fx,Fy

def motion():
    for i in range(0,len(bodies)):
        Fnx = 0 #net force
        Fny = 0
        for j in range(0,len(bodies)):
            if bodies[i] != bodies[j]:
                Fnx += (bodies[i].move(bodies[j]))[0]
                Fny += (bodies[i].move(bodies[j]))[1]
            elif bodies[i] == bodies[j]:
                continue
        bodies[i].update_vel(Fnx,Fny)
        bodies[i].draw(screen)
        bodies[i].orbit(trace)
        Fnx,Fny=0,0 

screen = pygame.display.set_mode([900,650]) #width - height
trace = pygame.Surface((900, 650))
pygame.display.set_caption("Moon simulation")
FPS = 60 #how quickly/frames per second our game should update. Change?

earth = Planet(450,325,30,(0,0,255),5.97219*10**(24),-24.947719394204714/2) #450= xpos,325=ypos,30=radius
luna = Planet(450,(575/11),10,(128,128,128),7.349*10**(22),1023)
moon = Planet() #the second moon
bodies = [earth,luna]

running = True
clock = pygame.time.Clock()

while running: #if user clicks close window
    clock.tick(FPS)    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    screen.fill((0,0,0))
    pygame.Surface.blit(screen, trace, (0, 0))
    motion()

    pygame.display.flip() #update? flip? 

pygame.quit()REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\description_generator.py  
import random
from faker import Faker
import spacy

faker = Faker()
nlp = spacy.load("en_core_web_sm")

def generate_description(entity, name):
    if entity == "Universe":
        return generate_universe_description()
    elif entity == "Planet":
        return generate_planet_description(name)
    elif entity == "Continent":
        return generate_continent_description(name)
    elif entity == "Country":
        return generate_country_description(name)
    elif entity == "Region":
        return generate_region_description(name)
    elif entity == "State":
        return generate_state_description(name)
    elif entity == "Province":
        return generate_province_description(name)
    elif entity == "City":
        return generate_city_description(name)
    elif entity == "Village":
        return generate_village_description(name)
    elif entity == "Town":
        return generate_town_description(name)
    elif entity == "Landmark":
        return generate_landmark_description(name)
    else:
        return ""

def generate_universe_description():
    return "A vast cosmos"

def generate_planet_description(name):
    return f"A mysterious and enchanting planet called {name} in the far reaches of the universe."

def generate_continent_description(name):
    return f"A continent named {name} rich in history and ancient ruins."

def generate_country_description(name):
    return f"A country known as {name} with its own unique characteristics and cultural heritage."

def generate_region_description(name):
    return f"A region called {name} where you can experience the beauty of nature and the local traditions."

def generate_state_description(name):
    return f"A state named {name} with its own distinct landscapes and connections to the environment."

def generate_province_description(name):
    return f"A province named {name} known for its notable features and contributions."

def generate_city_description(name):
    return f"A bustling city called {name} that offers a vibrant mix of cultures and opportunities."

def generate_village_description(name):
    return f"A peaceful village known as {name} where you can enjoy tranquility and the local community."

def generate_town_description(name):
    return f"A charming town named {name} that captures the essence of small-town life and hospitality."

def generate_landmark_description(name):
    doc = nlp(faker.text())
    sentences = [sent.text for sent in doc.sents]
    return f"A remarkable landmark called {name} that {random.choice(sentences)}"
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\location_classes.py  
from ..game import Location

class Container(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        self.locations = []

    def add_location(self, location):
        if self.validate_containment(location):
            self.locations.append(location)
        else:
            print(f"Error: Cannot place {type(location).__name__} within {type(self).__name__}.")

    def get_location(self, name):
        for location in self.locations:
            if location.name == name:
                return location
        return None

    def validate_containment(self, location):
        if hasattr(self, 'valid_locations'):
            return isinstance(location, self.valid_locations)
        else:
            return False

class Forest(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Swamp(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Ruin(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Field(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Ruins(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class City(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Village(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Town(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Landmark(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Universe(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Planet(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Continent(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Country(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Region(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class State(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Province(Container):

    def __init__(self, name, description):
        super().__init__(name, description)
        
class Island(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Ocean(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Mountain(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Desert(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Lake(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class River(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Building(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Castle(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Dungeon(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Room(Container):
    valid_locations = tuple() # To be filled after all location classes are defined
    # This is a special case, as it is the only location that cannot contain other locations        
    def __init__(self, name, description):
        super().__init__(name, description)

# Defining valid locations after all classes are defined
Universe.valid_locations = (Planet,)
Planet.valid_locations = (Continent, Ocean)
Ocean.valid_locations = (Continent, Island)
Continent.valid_locations = (Country, Region)
Island.valid_locations = (Country, Region, Forest, Desert, Field, Ruins, Mountain, Castle, Dungeon)
Country.valid_locations = (Region, State, Province, Desert, Mountain, Lake, River)
Region.valid_locations = (Country, State, Province, Desert, Mountain, Village, Landmark, Forest, Field, Ruins)
Mountain.valid_locations = (Village, Landmark, Forest, Ruins)
Lake.valid_locations = (Landmark, Ruins)
River.valid_locations = (Landmark, Ruins)
Desert.valid_locations = (Landmark, Ruins)
State.valid_locations = (City, Village, Town, Landmark, Forest, Field, Desert, Ruins)
Province.valid_locations = (City, Village, Town, Landmark, Forest, Field, Ruins)
City.valid_locations = (Landmark, Ruins, Building, Castle, Dungeon)
Castle.valid_locations = (Landmark, Ruins, Building, Dungeon, Room)
Village.valid_locations = (Landmark, Forest, Field, Ruins, Building)
Town.valid_locations = (Landmark, Forest, Field, Ruins, Building)
Forest.valid_locations = (Landmark, Ruins, River, Lake)
Field.valid_locations = (Landmark, Ruins, River, Lake)
Ruins.valid_locations = (Landmark, River, Lake, Dungeon)
Landmark.valid_locations = (Building, Dungeon)
Building.valid_locations = (Dungeon, Room)
Dungeon.valid_locations = (Room,)
Room.valid_locations = tuple()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\map_generator.py  
# map_generator.py

import random
import os.path
from location_description import *

class Map:
    def __init__(self, size=(100, 100)):
        self.size = size
        self.contents = []

    def generate(self):
        if os.path.exists('location_description.py'):
            self.generate_maps_from_description()
        else:
            self.generate_maps_organically()

    def generate_maps_from_description(self):
        # Read location_description.py and generate maps based on the data
        # ...

    def generate_maps_organically(self):
        # Generate maps organically from the bottom up
        maps = []
        for continent in continents:
            continent_map = self.generate_continent_map(continent)
            maps.append(continent_map)

        with open('maps.py', 'w') as f:
            f.write("from map_classes import Map\n\n")
            for i, map in enumerate(maps):
                f.write(f"map_{i+1} = Map({map.size})\n")
                f.write(f"map_{i+1}.contents = {map.contents}\n")

    def generate_continent_map(self, continent):
        # Generate the map for a continent
        continent_map = Map()
        # ...

        for country in continent.countries:
            country_map = self.generate_country_map(country)
            continent_map.contents.append(country_map)

        return continent_map

    def generate_country_map(self, country):
        # Generate the map for a country
        country_map = Map()
        # ...

        for city in country.cities:
            city_map = self.generate_city_map(city)
            country_map.contents.append(city_map)

        return country_map

    def generate_city_map(self, city):
        # Generate the map for a city
        city_map = Map()
        # ...

        for building in city.buildings:
            building_map = self.generate_building_map(building)
            city_map.contents.append(building_map)

        return city_map

    def generate_building_map(self, building):
        # Generate the map for a building
        building_map = Map()
        # ...

        return building_map

    def generate_castle_map(self, castle):
        # Generate the map for a castle
        castle_map = Map()
        # ...

        return castle_map

    def generate_dungeon_map(self, dungeon):
        # Generate the map for a dungeon
        dungeon_map = Map()
        # ...

        return dungeon_map


def generate_maps():
    map = Map()
    map.generate()
    return map


if __name__ == "__main__":
    generated_map = generate_maps()
    # Use the generated_map for the game
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\name_generator.py  
from faker import Faker
import random
import string

fake = Faker()

class NameGenerator:

    def __init__(self):
        self.vowels = ['a', 'e', 'i', 'o', 'u']
        self.consonants = [ch for ch in string.ascii_lowercase if ch not in self.vowels]

        self.prefixes = {
        'continent': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'country': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'state': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'mountain': ['Mount', 'Mt.', 'Pico', 'Massif'],
        'lake': ['Lake', 'Lago', 'Mar'],
        'sea': ['Mar'],
        'castle': ['Castle', 'Chateau', 'Schloss', 'Burg', 'Fort'],
        'general': ['The', 'Grand', 'Old', 'New']
    }
        self.suffixes = {
        'continent': ['major', 'minor'],    
        'mountain': ['Peak', 'Ridge', 'Pass', 'Summit', 'Crest', 'Top', 'Point'],
        'river': ['River', 'Stream', 'Creek', 'Brook', 'Riviera', 'Fjord'],
        'forest': ['Woods', 'Forest', 'Groves', 'Thicket', 'Copse', 'Stand'],
        'swamp': ['Swamp', 'Marsh', 'Bog', 'Fen', 'Mire', 'Wetlands'],
        'desert': ['Desert', 'Wastes', 'Expanse', 'Sands', 'Dunes'],
        'island': ['Island', 'Isle', 'Isle of', 'Archipelago', 'Cay', 'Atoll'],
        'ocean': ['Ocean', 'Sea', 'Bay', 'Gulf', 'Harbor', 'Strait', 'Channel'],
        'building': ['Building', 'Tower', 'Hall', 'Palace', 'Manor', 'Mansion', 'Fortress'],
        'city': ['City', 'Metropolis', 'Capital', 'Haven', 'ville', 'burg'],
        'province': ['Province', 'County', 'Region', 'Territory', 'Shire'],
        'state': ['State', 'Commonwealth', 'Republic'],
        'village': ['Village', 'Hamlet', 'Settlement'],
        'town': ['Town', 'Borough', 'Township', 'ton'],
        'landmark': ['Monument', 'Memorial', 'Statue', 'Obelisk', 'Pillar', 'Column'],
        'dungeon': ['Dungeon', 'Crypt', 'Vault', 'Labyrinth', 'Catacombs', 'Cavern', 'Caverns', 'Den'],
        'castle': ['Castle', 'Fort', 'Keep', 'Tower', 'Palace', 'Spire', 'Stronghold', 'Citadel', 'Bastion', 'Burg', 'Chateau', 'Schloss'],
    }
        self.characteristics = {
        'general': ['Broad', 'Tall', 'Grand', 'Majestic', 'Mighty', 'Ancient', 'Brilliant', 'Colossal', 'Dazzling', 'Enormous', 'Gigantic', 'Golden', 'Haunting', 'Immense', 'Jagged', 'Lush', 'Mystical', 'Narrow', 'Ominous', 'Pristine', 'Quaint', 'Radiant', 'Secluded', 'Turquoise', 'Unspoiled', 'Vibrant', 'Winding', 'Xenophilic', 'Yielding', 'Zenithal']
    }

        self.first_names = [name for name in dir(Faker()) if "first_name" in name]
        
    def generate_syllable(self):
        syllable = random.choice(self.consonants) + random.choice(self.vowels)
        if random.choice([True, False]):  # With 50% chance add a trailing consonant
            syllable += random.choice(self.consonants)
        return syllable

    def generate_fantasy_name(self, syllable_count=2):
        name = ''.join(self.generate_syllable() for _ in range(syllable_count))
        return name.capitalize()

    def generate_single_word_name(self):
        return fake.word().capitalize()

    def generate_two_part_name(self):
        characteristic = random.choice(self.characteristics)
        name = fake.word().capitalize()
        return f"{characteristic} {name}"

    def generate_possessive_name(self):
        first_name_func = random.choice(self.first_names)
        first_name = getattr(fake, first_name_func)().capitalize()
        suffix = random.choice(self.suffixes)
        return f"{first_name}'s {suffix}"

    def generate_non_english_name(self):
        return fake.words(nb=1, ext_word_list=None, unique=False)[0].capitalize()

    def generate_prefixed_name(self):
        prefix = random.choice(self.prefixes)
        name = fake.word().capitalize()
        return f"{prefix} {name}"

def generate_continent_name(self):
    # select a random method for name generation
    generator = random.choice([self.generate_single_word_name,
                               self.generate_two_part_name,
                               self.generate_possessive_name,
                               self.generate_non_english_name,
                               self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['continent'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['continent'])
        name = f"{name} {suffix}"

    
def generate_mountain_name(self):
    # select a random method for name generation
    generator = random.choice([self.generate_single_word_name,
                               self.generate_two_part_name,
                               self.generate_possessive_name,
                               self.generate_non_english_name,
                               self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['mountain'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['mountain'])
        name = f"{name} {suffix}"

    return name

def generate_river_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['river'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['river'])
        name = f"{name} {suffix}"

    return name

def generate_state_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['state'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['state'])
        name = f"{name} {suffix}"

    return name

def generate_forest_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['forest'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['forest'])
        name = f"{name} {suffix}"

    return name

def generate_country_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['country'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['country'])
        name = f"{name} {suffix}"

    return name

def generate_swamp_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['swamp'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['swamp'])
        name = f"{name} {suffix}"

    return name

def generate_desert_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['desert'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['desert'])
        name = f"{name} {suffix}"

    return name

def generate_lake_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['lake'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['lake'])
        name = f"{name} {suffix}"

    return name

def generate_island_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['island'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['island'])
        name = f"{name} {suffix}"

    return name

def generate_ocean_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['ocean'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['ocean'])
        name = f"{name} {suffix}"

    return name


    
def generate_building_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['building'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['building'])
        name = f"{name} {suffix}"

    return name


    
def generate_city_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['city'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['city'])
        name = f"{name} {suffix}"

    return name

def generate_province_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['province'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['province'])
        name = f"{name} {suffix}"

    return name

def generate_landmark_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['landmark'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['landmark'])
        name = f"{name} {suffix}"

    return name

def generate_castle_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['castle'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['castle'])
        name = f"{name} {suffix}"

    return name


    
def generate_dungeon_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['dungeon'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['dungeon'])
        name = f"{name} {suffix}"

    return name



name_generator = NameGenerator()
for i in range(10):
    print(name_generator.generate_mountain_name())


    def generate_river_name(self):
        return "The " + self.generate_fantasy_name() + " River"

    def generate_continent_name(self):
        return self.generate_fantasy_name()

    def generate_forest_name(self):
        return self.generate_fantasy_name() + " Woods"

    def generate_country_name(self):
        return self.generate_fantasy_name()

    def generate_Swamp_name(self):
        return self.generate_fantasy_name() + " Swamp"

    def generate_desert_name(self):
        return self.generate_fantasy_name() + " Desert"

    def generate_lake_name(self):
        return "Lake " + self.generate_fantasy_name()

    def generate_island_name(self):
        return self.generate_fantasy_name() + " Island"

    def generate_ocean_name(self):
        return "The " + self.generate_fantasy_name() + " Ocean"

    def generate_building_name(self):
        return self.generate_fantasy_name() + " Building"

    def generate_city_name(self):
        return self.generate_fantasy_name() + " City"

    def generate_province_name(self):
        return self.generate_fantasy_name() + " Province"

    def generate_landmark_name(self):
        return "The " + self.generate_fantasy_name() + " Monument"

    def generate_castle_name(self):
        return "Castle " + self.generate_fantasy_name()

    def generate_dungeon_name(self):
        return "The " + self.generate_fantasy_name() + " Dungeon"

    def generate_name(self, name_type):
        if name_type == "fantasy":
            return self.generate_fantasy_name()
        elif name_type == "continent":
            return self.generate_continent_name()
        elif name_type == "country":
            return self.generate_country_name()
        elif name_type == "swamp":
            return self.generate_swamp_name()
        elif name_type == "state":
            return self.generate_state_name()
        elif name_type == "mountain":
            return self.generate_mountain_name()
        elif name_type == "river":
            return self.generate_river_name()
        elif name_type == "forest":
            return self.generate_forest_name()
        elif name_type == "desert":
            return self.generate_desert_name()
        elif name_type == "lake":
            return self.generate_lake_name()
        elif name_type == "island":
            return self.generate_island_name()
        elif name_type == "ocean":
            return self.generate_ocean_name()
        elif name_type == "building":
            return self.generate_building_name()
        elif name_type == "city":
            return self.generate_city_name()
        elif name_type == "province":
            return self.generate_province_name()
        elif name_type == "landmark":
            return self.generate_landmark_name()
        elif name_type == "castle":
            return self.generate_castle_name()
        elif name_type == "dungeon":
            return self.generate_dungeon_name()
        else:
            return fake.first_name()

name_generator = NameGenerator()
print(name_generator.generate_name("continent"))  # Generates a continent name
print(name_generator.generate_name("country"))  # Generates a country name
print(name_generator.generate_name("swamp"))  # Generates a swamp name
print(name_generator.generate_name("state"))  # Generates a state name
print(name_generator.generate_name("mountain"))  # Generates a mountain name
print(name_generator.generate_name("river"))  # Generates a river name
print(name_generator.generate_name("forest"))  # Generates a forest name
print(name_generator.generate_name("desert"))  # Generates a desert name
print(name_generator.generate_name("lake"))  # Generates a lake name
print(name_generator.generate_name("island"))  # Generates an island name
print(name_generator.generate_name("ocean"))  # Generates an ocean name
print(name_generator.generate_name("building"))  # Generates a building name
print(name_generator.generate_name("city"))  # Generates a city name
print(name_generator.generate_name("province"))  # Generates a province name
print(name_generator.generate_name("landmark"))  # Generates a landmark name
print(name_generator.generate_name("castle"))  # Generates a castle name
print(name_generator.generate_name("dungeon"))  # Generates a dungeon name
print(name_generator.generate_name("fantasy"))  # Generates a fantasy nameREM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\planet_test_one.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_asciiart.py  
from math import ceil

from PIL import (
    Image,
    ImageFont,
    ImageDraw,
)

PIL_GRAYSCALE = 'L'
PIL_WIDTH_INDEX = 0
PIL_HEIGHT_INDEX = 1
COMMON_MONO_FONT_FILENAMES = [
    'DejaVuSansMono.ttf',  # Linux
    'Consolas Mono.ttf',   # MacOS, I think
    'Consola.ttf',         # Windows, I think
]


def main():
    image = textfile_to_image('content.txt')
    image.show()
    image.save('content.png')


def textfile_to_image(textfile_path):
    """Convert text file to a grayscale image.

    arguments:
    textfile_path - the content of this file will be converted to an image
    font_path - path to a font file (for example impact.ttf)
    """
    # parse the file into lines stripped of whitespace on the right side
    with open(textfile_path) as f:
        lines = tuple(line.rstrip() for line in f.readlines())

    # choose a font (you can see more detail in the linked library on github)
    font = None
    large_font = 20  # get better resolution with larger size
    for font_filename in COMMON_MONO_FONT_FILENAMES:
        try:
            font = ImageFont.truetype(font_filename, size=large_font)
            print(f'Using font "{font_filename}".')
            break
        except IOError:
            print(f'Could not load font "{font_filename}".')
    if font is None:
        font = ImageFont.load_default()
        print('Using default font.')REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_image.py  
def text_to_image(
    text: str,
    font_filepath: str,
    font_size: int,
    color: Tuple[int, int, int, int],
) -> ImageType:
    font = ImageFont.truetype(font_filepath, size=font_size)

    img = Image.new("RGBA", font.getmask(text).size)

    draw = ImageDraw.Draw(img)
    draw_point = (0, 0)

    draw.multiline_text(draw_point, text, font=font, fill=color)
    font = ImageFont.truetype(font_filepath, size=font_size)

    text_window = img.getbbox()
    img = img.crop(text_window)


    return imgREM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder.py  
import os
import random
from map_generator import Map, generate_locations
from description_generator import DescriptionGenerator
from name_generator import NameGenerator
from map_generator import generate_maps
from location_classes import *

class World:
    def __init__(self, name="default", universe="one_alpha"):
        self.name = name
        self.universe = universe
        self.locations = []
        self.maps = []

    def generate(self):
        name_gen = NameGenerator()
        desc_gen = DescriptionGenerator()
        universe = Universe(name_gen.generate_universe_name(), desc_gen.generate_universe_description())
        self.locations.append(universe)

        planet_name = input("Enter the name of the planet: ")
        planet = Planet(planet_name, desc_gen.generate_planet_description())
        universe.add_location(planet)

        num_continents = random.randint(4, 7)  # Generate a random number of continents (4 to 7)
        for _ in range(num_continents):
            continent_name = name_gen.generate_continent_name()
            continent_desc = desc_gen.generate_continent_description()
            continent = Continent(continent_name, continent_desc)
            planet.add_location(continent)

            num_countries_per_continent = random.randint(3, 6)  # Generate a random number of countries per continent
            for _ in range(num_countries_per_continent):
                country_name = name_gen.generate_country_name()
                country_desc = desc_gen.generate_country_description()
                country = Country(country_name, country_desc)
                continent.add_location(country)

                num_regions_per_continent = random.randint(2, 5)  # Generate a random number of regions per continent
                for _ in range(num_regions_per_continent):
                    region_name = name_gen.generate_region_name()
                    region_desc = desc_gen.generate_region_description()
                    region = Region(region_name, region_desc)
                    continent.add_location(region)

                    num_provinces_per_country = random.randint(1, 3)  # Generate a random number of provinces per country
                    for _ in range(num_provinces_per_country):
                        province_name = name_gen.generate_province_name()
                        province_desc = desc_gen.generate_province_description()
                        province = Province(province_name, province_desc)
                        country.add_location(province)

                        num_rivers_per_province = random.randint(1, 2)  # Generate a random number of rivers per province
                        for _ in range(num_rivers_per_province):
                            river_name = name_gen.generate_river_name()
                            river_desc = desc_gen.generate_river_description()
                            river = River(river_name, river_desc)
                            province.add_location(river)

                        num_cities_per_province = random.randint(1, 3)  # Generate a random number of cities per province
                        for _ in range(num_cities_per_province):
                            city_name = name_gen.generate_city_name()
                            city_desc = desc_gen.generate_city_description()
                            city = City(city_name, city_desc)
                            province.add_location(city)

                            num_buildings_per_city = random.randint(10, 20)  # Generate a random number of buildings per city
                            for _ in range(num_buildings_per_city):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                city.add_location(building)

                        num_villages_per_province = random.randint(3, 5)  # Generate a random number of villages per province
                        for _ in range(num_villages_per_province):
                            village_name = name_gen.generate_village_name()
                            village_desc = desc_gen.generate_village_description()
                            village = Village(village_name, village_desc)
                            province.add_location(village)

                            num_buildings_per_village = random.randint(5, 9)  # Generate a random number of buildings per village
                            for _ in range(num_buildings_per_village):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                village.add_location(building)

                        num_towns_per_province = random.randint(2, 4)  # Generate a random number of towns per province
                        for _ in range(num_towns_per_province):
                            town_name = name_gen.generate_town_name()
                            town_desc = desc_gen.generate_town_description()
                            town = Town(town_name, town_desc)
                            province.add_location(town)

                            num_buildings_per_town = random.randint(8, 14)  # Generate a random number of buildings per town
                            for _ in range(num_buildings_per_town):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                town.add_location(building)

                        num_forests_per_region = random.randint(1, 3)  # Generate a random number of forests per region
                        for _ in range(num_forests_per_region):
                            forest_name = name_gen.generate_forest_name()
                            forest_desc = desc_gen.generate_forest_description()
                            forest = Forest(forest_name, forest_desc)
                            region.add_location(forest)

                            num_landmarks_per_forest = random.randint(1, 3)  # Generate a random number of landmarks per forest
                            for _ in range(num_landmarks_per_forest):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                forest.add_location(landmark)

                                num_ruins_per_forest = random.randint(1, 3)  # Generate a random number of ruins per forest
                                for _ in range(num_ruins_per_forest):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    forest.add_location(ruin)

                        num_swamps_per_region = random.randint(1, 3)  # Generate a random number of swamps per region
                        for _ in range(num_swamps_per_region):
                            swamp_name = name_gen.generate_swamp_name()
                            swamp_desc = desc_gen.generate_swamp_description()
                            swamp = Swamp(swamp_name, swamp_desc)
                            region.add_location(swamp)

                            num_landmarks_per_swamp = random.randint(1, 3)  # Generate a random number of landmarks per swamp
                            for _ in range(num_landmarks_per_swamp):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                swamp.add_location(landmark)

                                num_ruins_per_swamp = random.randint(1, 3)  # Generate a random number of ruins per swamp
                                for _ in range(num_ruins_per_swamp):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    swamp.add_location(ruin)

                        num_fields_per_region = random.randint(1, 3)  # Generate a random number of fields per region
                        for _ in range(num_fields_per_region):
                            field_name = name_gen.generate_field_name()
                            field_desc = desc_gen.generate_field_description()
                            field = Field(field_name, field_desc)
                            region.add_location(field)

                            num_landmarks_per_field = random.randint(1, 3)  # Generate a random number of landmarks per field
                            for _ in range(num_landmarks_per_field):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                field.add_location(landmark)

                                num_ruins_per_field = random.randint(1, 3)  # Generate a random number of ruins per field
                                for _ in range(num_ruins_per_field):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    field.add_location(ruin)

                        num_deserts_per_region = random.randint(1, 3)  # Generate a random number of deserts per region
                        for _ in range(num_deserts_per_region):
                            desert_name = name_gen.generate_desert_name()
                            desert_desc = desc_gen.generate_desert_description()
                            desert = Desert(desert_name, desert_desc)
                            region.add_location(desert)

                            num_landmarks_per_desert = random.randint(1, 3)  # Generate a random number of landmarks per desert
                            for _ in range(num_landmarks_per_desert):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                desert.add_location(landmark)

                                num_ruins_per_desert = random.randint(1, 3)  # Generate a random number of ruins per desert
                                for _ in range(num_ruins_per_desert):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    desert.add_location(ruin)

                        num_lakes_per_region = random.randint(1, 3)  # Generate a random number of lakes per region
                        for _ in range(num_lakes_per_region):
                            lake_name = name_gen.generate_lake_name()
                            lake_desc = desc_gen.generate_lake_description()
                            lake = Lake(lake_name, lake_desc)
                            region.add_location(lake)

                            num_landmarks_per_lake = random.randint(1, 3)  # Generate a random number of landmarks per lake
                            for _ in range(num_landmarks_per_lake):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                lake.add_location(landmark)

                        num_mountains_per_continent = random.randint(1, 3)  # Generate a random number of mountains per continent
                        for _ in range(num_mountains_per_continent):
                            mountain_name = name_gen.generate_mountain_name()
                            mountain_desc = desc_gen.generate_mountain_description()
                            mountain = Mountain(mountain_name, mountain_desc)
                            continent.add_location(mountain)

                            num_landmarks_per_mountain = random.randint(1, 3)  # Generate a random number of landmarks per mountain
                            for _ in range(num_landmarks_per_mountain):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                mountain.add_location(landmark)

                                num_ruins_per_mountain = random.randint(1, 3)  # Generate a random number of ruins per mountain
                                for _ in range(num_ruins_per_mountain):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    mountain.add_location(ruin)

        num_oceans = random.randint(4, 7)  # Generate a random number of oceans (4 to 7)
        for _ in range(num_oceans):
            ocean_name = name_gen.generate_ocean_name()
            ocean_desc = desc_gen.generate_ocean_description()
            ocean = Ocean(ocean_name, ocean_desc)
            planet.add_location(ocean)

        num_islands = random.randint(2, 8)  # Generate a random number of islands (2 to 8)
        for _ in range(num_islands):
            island_name = name_gen.generate_island_name()
            island_desc = desc_gen.generate_island_description()
            island = Island(island_name, island_desc)
            planet.add_location(island)

        self.locations += generate_locations()
        map = Map()
        map.generate()
        self.maps.append(map)

    def save(self):
        os.makedirs(self.name.lower(), exist_ok=True)
        with open(os.path.join(self.name.lower(), 'location_definitions.py'), 'w') as f:
            f.write("from location_classes import Universe, Planet, Continent, Country, Region, Province, City, Village, Town, "
                    "Landmark, Forest, Field, Ruin, Mountain, Desert, Lake, River, Building, Castle, Dungeon, Room, Ocean, Island\n\n")
            for location in self.locations:
                f.write(f"{location.name.lower().replace(' ', '_')} = {location.__class__.__name__}("
                        f'"{location.name}", "{location.description}")\n')
                if isinstance(location, Container):
                    for contained_location in location.locations:
                        f.write(f"{contained_location.name.lower().replace(' ', '_')} = "
                                f"{contained_location.__class__.__name__}("
                                f'"{contained_location.name}", "{contained_location.description}")\n')

def main():
    name = input("Enter the name of the world: ")
    universe_name = input("Enter the name of the universe (default: one_alpha): ")
    if not universe_name:
        universe_name = "one_alpha"
    world = World(name, universe_name)
    world.generate()
    world.save()

    generate_maps(world.name)

if __name__ == "__main__":
    main()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder_gui.py  
import pygame
import sys
import random
import noise
import numpy as np

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
MAP_HEIGHT = SCREEN_HEIGHT * 2 // 3
CONSOLE_HEIGHT = SCREEN_HEIGHT - MAP_HEIGHT
BLUE = (0, 0, 255)
WHITE = (255, 255, 255)
CONTINENT_COLOR = (139, 69, 19)  # Brown color for continents
DESERT_COLOR = (255, 255, 0)  # Beige color for desert
FOREST_COLOR = (0, 100, 0)  # Dark green color for forest
MOUNTAIN_COLOR = (128, 128, 128)  # Gray color for mountains
SWAMP_COLOR = (0, 255,255)  # Grey Green color for swamp
PLAINS_COLOR = (255, 255, 255)  # Light Grey Green color for plains

# Initialize Pygame
pygame.init()
clock = pygame.time.Clock()

# Create the Pygame window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("World Builder")

# Clear the screen
screen.fill(BLUE)

def generate_waves_shape():
    shape = []
    num_points = random.randint(50, 130)  # Number of points for the vector line
    start_x = random.randint(0, SCREEN_WIDTH)
    start_y = random.randint(SCREEN_HEIGHT // 3, int(SCREEN_HEIGHT * 3 / 5))

    scale = 0.1  # The smaller the scale the smoother the noise
    octaves = 6  # Number of levels of detail
    persistence = 0.5  # Amplitude of each successive octave
    lacunarity = 2.0  # Frequency of each successive octave

    for i in range(num_points):
        x = start_x + i
        y = start_y + noise.pnoise2(x * scale, 
                                     start_y * scale, 
                                     octaves=octaves, 
                                     persistence=persistence, 
                                     lacunarity=lacunarity, 
                                     repeatx=SCREEN_WIDTH, 
                                     repeaty=SCREEN_HEIGHT, 
                                     base=0)
        shape.append((x, int(y)))

    return shape

def generate_continent_shape():
    shape = []
    num_points = random.randint(160000, 288000)  # Number of points for the vector line
    start_x = random.randint(0, SCREEN_WIDTH)
    start_y = random.randint(SCREEN_HEIGHT // 3, int(SCREEN_HEIGHT * 3 / 5))

    for _ in range(num_points):
        shape.append((start_x, start_y))
        direction = random.randint(0, 3)  # Random direction (0 = up, 1 = down, 2 = left, 3 = right)
        if direction == 0:
            start_y -= 1
        elif direction == 1:
            start_y += 1
        elif direction == 2:
            start_x -= 1
        else:
            start_x += 1

    return shape

# Draw the map area
map_area = pygame.Rect(0, 0, SCREEN_WIDTH, MAP_HEIGHT)
pygame.draw.rect(screen, BLUE, map_area)

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    # Generate and draw the continent shape
    continent_shape = generate_continent_shape()
    pygame.draw.lines(screen, CONTINENT_COLOR, False, continent_shape, 2)

    # Display the continent shape on the map
    for i in range(len(continent_shape) - 1):
        pygame.draw.line(screen, CONTINENT_COLOR, continent_shape[i], continent_shape[i + 1], 1)

# Draw the console area
console_area = pygame.Rect(0, MAP_HEIGHT, SCREEN_WIDTH, CONSOLE_HEIGHT)
pygame.draw.rect(screen, WHITE, console_area)

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Generate and draw the waves shape
    waves_shape = generate_waves_shape()
    pygame.draw.lines(screen, WHITE, False, waves_shape, 2)
    
    # Update the display
    pygame.display.flip()
    clock.tick(2)
    
# Quit the game
pygame.quit()
sys.exit()REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeOne.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeTwo.py  
#generateTreeTwo.py

from PIL import Image, ImageDraw

# Image size
width = 200
height = 200

# Define the trunk of the tree
trunk_height = 50
trunk_width = 10

# Define the tree color
tree_color = (34, 139, 34) # Green
trunk_color = (139,69,19) # Brown

# Create a new image with white background
img = Image.new('RGB', (width, height), (255, 255, 255))
draw = ImageDraw.Draw(img)

# Draw the trunk
draw.rectangle(
    [(width // 2 - trunk_width // 2, height - trunk_height), 
     (width // 2 + trunk_width // 2, height)], 
    fill=trunk_color
)

# Draw the tree
for i in range(height - trunk_height, 0, -1):
    color = tree_color
    start = width // 2 - i
    end = width // 2 + i
    draw.line([(start, i), (end, i)], fill=color)

# Save the image
img.save('pixel_tree.png')
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_classes.py  
from ..game import Location

class Container(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        self.locations = []

    def add_location(self, location):
        if self.validate_containment(location):
            self.locations.append(location)
        else:
            print(f"Error: Cannot place {type(location).__name__} within {type(self).__name__}.")

    def get_location(self, name):
        for location in self.locations:
            if location.name == name:
                return location
        return None

    def validate_containment(self, location):
        return isinstance(location, (Region, State, Province, City, Village, Town, Landmark))

class Universe(Container):
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Planet(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Continent(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Country(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Region(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class State(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Province(Container):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Forrest(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Field(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
                
class Ruins(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class City(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Village(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Town(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Landmark(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_definitions.py  
#location_definitions.py

from location_classes import Universe, Planet, Continent, Country, Region, State, Province, City, Village, Town, Landmark

# Create instances of locations

one_alpha = Universe("The Universe", "A vast cosmos")
thulea = Planet("Thulea", "A mysterious and enchanting planet in the far reaches of the universe.")
lumos = Continent("Lumos", "A continent rich in history and ancient ruins.")
dawnbreak = Region("Dawnbreak", "A region where the first rays of sunlight touch the land.")
luminaria = Country("Luminaria", "A country known for its radiant beauty and rich culture.")
astravale = State("Astravale", "A state nestled in the valley of astral wonders.")
province = Province("Ontario", "A province in Canada")
luminaria_city = Village("Luminaria City", "A bustling city that shines like a beacon of light.")
royal_library = Landmark("Royal Library", "A grand library that holds the knowledge of countless ages.")
luminaria_city.add_landmark(royal_library)
starcrest = Village("Starcrest", "A peaceful village known for its stargazing observatory.")
astral_archive = Landmark("Astral Archive", "An ancient repository of celestial knowledge.")
starcrest.add_landmark(astral_archive)
ezitahan = Country("Ezitahan", "A country of ancient traditions and mystical secrets.")
reqedor = State("Reqedor", "A state with lush landscapes and a deep connection to nature.")
wravora = Village("Wravora", "A charming village nestled in the heart of the wilderness.")
pekkopan_tower = Landmark("Pekkopan Tower", "A towering structure that houses the wisdom of the ancient Pekko tribe.")
wravora.add_landmark(pekkopan_tower)
ikrecrizar = Village("Ikrecrizar", "A remote village known for its skilled artisans and craftsmanship.")
erissenem_gardens = Landmark("Erissenem Gardens", "Exquisite gardens filled with rare and mystical plants.")
ikrecrizar.add_landmark(erissenem_gardens)
yocutha = Country("Yocutha", "A country shrouded in mystery and ancient legends.")
dawnshire = State("Dawnshire", "A state where the first light of dawn brings hope and new beginnings.")
shimmerfield = Village("Shimmerfield", "A village adorned with shimmering fields of luminescent flowers.")
trilith_drift_palace = Landmark("Trilith Drift Palace", "A magnificent palace perched on floating rock formations.")
shimmerfield.add_landmark(trilith_drift_palace)
argentia_reach = Village("Argentia Reach", "A coastal village renowned for its silvery beaches and sparkling waters.")
verdantide_glade = Landmark("Verdantide Glade", "An enchanting glade where nature flourishes in vibrant hues.")
argentia_reach.add_landmark(verdantide_glade)
frostholm_highlands = Region("Frostholm Highlands", "A region of icy landscapes and majestic snow-capped mountains.")
mugulux = Country("Mugulux", "A country known for its frozen tundras and resilient people.")
frostholm = State("Frostholm", "A state where frost and ice dominate the landscape.")
frostholm_village = Village("Frostholm Village", "A cozy village nestled amidst snowy valleys.")
hearthfire_inn = Landmark("Hearthfire Inn", "A warm and welcoming inn where travelers find respite from the cold.")
frostholm_village.add_landmark(hearthfire_inn)
astralyn_bluff = Village("Astralyn Bluff", "A village perched on a cliff overlooking vast astral plains.")
emberfall_enclave = Landmark("Emberfall Enclave", "A hidden sanctuary where embers dance and flicker eternally.")
astralyn_bluff.add_landmark(emberfall_enclave)
aine_pusea = Country("Ainepusea", "A country of mesmerizing landscapes and mystical energies.")
stormwatch_crest = State("Stormwatch Crest", "A state where stormy skies unleash raw elemental power.")
stormwatch_city = Village("Stormwatch City", "A bustling city where lightning crackles through the air.")
frostholm_highlands_citadel = Landmark("Frostholm Highlands Citadel", "An imposing fortress that stands as a beacon of strength.")
stormwatch_city.add_landmark(frostholm_highlands_citadel)
havenholm_vale = Village("Havenholm Vale", "A tranquil village nestled in a verdant valley.")
royal_citadel = Landmark("Royal Citadel", "The majestic seat of power where rulers govern with wisdom and grace.")
havenholm_vale.add_landmark(royal_citadel)
shadowfen_marsh = Region("Shadowfen Marsh", "A region cloaked in darkness and mystery, where shadows dance on murky waters.")
phakkeacaea = Country("Phakkeacaea", "A country of mist-laden forests and ancient arcane traditions.")
shadowfen_marsh_state = State("Shadowfen Marsh", "A state where the marshlands hold ancient secrets and hidden dangers.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
shadowfen_marsh_state.add_place(ezitahan_city)
shadowfen_marsh_state.add_place(reqedor_village)
zeloria_landmark = Landmark("Zeloria", "A mystical sanctuary hidden within the depths of Shadowfen Marsh.")
ezitahan_city.add_landmark(zeloria_landmark)
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
mugulux_landmark = Landmark("Mugulux", "A sacred site where the spirits of the ancestors are honored.")
yocutha_village.add_landmark(mugulux_landmark)
luxuinia = Country("Luxuinia", "A country known for its ethereal beauty and captivating aura.")
astralyn_bluff_state = State("Astralyn Bluff", "A state where the bluffs hold breathtaking views of astral phenomena.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
luxuinia_state = State("Astralyn Bluff", "A state where astral energies permeate every corner.")
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
astralyn_bluff_state.add_place(pekkopan_village)
astralyn_bluff_state.add_place(ikrecrizar_village)
aiharreolum = Continent("Aiharreolum", "A continent steeped in celestial mysteries and magic.")
uzaikaton = Region("Uzaikaton", "A region where ancient ruins and celestial phenomena intertwine.")
eaprastorith = Country("Eaprastorith", "A country where the power of the heavens is harnessed.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
stormwatch_crest_village = Village("Stormwatch Crest", "A village nestled amidst the storm-wracked peaks.")
havenholm_vale_state.add_place(astralyn_bluff_city)
havenholm_vale_state.add_place(stormwatch_crest_village)
stormwatch_crest_village.add_landmark(frostholm_highlands_citadel)
eaprastorith.add_place(havenholm_vale_state)
eaprastorith.add_place(stormwatch_crest_village)
astosheopan = Country("Astosheopan", "A country blessed with celestial wonders and mystical phenomena.")
celestria_expanse = State("Celestria Expanse", "A state where the celestial veil is thin, allowing glimpses of other realms.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
celestria_expanse.add_place(ezitahan_city)
celestria_expanse.add_place(reqedor_village)
celestria_expanse.add_place(yocutha_village)

toggurean = Region("Toggurean", "A region of rugged landscapes and untamed beauty.")
homaivaria = Country("Homaivaria", "A country known for its vast forests and deep spiritual connections.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
shadowfen_marsh_city.add_landmark(zeloria_landmark)
homaivaria.add_place(frostholm_highlands_state)
homaivaria.add_place(shadowfen_marsh_city)

hegrukya = Country("Hegruckya", "A country where ancient spirits and primal forces shape the land.")
stormwatch_crest_state = State("Stormwatch Crest", "A state where the storms rage with unrivaled fury.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
stormwatch_crest_state.add_place(pekkopan_village)
stormwatch_crest_state.add_place(ikrecrizar_village)
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
hegrukya.add_place(stormwatch_crest_state)
hegrukya.add_place(pekkopan_village)
hegrukya.add_place(ikrecrizar_village)

kreottodia = Region("Kreottodia", "A region of enchanting landscapes and ancient wonders.")
xuppagary = Country("Xuppagary", "A country known for its diverse terrains and cultural heritage.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
xuppagary.add_place(trilith_drift_state)
xuppagary.add_place(argentia_reach_city)

hisrasal = Country("Hisrasal", "A country where the dawn's first light holds divine significance.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
hisrasal.add_place(dawnshire_state)

mustopis = Continent("Mustopis", "A continent where magic and technology intertwine harmoniously.")
draisaborg = Region("Draisaborg", "A region known for its vibrant cities and cultural diversity.")
grufathage = Country("Grufathage", "A country of diverse landscapes and rich folklore.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
grufathage.add_place(shimmerfield_state)
grufathage.add_place(ezitahan_city)
grufathage.add_place(reqedor_village)
grufathage.add_place(yocutha_village)
grufathage.add_place(zeloria_landmark)
grufathage.add_place(royal_library)
grufathage.add_place(astral_archive)
grufathage.add_place(trilith_drift_palace)
grufathage.add_place(verdantide_glade)

ouyecrogary = Region("Ouyecrogary", "A region where ancient ruins hold untold secrets and hidden treasures.")
hakusha = Country("Hakusha", "A country where the elements dance in harmony and spiritual enlightenment is sought.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
astralyn_bluff_city.add_landmark(zeloria_landmark)
hakusha.add_place(frostholm_highlands_state)
hakusha.add_place(astralyn_bluff_city)
hakusha.add_place(shadowfen_marsh_city)

astibberal = Country("Astibberal", "A country where ancient wisdom and arcane arts intertwine.")
oudrattuthia = Region("Oudrattuthia", "A region of dark forests and hidden magical enclaves.")
hegrukya_state = State("Hegruckya", "A state where ancient spirits and primal forces shape the land.")
stormwatch_crest_village = Village("Stormwatch Crest", "A village embraced by stormy skies and fierce winds.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
zeloria_landmark = Landmark("Zeloria", "A place of ancient power and mystic energies.")
hegrukya_state.add_place(stormwatch_crest_village)
hegrukya_state.add_place(pekkopan_village)
stormwatch_crest_village.add_landmark(zeloria_landmark)
astibberal.add_place(hegrukya_state)
astibberal.add_place(stormwatch_crest_village)
oudrattuthia.add_place(pekkopan_village)
oudrattuthia.add_place(zeloria_landmark)
astibberal.add_place(oudrattuthia)

hegrukya.add_place(astibberal)

kreassiston = Region("Kreassiston", "A region of ancient ruins and magical anomalies.")
zenagon = Continent("Zenagon", "A continent where mysticism and technological advancements coexist.")
keasodor = Region("Keasodor", "A region known for its lush forests and harmonious coexistence with nature.")
kracceviel = Country("Kracceviel", "A country celebrated for its vibrant culture and rich traditions.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
kracceviel.add_place(trilith_drift_state)
kracceviel.add_place(argentia_reach_city)
kracceviel.add_place(zeloria_landmark)

thaslisan = Country("Thaslisan", "A country known for its captivating landscapes and ethereal beauty.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
thaslisan.add_place(dawnshire_state)

darrethen = Region("Darrethen", "A region where enchantment and elegance pervade every corner.")
celestia = Country("Celestia", "A country where celestial beauty and divine radiance shine brightly.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
darrethen.add_place(shimmerfield_state)
darrethen.add_place(ezitahan_city)
darrethen.add_place(reqedor_village)
darrethen.add_place(yocutha_village)
celestia.add_place(darrethen)

sunspire = Country("Sunspire", "A country where the sun's radiant energy fuels life and inspiration.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
sunspire.add_place(dawnshire_state)

eclipsia = Continent("Eclipsia", "A continent where darkness and light dance in eternal balance.")
gloaming_province = Region("Gloaming Province", "A region bathed in the soft hues of twilight and shimmering stars.")
illumina = Country("Illumina", "A country known for its radiant landscapes and ethereal allure.")
astravale = State("Astravale", "A state nestled in the valley of astral wonders.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
starcrest_village.add_landmark(astral_archive)
astravale.add_place(luminaria_city)
astravale.add_place(starcrest_village)
astravale.add_place(zeloria_landmark)
astravale.add_place(royal_library)
astravale.add_place(astral_archive)
astravale.add_place(trilith_drift_palace)
astravale.add_place(verdantide_glade)
illumina.add_place(astravale)
illumina.add_place(luminaria_city)
illumina.add_place(starcrest_village)
eventide = Country("Eventide", "A country where twilight casts a bewitching spell and shadows come alive.")
reqedor_state = State("Reqedor", "A state where ancient forests and mystical beings coexist in harmony.")
wravora_city = Village("Wravora", "A city embraced by the tranquility of nature.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
wravora_city.add_landmark(pekkopan_tower)
ikrecrizar_village.add_landmark(erissenem_gardens)
reqedor_state.add_place(wravora_city)
reqedor_state.add_place(ikrecrizar_village)
eventide.add_place(reqedor_state)

lusteria = Region("Lusteria", "A region of shimmering landscapes and magical allure.")
dawnshire = Country("Dawnshire", "A country where the first light of dawn brings hope and new beginnings.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
shimmerfield_city = Village("Shimmerfield", "A city adorned with shimmering fields of luminescent flowers.")
trilith_drift_palace = Landmark("Trilith Drift Palace", "A magnificent palace perched on floating rock formations.")
shimmerfield_city.add_landmark(trilith_drift_palace)
argentia_reach_city = Village("Argentia Reach", "A coastal village renowned for its silvery beaches and sparkling waters.")
verdantide_glade = Landmark("Verdantide Glade", "An enchanting glade where nature flourishes in vibrant hues.")
argentia_reach_city.add_landmark(verdantide_glade)
dawnshire_state.add_place(shimmerfield_city)
dawnshire_state.add_place(argentia_reach_city)
lusteria.add_place(dawnshire_state)

shadowfen_marsh = Region("Shadowfen Marsh", "A region cloaked in darkness and mystery, where shadows dance on murky waters.")
phakkeacaea = Country("Phakkeacaea", "A country of mist-laden forests and ancient arcane traditions.")
shadowfen_marsh_state = State("Shadowfen Marsh", "A state where the marshlands hold ancient secrets and hidden dangers.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shadowfen_marsh_state.add_place(ezitahan_city)
shadowfen_marsh_state.add_place(reqedor_village)
shadowfen_marsh_state.add_place(yocutha_village)
shadowfen_marsh.add_place(shadowfen_marsh_state)

luxuinia = Country("Luxuinia", "A country known for its ethereal beauty and captivating aura.")
astralyn_bluff_state = State("Astralyn Bluff", "A state where the bluffs hold breathtaking views of astral phenomena.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
zeloria_landmark = Landmark("Zeloria", "A place of ancient power and mystic energies.")
luxuinia_state = State("Astralyn Bluff", "A state where astral energies permeate every corner.")
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
astralyn_bluff_state.add_place(pekkopan_village)
astralyn_bluff_state.add_place(ikrecrizar_village)
luxuinia.add_place(astralyn_bluff_state)

oudrattuthia = Region("Oudrattuthia", "A region of ancient forests and magical enclaves.")
hegrukya = Country("Hegruckya", "A country where ancient spirits and primal forces shape the land.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
astralyn_bluff_city.add_landmark(zeloria_landmark)
hegrukya.add_place(frostholm_highlands_state)
hegrukya.add_place(astralyn_bluff_city)
hegrukya.add_place(shadowfen_marsh_city)

kreassiston = Region("Kreassiston", "A region of ancient ruins and magical anomalies.")
kreassiston.add_place(zeloria_landmark)
kreassiston.add_place(royal_library)
kreassiston.add_place(astral_archive)
kreassiston.add_place(trilith_drift_palace)
kreassiston.add_place(verdantide_glade)

xuppagary = Country("Xuppagary", "A country known for its diverse terrains and cultural heritage.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
xuppagary.add_place(trilith_drift_state)
xuppagary.add_place(argentia_reach_city)

thaslisan = Country("Thaslisan", "A country known for its captivating landscapes and ethereal beauty.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
thaslisan.add_place(dawnshire_state)

darrethen = Region("Darrethen", "A region where enchantment and elegance pervade every corner.")
celestia = Country("Celestia", "A country where celestial beauty and divine radiance shine brightly.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
darrethen.add_place(shimmerfield_state)
darrethen.add_place(ezitahan_city)
darrethen.add_place(reqedor_village)
darrethen.add_place(yocutha_village)
celestia.add_place(darrethen)

sunspire = Country("Sunspire", "A country where the sun's radiant energy fuels life and inspiration.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
sunspire.add_place(dawnshire_state)

universe = Universe("The Vast Cosmos", "A mysterious and expansive cosmos")
thelea = Planet("Thelea", "A mesmerizing celestial body brimming with otherworldly wonders")
continent = Continent("Zephyrion", "A continent within the realm of Thelea, where mystical landscapes and ancient civilizations intertwine")
country = Country("Etherea", "A mystical realm within the continent of Zephyrion, where magic and enchantment flourish")
region = Region("Azure Highlands", "A realm of breathtaking beauty and ethereal landscapes within the country of Etherea")
state = State("Astralweave", "A realm within the Azure Highlands, where cosmic energies intertwine with the fabric of reality")
province = Province("Luminary Reach", "An enchanting province in the realm of Astralweave, known for its radiant beauty and celestial wonders")
city = City("Stellaris", "The celestial capital city of the province Luminary Reach, where starlight dances upon ancient spires")
village = Village("Moonshadow", "A tranquil village nestled beneath the luminescent glow of celestial moons")
town = Town("Stardust Crossing", "A vibrant town where interstellar travelers gather and cosmic energies converge")
landmark = Landmark("Celestial Cascade", "A magnificent waterfall of shimmering stardust, flowing through the heart of the Astralweave realm")

# Add locations to containers

universe.add_location(thelea)
thelea.add_location(continent)
continent.add_location(country)
country.add_location(region)
region.add_location(state)
state.add_location(city)
state.add_location(village)
state.add_location(town)
country.add_location(province)
province.add_location(city)
province.add_location(town)
state.add_location(landmark)


REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\maps.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\characters.py  
class Character:
    def __init__(self, name, health, inventory, alignment, location, dialogue):
        self.name = name
        self.health = health
        self.inventory = inventory
        self.alignment = alignment  # good, evil, neutral
        self.location = location
        self.dialogue = dialogue
        self.alive = True

    def greet(self):
        return f"Hello, I am {self.name}. I am on the {self.alignment} side."

    def is_alive(self):
        return self.alive

    def take_damage(self, damage):
        self.health -= damage
        if self.health <= 0:
            self.alive = False
            self.health = 0

    def speak(self):
        return self.dialogue


class Enemy(Character):
    def __init__(self, name, health, inventory, damage, location, dialogue, alignment="evil"):
        super().__init__(name, health, inventory, alignment, location, dialogue)
        self.damage = damage

    def attack(self, target):
        target.take_damage(self.damage)
        return f"{self.name} attacks {target.name} for {self.damage} damage!"


class Ally(Character):
    def __init__(self, name, health, inventory, help_text, location, dialogue, alignment="good"):
        super().__init__(name, health, inventory, alignment, location, dialogue)
        self.help_text = help_text

    def provide_help(self):
        return f"{self.name} says: {self.help_text}"


# Create characters with their respective locations and dialogues
caelum = Ally("Caelum", 100, [], "I possess extensive knowledge of the ancient civilization.", "Royal Library", "The secrets of the lost civilization shall be unraveled under my guidance!")
eris = Ally("Eris", 100, [], "My unparalleled combat skills and mastery of magic make me an unstoppable force.", "Warrior's Stronghold", "With sword and spell, justice shall prevail!")
vexis = Enemy("Lord Vexis", 120, [], 15, "Shadow Keep", "Your futile attempts to uncover the ancient secrets will only lead to your demise!")
informant1 = Enemy("Hepzibah", 80, [], 10, "Hidden Library", "My allegiance lies with Lord Vexis. Your every discovery shall be reported!", alignment="neutral")
informant2 = Enemy("Algernon", 80, [], 10, "Scholar's Retreat", "Rumors of your endeavors have reached my ears. Lord Vexis will be delighted!", alignment="neutral")
spy1 = Enemy("Phineas", 90, [], 12, "Underground Lair", "Your every move is being meticulously observed. Lord Vexis shall always have the advantage!", alignment="evil")
spy2 = Enemy("Lavinia", 90, [], 12, "Assassin's Hideout", "Lord Vexis demands your swift demise. Prepare to meet your untimely end!", alignment="evil")
hero1 = Ally("Gallant", 100, [], "I stand ready to assist you!", "Castle Stronghold", "Hail, noble adventurer! I am Gallant, ever loyal to our cause!")
villain1 = Enemy("Malachi", 100, [], 10, "Dark Citadel", "Tremble before the might of Malachi! True fear shall consume your heart!")
ally1 = Ally("Valeria", 80, [], "My expertise in combat is at your disposal.", "Frostholm Village", "Together, we shall triumph over any adversity!")
ally2 = Ally("Seraphine", 75, [], "My vast knowledge shall aid you in your quests.", "Academy of Wisdom", "Wisdom and courage shall guide our path to victory!")
villain2 = Enemy("Grimgor", 60, [], 8, "Shadow Caverns", "Behold the might of Grimgor, the harbinger of darkness!", alignment="evil")
ally3 = Ally("Braveheart", 80, [], "With unwavering loyalty, I shall fight alongside you.", "Warrior's Camp", "Fear not, for Braveheart shall stand as your shield!")
ally4 = Ally("Zephyrus", 70, [], "As master of the skies, I bring strategic advantage.", "Aerie Heights", "Take flight with me, and victory shall be ours to claim!")
ally5 = Ally("Ironclad", 80, [], "I shall shatter all obstacles with indomitable strength.", "Ironforge Fortress", "No barrier shall endure against the might of Ironclad!")
villain3 = Enemy("Vex'Nor", 70, [], 10, "Shadowed Ruins", "Tremble before the dark powers of Vex'Nor!", alignment="evil")
villain4 = Enemy("Lysandra", 60, [], 10, "Enchantress Tower", "The magic within me shall consume all of Elysium!", alignment="evil")
ally6 = Ally("Keeneye", 80, [], "My keen vision detects hidden dangers from afar.", "Woodland Outpost", "Ever watchful, I shall ensure our safety.")
ally7 = Ally("Bumblethorn", 75, [], "As a defender of the realm, I can aid with bee-related challenges.", "Beehive Grove", "In unity with the bees, we shall overcome all obstacles!")
ally8 = Ally("Morphius", 80, [], "I possess the power to shape-shift and deceive our foes.", "Shadowhaven Sanctum", "Through myriad forms, we shall emerge victorious!")
villain5 = Enemy("Dreadheart", 100, [], 12, "Twilight Keep", "I am the embodiment of your darkest nightmares! Dreadheart reigns supreme!", alignment="evil")
ally9 = Ally("Thornwhisper", 85, [], "I blend into nature's embrace, enabling stealth and subterfuge.", "Whispering Woods", "Nature's embrace conceals our every move.")
villain6 = Enemy("Arachnon", 70, [], 10, "Webbed Depths", "Escape from my intricate web? Impossible!", alignment="evil")
ally10 = Ally("Warden Reginald", 70, [], "As the noble ruler, I have knowledge and resources at our disposal.", "Royal Citadel", "With honor and wisdom, I lead our cause!")
ally11 = Ally("Lady Elara", 70, [], "As the wise councilor, my guidance shall illuminate our path.", "Chamber of Wisdom", "Never underestimate the power of compassion and wisdom.")
ally12 = Ally("Aurora", 90, [], "I am the mystical guardian, imbued with the essence of ancient magic.", "Sanctum of Mysteries", "Harness the magic within you, and all shall be possible!")
ally13 = Ally("Eldric", 100, [], "In the absence of the hero, I shall provide aid and guidance.", "Hall of Heroes", "By the ancient oaths, I answer your call!")
villain7 = Enemy("Slaughterbane", 75, [], 10, "Bloodthorn Arena", "No whip can match the fury of Slaughterbane!", alignment="evil")
villain8 = Enemy("Venomstrike", 70, [], 8, "Poisoned Marsh", "Feel the venom coursing through your veins! You are powerless against Venomstrike!", alignment="evil")
villain9 = Enemy("Nightshade", 80, [], 10, "Cursed Crypts", "Your darkest fears shall nourish Nightshade's power!", alignment="evil")
neutral1 = Character("Equinox", 90, [], "I maintain the delicate balance of the cosmos.", "Astral Sanctum", "I am Equinox, guardian of cosmic harmony.", alignment="neutral")
ally14 = Ally("Whirlwind", 80, [], "I summon the cyclone's might, tearing through our enemies.", "Tempest Spire", "The storm's wrath is at our command! Unleash the fury of the whirlwind!")

characters = [caelum, eris, vexis, informant1, informant2, spy1, spy2, hero1, villain1, ally1, ally2, villain2, ally3, ally4, ally5, villain3, villain4, ally6, ally7, ally8, villain5, ally9, villain6, ally10, ally11, ally12, ally13, villain7, villain8, villain9, neutral1, ally14]REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat.py  
#combat.py

from combat_controller import CombatController
import random


class Combat:
    @staticmethod
    def validate_character(character):
        """
        Validate the character object
        """
        if character is None or not all(hasattr(character, attr) for attr in ['attack_bonus', 'damage_bonus', 'weapon', 'armor_class', 'health']):
            raise ValueError('Invalid character')

    @staticmethod
    def roll_die(sides):
        """
        Simulate a roll of a die with the specified number of sides.
        """
        return random.randint(1, sides)

    @staticmethod
    def attack(attacker, defender):
        """
        Simulate an attack from the attacker to the defender.
        """
        # Validate the characters
        Combat.validate_character(attacker)
        Combat.validate_character(defender)

        # Roll a d20 to determine if the attack hits
        roll = Combat.roll_die(20) + attacker.attack_bonus
        if roll >= defender.armor_class:
            # The attack hits
            # Roll a die to determine damage
            damage = Combat.roll_die(attacker.weapon.damage_die) + attacker.damage_bonus
            # Apply special ability damage if available
            if attacker.weapon.special_ability:
                special_damage = Combat.roll_die(attacker.weapon.special_ability['damage_die'])
                damage += special_damage
                print(f"{attacker.name} hits {defender.name} with special ability {attacker.weapon.special_ability['name']} for {special_damage} damage.")
            # Apply damage to the defender
            defender.health -= damage
            print(f"{attacker.name} hits {defender.name} for {damage} damage.")
        else:
            # The attack misses
            print(f"{attacker.name}'s attack misses.")

def engage_combat(self, enemy_name):
    enemy = self.player.current_location.get_creature(enemy_name)
    if enemy:
        print(f"A wild {enemy.name} appears!")
        while self.player.health > 0 and enemy.health > 0:
            # Player's turn
            CombatController.attack(self.player, enemy)
            if enemy.health <= 0:
                print(f"You have defeated {enemy.name}!")
                break
            # Enemy's turn
            CombatController.attack(enemy, self.player)
            if self.player.health <= 0:
                print("You have been defeated...")
                break
    else:
        print("There is no such creature here.")
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat_controller.py  
# combat_controller.py
import random

class CombatController:
    @staticmethod
    def validate_character(character):
        # Validation code here
        if character is None or not all(hasattr(character, attr) for attr in ['attack_bonus', 'damage_bonus', 'weapon', 'armor_class', 'health']):
            raise ValueError('Invalid character')

    @staticmethod
    def roll_die(sides):
        # Roll die code here
        return random.randint(1, sides)

    @staticmethod
    def attack(attacker, defender):
        # Attack simulation code here
        roll = CombatController.roll_die(20) + attacker.attack_bonus
        if roll >= defender.armor_class:
            damage = CombatController.roll_die(attacker.weapon.damage_die) + attacker.damage_bonus
            defender.health -= damage
            print(f"{attacker.name} hits {defender.name} for {damage} damage.")
        else:
            print(f"{attacker.name}'s attack misses.")

    @staticmethod
    def engage_combat(player, enemy):
        # Combat engagement code here
        print(f"A wild {enemy.name} appears!")
        while player.health > 0 and enemy.health > 0:
            CombatController.attack(player, enemy)
            if enemy.health <= 0:
                print(f"You have defeated {enemy.name}!")
                break
            CombatController.attack(enemy, player)
            if player.health <= 0:
                print("You have been defeated...")
                break
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\commands.py  
#commands.py
from . import save_load
from . import controller
from . import combat
from .characters import characters

class Commands:

    def __init__(self, game_state):
        self.game_state = game_state
        self.combat = combat.Combat()
        
    def look(self):
        location = self.game_state.get_player_location()
        return location.get_description()

    def use_item(self, item_name):
        player = self.game_state.get_player()
        item = player.get_item(item_name)
        if item:
            return item.use()
        else:
            return "You don't have that item."

    def move(self, direction):
        if direction in ['north', 'south', 'east', 'west', 'northeast', 'northwest', 'southeast', 'southwest', 'up', 'down']:
            new_location = self.game_state.move_player(direction)
            return new_location.get_description()
        else:
            return "Invalid direction."

    def save(self):
        # Call the save function from save_load module
        save_load.save_game(self.game_state.player)
        return "Game saved."

    def restore(self):
        # Call the load function from save_load module
        self.game_state.player = save_load.load_game()
        return "Game restored."

    def restart(self):
        # Reset the game state in game_state
        self.game_state.reset_state()
        return "Game restarted."

    def verbose(self):
        # Enable verbose mode in game_state
        self.game_state.verbose = True
        return "Verbose mode on."

    def score(self):
        # Fetch score from player object
        return f"Your score is {self.game_state.player.score}."

    def diagnostic(self):
        # Let's assume game_state has a diagnostic method which runs some checks
        result = self.game_state.diagnostic()
        return "Everything seems to be working fine." if result else "Something seems off."

    def brief(self):
        # Enable brief mode in game_state
        self.game_state.brief = True
        return "Brief mode on."

    def superbrief(self):
        # Enable superbrief mode in game_state
        self.game_state.superbrief = True
        return "Superbrief mode on."

    def quit(self):
        # Call game_state's quit method
        self.game_state.quit()
        return "Quitting game."

    def climb(self):
        # Climb command implementation would depend on the game world.
        # If climbing is context-dependent, you'll need to check the player's location, possible actions, etc.
        # For now, let's say that climbing just changes the player's altitude
        self.game_state.player.altitude += 1
        return "You start to climb."

def redo_last_command(self):
    # Redo last command implementation
    if self.game_state.last_command is not None:
        # Recall the last command and parameters used and perform the action
        return getattr(self, self.game_state.last_command[0])(*self.game_state.last_command[1:])
    else:
        return "No previous command to redo."

def go(self, direction):
    # Go command implementation
    return self.move(direction)

def enter(self, place):
    # Enter command implementation
    if self.game_state.get_player_location().name == place:
        return "You're already here."
    else:
        possible_directions = self.game_state.get_player_location().get_exits()
        for direction in possible_directions:
            if possible_directions[direction].name == place:
                return self.move(direction)
        return f"There's no {place} nearby to enter."

def go_in(self, place):
    # Go in command implementation
    return self.enter(place)

def go_out(self):
    # Go out command implementation
    return self.move("out")

def say_hello(self):
    # Say hello command implementation
    return "You say hello. It echoes in the quiet."

def get_item(self, item_name):
    # Get/take/grab command implementation
    item = self.game_state.get_player_location().get_item(item_name)
    if item:
        self.game_state.get_player().add_item(item)
        return f"You have taken the {item_name}."
    else:
        return f"There's no {item_name} here to take."

def get_all_items(self):
    # Get/take/grab all command implementation
    items = self.game_state.get_player_location().get_items()
    for item in items:
        self.game_state.get_player().add_item(item)
    return "You've taken all the items."

def throw_item_at(self, item_name, target):
    # Throw item at command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        self.game_state.get_player().remove_item(item_name)
        return f"You've thrown the {item_name} at the {target}."
    else:
        return f"You don't have a {item_name} to throw."

def open_container(self, container_name):
    # Open container command implementation
    container = self.game_state.get_player_location().get_container(container_name)
    if container:
        return container.open()
    else:
        return f"There's no {container_name} here to open."

def open_exit(self, exit_name):
    # Open exit command implementation
    exit = self.game_state.get_player_location().get_exit(exit_name)
    if exit:
        if exit.is_locked():
            return f"The {exit_name} is locked."
        else:
            return exit.open()
    else:
        return f"There's no {exit_name} here to open."

def read_item(self, item_name):
    # Read command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_readable():
            return item.read()
        else:
            return f"You can't read the {item_name}."
    else:
        return f"You don't have a {item_name} to read."

def drop_item(self, item_name):
    # Drop command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        self.game_state.get_player().remove_item(item_name)
        self.game_state.get_player_location().add_item(item)
        return f"You have dropped the {item_name}."
    else:
        return f"You don't have a {item_name} to drop."

def put_item_in_container(self, item_name, container_name):
    # Put command implementation
    item = self.game_state.get_player().get_item(item_name)
    container = self.game_state.get_player_location().get_container(container_name)
    if item and container:
        self.game_state.get_player().remove_item(item_name)
        container.add_item(item)
        return f"You have put the {item_name} in the {container_name}."
    else:
        return f"You don't have a {item_name} to put in the {container_name}."

def turn_control_with_item(self, control_name, item_name):
    # Turn control with item command implementation
    control = self.game_state.get_player_location().get_control(control_name)
    item = self.game_state.get_player().get_item(item_name)
    if control and item:
        return control.turn_with(item)
    else:
        return f"You can't turn the {control_name} with the {item_name}."

def turn_on_item(self, item_name):
    # Turn on item command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.turn_on()
    else:
        return f"You don't have a {item_name} to turn on."

def turn_off_item(self, item_name):
    # Turn off item command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.turn_off()
    else:
        return f"You don't have a {item_name} to turn off."

def move_object(self, object_name):
    # Move object command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    if object:
        return object.move()
    else:
        return f"There's no {object_name} here to move."

def attack_creature_with_item(self, creature_name, item_name):
    # Attack creature with item command implementation
    creature = self.game_state.get_player_location().get_creature(creature_name)
    item = self.game_state.get_player().get_item(item_name)
    if creature and item:
        return self.combat.attack(creature, item)
    else:
        return f"You can't attack the {creature_name} with the {item_name}."

def examine_object(self, object_name):
    # Examine command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    if object:
        return object.examine()
    else:
        return f"There's no {object_name} here to examine."

def show_inventory(self):
    # Inventory command implementation
    return self.game_state.get_player().show_inventory()

def eat_item(self, item_name):
    # Eat command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_edible():
            self.game_state.get_player().remove_item(item_name)
            return item.eat()
        else:
            return f"You can't eat the {item_name}."
    else:
        return f"You don't have a {item_name} to eat."

def shout(self):
    # Shout command implementation
    return "You shout loudly. The echo lingers in the air."

def close_door(self, door_name):
    # Close door command implementation
    door = self.game_state.get_player_location().get_door(door_name)
    if door:
        return door.close()
    else:
        return f"There's no {door_name} here to close."

def tie_item_to_object(self, item_name, object_name):
    # Tie item to object command implementation
    item = self.game_state.get_player().get_item(item_name)
    object = self.game_state.get_player_location().get_object(object_name)
    if item and object:
        return object.tie_item(item)
    else:
        return f"You can't tie the {item_name} to the {object_name}."

def pick_item(self, item_name):
    # Pick command implementation
    return self.get_item(item_name)

def kill_self_with_weapon(self, weapon_name):
    # Kill self with weapon command implementation
    weapon = self.game_state.get_player().get_item(weapon_name)
    if weapon:
        return self.combat.self_harm(weapon)
    else:
        return "You don't have the weapon to do this."

def break_item_with_item(self, item_to_break_name, breaking_item_name):
    # Break item with item command implementation
    item_to_break = self.game_state.get_player().get_item(item_to_break_name)
    breaking_item = self.game_state.get_player().get_item(breaking_item_name)
    if item_to_break and breaking_item:
        return item_to_break.break_with(breaking_item)
    else:
        return "You don't have the necessary items to do this."

def attack_creature_with_item(self, creature_name, item_name):
    # Attack creature with item command implementation
    creature = self.game_state.get_player_location().get_creature(creature_name)
    item = self.game_state.get_player().get_item(item_name)
    if creature and item:
        return self.combat.attack(creature, item)
    else:
        return "You can't attack the creature with this item."

def pray(self):
    # Pray command implementation
    return "You start to pray."

def drink_item(self, item_name):
    # Drink command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_drinkable():
            self.game_state.get_player().remove_item(item_name)
            return item.drink()
        else:
            return "You can't drink this item."
    else:
        return "You don't have the item to drink."

def smell_item(self, item_name):
    # Smell command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.smell()
    else:
        return "You don't have the item to smell."

def cut_object_with_weapon(self, object_name, weapon_name):
    # Cut object with weapon command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    weapon = self.game_state.get_player().get_item(weapon_name)
    if object and weapon:
        return object.cut_with(weapon)
    else:
        return "You can't cut the object with this weapon."

def wand_commands(self):
    # Wand commands implementation
    return "The wand glows faintly."

def fall(self):
    # Wand fall command implementation
    return "You command the wand to fall. It thuds against the ground."

def fantasize(self):
    # Wand fantasize command implementation
    return "You command the wand to fantasize. It does nothing."

def fear(self):
    # Wand fear command implementation
    return "You command the wand to fear. It trembles slightly."

def feeble(self):
    # Wand feeble command implementation
    return "You command the wand to become feeble. It dims slightly."

def fence(self):
    # Wand fence command implementation
    return "You command the wand to fence. It does nothing."

def ferment(self):
    # Wand ferment command implementation
    return "You command the wand to ferment. It does nothing."

def fierce(self):
    # Wand fierce command implementation
    return "You command the wand to become fierce. It sparks briefly."

def filch(self):
    # Wand filch command implementation
    return "You command the wand to filch. It does nothing."

def fireproof(self):
    # Wand fireproof command implementation
    return "You command the wand to become fireproof. It glows red briefly."

def float(self):
    # Wand float command implementation
    return "You command the wand to float. It rises a few inches off the ground."

def fluoresce(self):
    # Wand fluoresce command implementation
    return "You command the wand to fluoresce. It emits a soft, radiant light."

def free(self):
    # Wand free command implementation
    return "You command the wand to free. It briefly feels lighter in your hand."

def freeze(self):
    # Wand freeze command implementation
    return "You command the wand to freeze. It chills momentarily."

def frobizz(self):
    # Wand frobizz command implementation
    return "You command the wand to frobizz. It vibrates momentarily."

def frobnoid(self):
    # Wand frobnoid command implementation
    return "You command the wand to frobnoid. It wobbles briefly."

def frobozzle(self):
    # Wand frobozzle command implementation
    return "You command the wand to frobozzle. It remains stubbornly normal."

def fry(self):
    # Wand fry command implementation
    return "You command the wand to fry. It warms up slightly."

def fudge(self):
    # Wand fudge command implementation
    return "You command the wand to fudge. It gets slightly sticky."

def fumble(self):
    # Wand fumble command implementation
    return "You command the wand to fumble. It nearly slips from your grip."

def engage_combat(self, enemy):
    # Engage combat command implementation
    enemy = self.game_state.get_player_location().get_creature(enemy)
    if enemy:
        self.combat.initiate_combat(self.game_state.get_player(), enemy)
        return "You engage in combat!"
    else:
        return "There is no such creature here."

    # Add more commands as needed
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\controller.py  
# controller.py

import curses

class Controller:
    def __init__(self, game):
        self.game = game
        self.actionable_commands = ["look", "use item", "move"]
        self.last_command = None

    def parse_input(self, c):
        # Map the key to an action
        if c == curses.KEY_UP:
            direction = "north"
            command = "move north"
        elif c == curses.KEY_DOWN:
            direction = "south"
            command = "move south"
        elif c == curses.KEY_LEFT:
            direction = "west"
            command = "move west"
        elif c == curses.KEY_RIGHT:
            direction = "east"
            command = "move east"
        elif c == ord('q'):
            command = "quit"
        else:
            return None  # Unhandled key press, return None

        # Save the last command
        self.last_command = command
        return command

    def run_command(self, command):
        if command == "quit":
            return False
        elif command in self.actionable_commands:
            # Call the corresponding function for this command
            getattr(self.game.player, command.replace(" ", "_"))()
        return True
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game.py  
#game.py

from combat_controller import CombatController

class Player:
    def __init__(self, name, health, inventory):
        self._name = name
        self._health = health
        self._inventory = inventory
        self._current_location = None
        self._active_quests = []

    @property
    def name(self):
        return self._name

    @property
    def health(self):
        return self._health

    @property
    def inventory(self):
        return self._inventory

    @property
    def current_location(self):
        return self._current_location

    @current_location.setter
    def current_location(self, location):
        self._current_location = location

    @property
    def active_quests(self):
        return self._active_quests

    def get_item(self, name):
        """
        Get the item with the specified name from the player's inventory.
        Returns the item if found, None otherwise.
        """
        for item in self._inventory:
            if item.name.lower() == name.lower():
                return item
        return None

    def use_item(self, item):
        """
        Use the specified item.
        Returns True if the item was successfully used, False otherwise.
        """
        if item in self._inventory:
            self._inventory.remove(item)
            self._health += item.effect
            return True
        else:
            return False

    def get_quest(self, name):
        """
        Get the quest with the specified name from the player's active quests.
        Returns the quest if found, None otherwise.
        """
        for quest in self._active_quests:
            if quest.name.lower() == name.lower():
                return quest
        return None

    def start_quest(self, quest):
        """
        Start the specified quest.
        Returns True if the quest was successfully started, False otherwise.
        """
        if quest in self._active_quests:
            return False
        else:
            self._active_quests.append(quest)
            return True

    def complete_quest(self, quest):
        """
        Complete the specified quest.
        Returns True if the quest was successfully completed, False otherwise.
        """
        if quest in self._active_quests:
            self._active_quests.remove(quest)
            return True
        else:
            return False

    def add_item(self, item):
        """
        Add the specified item to the player's inventory.
        """
        self._inventory.append(item)

    def move(self, direction):
        """
        Move the player in the specified direction if possible.
        Returns True if the move was successful, False otherwise.
        """
        next_location = self.current_location.get_adjacent_Location(direction)
        if next_location is not None:
            self.current_location = next_location
            return True
        else:
            return False
        
class Location:
    def __init__(self, name, description):
        self._name = name
        self._description = description
        self._adjacent_locations = {}

    @property
    def name(self):
        return self._name

    @property
    def description(self):
        return self._description

    @property
    def adjacent_locations(self):
        return self._adjacent_locations

    def connect_location(self, location, direction):
        """
        Connect this location to the specified location in the specified direction.
        """
        self._adjacent_locations[direction] = location
        location._adjacent_locations[self.get_opposite_direction(direction)] = self

    def get_adjacent_location(self, direction):
        """
        Get the adjacent location in the specified direction.
        Returns the location if found, None otherwise.
        """
        return self._adjacent_locations.get(direction)

    def get_opposite_direction(self, direction):
        """
        Get the opposite direction of the specified direction.
        """
        opposite_directions = {
            "north": "south",
            "south": "north",
            "east": "west",
            "west": "east"
        }
        return opposite_directions.get(direction)

    def move(self, direction):
        """
        Move the player in the specified direction if possible.
        Returns True if the move was successful, False otherwise.
        """
        next_location = self.current_location.get_adjacent_location(direction)
        if next_location is not None:
            self.current_location = next_location
            return True
        else:
            return False

    def get_item(self, name):
        """
        Get the item with the specified name from the player's inventory.
        Returns the item if found, None otherwise.
        """
        for item in self.inventory:
            if item.name.lower() == name.lower():
                return item
        return None

    def use_item(self, item):
        """
        Use the specified item.
        Returns True if the item was successfully used, False otherwise.
        """
        if item in self.inventory:
            self.inventory.remove(item)
            self.health += item.effect
            return True
        else:
            return False

    def get_quest(self, name):
        """
        Get the quest with the specified name from the player's active quests.
        Returns the quest if found, None otherwise.
        """
        for quest in self.active_quests:
            if quest.name.lower() == name.lower():
                return quest
        return None

    def start_quest(self, quest):
        """
        Start the specified quest.
        Returns True if the quest was successfully started, False otherwise.
        """
        if quest in self.active_quests:
            return False
        else:
            self.active_quests.append(quest)
            return True

    def complete_quest(self, quest):
        """
        Complete the specified quest.
        Returns True if the quest was successfully completed, False otherwise.
        """
        if quest in self.active_quests:
            self.active_quests.remove(quest)
            return True
        else:
            return False

    def add_item(self, item):
        """
        Add the specified item to the player's inventory.
        """
        self.inventory.append(item)


class Location:
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.adjacent_Locations = {}

    def connect(self, Location, direction):
        """
        Connect this Location to the specified Location in the specified direction.
        """
        self.adjacent_Locations[direction] = Location
        Location.adjacent_Locations[self.get_opposite_direction(direction)] = self

    def get_adjacent_Location(self, direction):
        """
        Get the adjacent Location in the specified direction.
        Returns the Location if found, None otherwise.
        """
        return self.adjacent_Locations.get(direction)

    def get_description(self):
        """
        Get the description of this Location.
        """
        return self.description

    def get_opposite_direction(self, direction):
        """
        Get the opposite direction of the specified direction.
        """
        if direction == "north":
            return "south"
        elif direction == "south":
            return "north"
        elif direction == "east":
            return "west"
        elif direction == "west":
            return "east"
        else:
            return None


class Item:
    def __init__(self, name, description, effect):
        self.name = name
        self.description = description
        self.effect = effect

    def get_description(self):
        """
        Get the description of this item.
        """
        return self.description

class Quest:
    def __init__(self, name, description, objectives):
        self.name = name
        self.description = description
        self.objectives = objectives

    def get_description(self):
        """
        Get the description of this quest.
        """

        return self.description
    
class SideQuest(Quest):
    def __init__(self, name, description, objectives):
        super().__init__(name, description, objectives)
        self.side_quest_property = None  # Add additional properties specific to side quests

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game_controller.py  
#game_controller.py

from combat_controller import CombatController
from game import Player, Location, Item, Quest

class GameController:
    def __init__(self):
        # Initialize game objects
        self.player = Player("Player", 100, [])
        self.location1 = Location("Start Village", "You are in a peaceful village.")
        self.location2 = Location("Dark Forest", "You have entered a gloomy forest.")
        self.location3 = Location("Mysterious Castle", "You are at the entrance of a grand castle.")
        # Connect locations
        self.location1.connect(self.location2, "north")
        self.location1.connect(self.location3, "east")
        self.location2.connect(self.location1, "south")
        self.location3.connect(self.location1, "west")
        self.player.current_location = self.location1
        self.show_actions = True  # Variable to track if actions should be displayed
        self.combat_controller = CombatController()

    def process_command(self, command):
        # Parse user input
        parts = command.split()
        action = parts[0]
        
        if action == "toggle actions":
            self.show_actions = not self.show_actions
        elif action == "move":            
            direction = parts[1]
            if self.player.move(direction):
                print("Moved to", self.player.current_location.name)
            else:
                print("Cannot move in that direction.")
        elif action == "use":
            item_name = " ".join(parts[1:])
            item = self.player.get_item(item_name)
            if item is not None:
                if self.player.use_item(item):
                    print("Used", item.name)
                else:
                    print("Cannot use that item.")
            else:
                print("Item not found.")
        elif action == "travel":
            destination = parts[1]
            method = " ".join(parts[2:])  # Assuming method can be more than one word
            self.player.travel(destination, method)
        elif action == "start":
            quest_name = " ".join(parts[1:])
            quest = self.player.get_quest(quest_name)
            if quest is not None:
                if self.player.start_quest(quest):
                    print("Started quest:", quest.name)
                else:
                    print("Cannot start that quest.")
            else:
                print("Quest not found.")
        elif action == "complete":
            quest_name = " ".join(parts[1:])
            quest = self.player.get_quest(quest_name)
            if quest is not None:
                if self.player.complete_quest(quest):
                    print("Completed quest:", quest.name)
                else:
                    print("Cannot complete that quest.")
            else:
                print("Quest not found.")
        elif action == "combat":
            enemy_name = " ".join(parts[1:])
            result = self.engage_combat(enemy_name)
            print(result)
        else:
            print("Invalid command.")

    def engage_combat(self, enemy_name):
        enemy = self.player.current_location.get_creature(enemy_name)
        if enemy:
            self.combat_controller.initiate_combat(self.player, enemy)
            return "You engage in combat!"
        else:
            return "There is no such creature here."

    def run_game_loop(self):
        # Start game loop
        while True:
            # Print current location description
            print(self.player.current_location.get_description())
            # Print available actions
            if self.show_actions:
                print("Available actions:")
                print("move <direction>")
                print("use <item>")
                print("start <quest>")
                print("complete <quest>")
                print("travel <destination> <method>")
                print("toggle actions")
                print("combat <enemy>")
            
            # Get user input
            command = input("Enter command: ")
            
            self.process_command(command)
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\items.py  
from game import Item
# items.py

class Item:
    def __init__(self, id, name, description, weight, armor_value, attack_value, durability, rarity, value, usable, stackable, effects=None, range=None, elemental_damage=None, required_level=0, quest_item=False):
        self.id = id
        self.name = name
        self.description = description
        self.weight = weight
        self.armor_value = armor_value
        self.attack_value = attack_value
        self.durability = durability
        self.rarity = rarity
        self.value = value
        self.usable = usable
        self.stackable = stackable
        self.effects = effects
        self.range = range
        self.elemental_damage = elemental_damage
        self.required_level = required_level
        self.quest_item = quest_item

item_type_translation = {
    "WEP": "Weapon",
    "KEY": "Key",
    "ARM": "Armor",
    "POT": "Potion",
    # Add more item type codes and translations as needed
}

item_dict = {
    "00000001": Item("00000001", "Healing Elixir", "A mystical elixir that restores health and mends wounds.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=10, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000002": Item("00000002", "Blade of Destiny", "Forged by ancient sorcery, this blade holds the fate of kingdoms.",
                     weight=5.0, armor_value=0, attack_value=50, durability=100, rarity="Legendary",
                     value=1000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000003": Item("00000003", "Shield of Guardians", "An enchanted shield that shields the bearer from dark forces.",
                     weight=10.0, armor_value=50, attack_value=0, durability=150, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000004": Item("00000004", "Ancient Map of Eldoria", "An ancient map that reveals the hidden realms of Eldoria.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000005": Item("00000005", "Key to Forbidden Citadel", "This key unlocks the gates of the forbidden Citadel.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=20, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=True),
    "00000006": Item("00000006", "Axe of Titan's Fury", "An immense battle axe imbued with the fury of ancient Titans.",
                     weight=8.0, armor_value=0, attack_value=75, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000007": Item("00000007", "Mystic Chest of Enigma", "A mystical chest filled with enigmatic secrets and hidden knowledge.",
                     weight=20.0, armor_value=0, attack_value=0, durability=1, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000008": Item("00000008", "Orb of Divine Insight", "A radiant orb that grants profound wisdom and foresight.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000009": Item("00000009", "Amulet of Arcane Power", "An amulet that channels arcane energy to enhance the wearer's abilities.",
                     weight=0.2, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "0000000A": Item("0000000A", "Ethereal Blaster", "A futuristic blaster that unleashes powerful ethereal energy bolts.",
                     weight=2.0, armor_value=0, attack_value=60, durability=60, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=6, quest_item=False),
    "0000000B": Item("0000000B", "Shadowstrike Blade", "A legendary blade that harnesses the darkness itself, capable of slicing through armor and vanquishing enemies with a single strike.",
                     weight=4.5, armor_value=0, attack_value=80, durability=120, rarity="Epic",
                     value=1500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "0000000C": Item("0000000C", "Crystalized Orb", "A mystic orb that emanates a brilliant light, capable of unlocking hidden powers and revealing the secrets of the arcane.",
                     weight=1.0, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000000D": Item("0000000D", "Radiant Essence", "A shimmering essence infused with celestial energy, radiating with healing properties and restoring vitality to the wounded.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=20, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000000E": Item("0000000E", "Dragonheart Pendant", "A pendant crafted from the heart of a mighty dragon, granting the wearer impenetrable defense and the power to withstand even the fiercest of attacks.",
                     weight=0.8, armor_value=60, attack_value=0, durability=80, rarity="Legendary",
                     value=2000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=15, quest_item=False),
    "0000000F": Item("0000000F", "Tome of Arcane Knowledge", "A tome filled with ancient wisdom and forbidden spells, offering the key to unlocking the secrets of the arcane arts.",
                     weight=2.0, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000010": Item("00000010", "Celestial Longbow", "A bow infused with celestial energy, granting unparalleled accuracy and the ability to unleash devastating arrows imbued with divine power.",
                     weight=3.5, armor_value=0, attack_value=70, durability=150, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000011": Item("00000011", "Frostbite Gauntlets", "Gauntlets forged in the heart of an icy mountain, capable of freezing foes upon contact and providing resistance against frost-based attacks.",
                     weight=1.2, armor_value=40, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000012": Item("00000012", "Thundering Warhammer", "A massive warhammer infused with the power of thunder, generating thunderstorms with each mighty swing and striking fear into the hearts of enemies.",
                     weight=6.0, armor_value=0, attack_value=90, durability=120, rarity="Epic",
                     value=1800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=14, quest_item=False),
    "00000013": Item("00000013", "Luminous Elixir", "An elixir concocted from rare glowing herbs, radiating a soothing aura that restores health and grants temporary resistance to dark magic.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=50, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000014": Item("00000014", "Enchanted Robes", "Robes woven with ancient enchantments, providing exceptional magical protection and enhancing the wearer's spellcasting abilities.",
                     weight=2.5, armor_value=50, attack_value=0, durability=80, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000015": Item("00000015", "Viper's Fang Dagger", "A deadly dagger crafted from the fang of a venomous serpent, delivering swift and precise strikes that inflict deadly poison upon enemies.",
                     weight=0.8, armor_value=0, attack_value=60, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000016": Item("00000016", "Golem Core Shard", "A shard imbued with the essence of a mighty golem, granting the bearer increased strength and the ability to withstand tremendous physical force.",
                     weight=1.5, armor_value=20, attack_value=0, durability=80, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000017": Item("00000017", "Phoenix Feather Quill", "A quill plucked from the majestic wings of a phoenix, enabling the writing of powerful spells and granting the ability to unleash fiery magic.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000018": Item("00000018", "Stormguard Shield", "A shield infused with the power of thunderstorms, creating a protective barrier that absorbs and redirects lightning-based attacks.",
                     weight=4.0, armor_value=70, attack_value=0, durability=150, rarity="Rare",
                     value=900, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "00000019": Item("00000019", "Whisperwind Boots", "Boots crafted from the ethereal essence of the Whisperwind, granting the wearer increased speed and the ability to move in silence.",
                     weight=1.2, armor_value=30, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000001A": Item("0000001A", "Silvermoon Amulet", "An amulet blessed by the moonlight of the Silvermoon, enhancing the bearer's magical prowess and granting the ability to harness moon-based spells.",
                     weight=0.4, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001B": Item("0000001B", "Venomous Vial", "A vial filled with potent venom extracted from deadly creatures, capable of poisoning enemies and causing debilitating effects.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=30, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001C": Item("0000001C", "Astral Compass", "A compass infused with astral energy, guiding the bearer through uncharted realms and revealing hidden paths to distant lands.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001D": Item("0000001D", "Runebound Armor", "Armor adorned with ancient runes, providing mystical protection and increasing the wearer's resistance against magical attacks.",
                     weight=5.0, armor_value=80, attack_value=0, durability=120, rarity="Epic",
                     value=2000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=15, quest_item=False),
    "0000001E": Item("0000001E", "Glimmering Pearl", "A radiant pearl imbued with shimmering magic, granting the ability to illuminate darkness and revealing hidden treasures.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=40, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001F": Item("0000001F", "Flameforged Greatsword", "A greatsword forged in the heart of an ancient volcano, engulfed in everlasting flames and capable of cleaving through any obstacle.",
                     weight=7.0, armor_value=0, attack_value=100, durability=150, rarity="Epic",
                     value=2200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=16, quest_item=False),
    "00000020": Item("00000020", "Dreamweaver Staff", "A staff woven with the essence of dreams, allowing the bearer to delve into the realm of dreams and harness its power to shape reality.",
                     weight=4.5, armor_value=0, attack_value=60, durability=120, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "00000021": Item("00000021", "Serpent's Scale Mail", "Armor crafted from the scales of a mighty serpent, providing exceptional protection against poison and granting resistance to venomous attacks.",
                     weight=6.5, armor_value=90, attack_value=0, durability=150, rarity="Epic",
                     value=2500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=18, quest_item=False),
    "00000022": Item("00000022", "Starlight Cloak", "A cloak infused with the power of the stars, granting the wearer enhanced agility and the ability to blend with the night sky, rendering them invisible.",
                     weight=2.0, armor_value=30, attack_value=0, durability=100, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000023": Item("00000023", "Ancient Relic", "A relic from a bygone era, radiating ancient magic and holding the key to unlocking forgotten knowledge and secrets of the past.",
                     weight=3.0, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000024": Item("00000024", "Swiftwind Boots", "Boots imbued with the swiftness of the wind, granting the wearer increased speed and agility, allowing them to move with unparalleled grace.",
                     weight=1.0, armor_value=20, attack_value=0, durability=80, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000025": Item("00000025", "Cursed Skull Pendant", "A pendant cursed by dark sorcery, granting the bearer increased power but at a terrible cost, consuming their life essence over time.",
                     weight=0.6, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000026": Item("00000026", "Thunderstrike Gauntlets", "Gauntlets infused with the power of thunderstorms, allowing the wearer to summon lightning bolts and unleash devastating electrical attacks.",
                     weight=1.5, armor_value=40, attack_value=0, durability=100, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000027": Item("00000027", "Frostbite Arrows", "Arrows crafted from enchanted ice, capable of freezing enemies upon impact and leaving them vulnerable to subsequent attacks.",
                     weight=0.1, armor_value=0, attack_value=40, durability=100, rarity="Uncommon",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000028": Item("00000028", "Essence of Eternal Flame", "A vial containing the essence of an eternal flame, granting the ability to unleash devastating fire-based attacks and ignite surroundings.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=30, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000031": Item("00000031", "Wooden Shovel", "A basic wooden shovel, suitable for digging small holes and trenches.",
                     weight=2.0, armor_value=0, attack_value=5, durability=50, rarity="Common",
                     value=15, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000032": Item("00000032", "Iron Spade", "An iron spade with a sturdy handle, designed for digging in tough and rocky terrains.",
                     weight=3.5, armor_value=0, attack_value=8, durability=75, rarity="Common",
                     value=25, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000033": Item("00000033", "Oil Lantern", "A traditional oil-powered lantern that provides a steady source of light in dark environments.",
                     weight=1.5, armor_value=0, attack_value=0, durability=30, rarity="Common",
                     value=10, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000034": Item("00000034", "Iron Key", "A simple iron key that can unlock various standard locks.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000035": Item("00000035", "Leather Gloves", "A pair of simple leather gloves, providing basic protection for the hands.",
                     weight=0.3, armor_value=5, attack_value=0, durability=20, rarity="Common",
                     value=8, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000036": Item("00000036", "Iron Keyring", "A keyring made of iron, capable of holding multiple keys.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=3, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000037": Item("00000037", "Leather Pouch", "A small leather pouch, useful for storing coins, gems, and other small items.",
                     weight=0.5, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000038": Item("00000038", "Rope", "A sturdy rope made of natural fibers, suitable for various utility purposes.",
                     weight=1.0, armor_value=0, attack_value=0, durability=50, rarity="Common",
                     value=10, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000039": Item("00000039", "Cooking Pot", "A medium-sized cooking pot made of cast iron, perfect for preparing meals during outdoor adventures.",
                     weight=2.5, armor_value=0, attack_value=0, durability=40, rarity="Common",
                     value=15, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003A": Item("0000003A", "Ink Bottle", "A small glass bottle filled with ink, commonly used for writing and drawing.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003B": Item("0000003B", "Chalk", "A piece of chalk made from compressed calcium carbonate, often used for writing on blackboards or marking paths.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003C": Item("0000003C", "Glass Bottle", "A transparent glass bottle with a cork stopper, suitable for holding liquids or small items.",
                     weight=0.4, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003D": Item("0000003D", "Wooden Bowl", "A simple wooden bowl, useful for holding food or other small items.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=3, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003E": Item("0000003E", "Fishing Net", "A sturdy net made of woven fibers, designed for catching fish or other aquatic creatures.",
                     weight=1.2, armor_value=0, attack_value=0, durability=30, rarity="Common",
                     value=12, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003F": Item("0000003F", "Iron Buckle", "A sturdy iron buckle commonly used for fastening belts or straps.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000040": Item("00000040", "Leather Belt", "A simple leather belt with a metal buckle, used to hold clothing or secure equipment.",
                     weight=0.4, armor_value=2, attack_value=0, durability=15, rarity="Common",
                     value=6, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000041": Item("00000041", "Wooden Mug", "A sturdy wooden mug, suitable for holding and drinking beverages.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=3, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000042": Item("00000042", "Flint and Steel", "A set consisting of a small piece of flint and a metal striker, used to create sparks and start fires.",
                     weight=0.2, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=7, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000043": Item("00000043", "Wooden Spoon", "A basic wooden spoon, useful for stirring and mixing ingredients while cooking.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=2, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000044": Item("00000044", "Traveler's Journal", "A compact journal with blank pages, intended for recording travel experiences and observations.",
                     weight=0.6, armor_value=0, attack_value=0, durability=15, rarity="Common",
                     value=8, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000045": Item("00000045", "Cloth Bandage", "A soft cloth bandage used to wrap wounds and provide basic medical care.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=3, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000046": Item("00000046", "Iron Nails", "A small bundle of iron nails, commonly used for construction or repairing items.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=4, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000047": Item("00000047", "Wooden Comb", "A simple wooden comb, used for grooming and styling hair.",
                     weight=0.2, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=2, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000048": Item("00000048", "Fishing Hook", "A sharp fishing hook attached to a line, used for catching fish.",
                     weight=0.1, armor_value=0, attack_value=2, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000049": Item("00000049", "Enchanted Cloak", "A magical cloak that provides protection against the elements.",
                     weight=2.0, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "0000004A": Item("0000004A", "Satchel of Holding", "A satchel enchanted with a dimensional pocket, allowing for increased storage capacity.",
                     weight=1.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004B": Item("0000004B", "Glowstone Pendant", "A pendant infused with magical energy, emitting a soft glow in dark environments.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004C": Item("0000004C", "Smoke Bomb", "A small explosive device that creates a dense cloud of smoke, useful for stealth and distraction.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004D": Item("0000004D", "Mystic Rune", "An ancient rune inscribed on a small stone tablet, believed to hold mystical powers.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004E": Item("0000004E", "Pocket Watch", "A finely crafted pocket watch, allowing for accurate timekeeping.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004F": Item("0000004F", "Elven Tonic", "A special elven brew that provides temporary enhancements to agility and reflexes.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=250, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000050": Item("00000050", "Ancient Relic", "A mysterious artifact from a long-lost civilization, holding untold secrets.",
                     weight=5.0, armor_value=0, attack_value=0, durability=1, rarity="Rare",
                     value=1000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000051": Item("00000051", "Crystal Staff", "A staff carved from a rare crystal, amplifying magical abilities.",
                     weight=4.0, armor_value=0, attack_value=50, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000052": Item("00000052", "Dwarven Ale", "A strong and flavorful ale brewed by skilled dwarven craftsmen.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000053": Item("00000053", "Lucky Charm", "A small charm believed to bring good fortune and increase luck.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000054": Item("00000054", "Ranger's Quiver", "A specially designed quiver that increases arrow capacity and quickens reloading.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000055": Item("00000055", "Silk Gloves", "Elegant gloves made from fine silk, providing dexterity and comfort.",
                     weight=0.2, armor_value=5, attack_value=0, durability=20, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000056": Item("00000056", "Harmonious Flute", "A beautifully crafted wooden flute, capable of producing enchanting melodies.",
                     weight=0.4, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000057": Item("00000057", "Poisoned Dagger", "A small dagger coated with a deadly poison, inflicting additional damage over time.",
                     weight=0.8, armor_value=0, attack_value=30, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000058": Item("00000058", "Thieves' Tools", "A set of tools commonly used by skilled thieves for lockpicking and stealthy activities.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000059": Item("00000059", "Wanderer's Boots", "Sturdy leather boots designed for long journeys, providing comfort and endurance.",
                     weight=1.2, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005A": Item("0000005A", "Soulstone", "A small crystal imbued with ancient magic, capable of storing the essence of fallen creatures.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005B": Item("0000005B", "Hunter's Bow", "A well-crafted bow favored by hunters, providing increased accuracy and range.",
                     weight=2.0, armor_value=0, attack_value=40, durability=60, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005C": Item("0000005C", "Potion of Invisibility", "A magical potion that grants temporary invisibility to the drinker.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005D": Item("0000005D", "Elven Bow", "An elegant bow crafted by skilled elven archers, granting increased precision and power.",
                     weight=1.8, armor_value=0, attack_value=45, durability=70, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=7, quest_item=False),
    "0000005E": Item("0000005E", "Wand of Fireballs", "A wand infused with fire magic, allowing the wielder to unleash powerful fireballs.",
                     weight=0.8, armor_value=0, attack_value=55, durability=60, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000005F": Item("0000005F", "Elixir of Strength", "A potent elixir that temporarily enhances the drinker's physical strength.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000060": Item("00000060", "Enchanted Necklace", "A necklace adorned with enchanted gemstones, bestowing magical protection.",
                     weight=0.6, armor_value=15, attack_value=0, durability=40, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000061": Item("00000061", "Bard's Lute", "A musical instrument favored by bards, capable of enchanting listeners with its melodies.",
                     weight=1.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000062": Item("00000062", "Cloak of Shadows", "A dark cloak that grants the wearer enhanced stealth and evasion abilities.",
                     weight=1.5, armor_value=20, attack_value=0, durability=50, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000063": Item("00000063", "Scroll of Teleportation", "A magical scroll that instantly transports the reader to a previously marked location.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000064": Item("00000064", "Silk Robes", "Exquisite robes made from fine silk, providing magical affinity and comfort.",
                     weight=2.0, armor_value=15, attack_value=0, durability=30, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000065": Item("00000065", "Book of Enchantments", "A thick book containing ancient knowledge of enchantments and magical rituals.",
                     weight=1.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000066": Item("00000066", "Trap Kit", "A set of tools used for setting up traps and mechanisms to deter intruders.",
                     weight=1.2, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000067": Item("00000067", "Enchanted Bracelet", "A bracelet infused with magical energies, enhancing the wearer's spellcasting abilities.",
                     weight=0.4, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000068": Item("00000068", "Phoenix Feather", "A feather from a mythical phoenix, said to possess regenerative properties.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000069": Item("00000069", "Crystal Shard", "A shard of rare crystal with various magical properties.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006A": Item("0000006A", "Sneak's Dagger", "A small, lightweight dagger favored by stealthy assassins.",
                     weight=0.6, armor_value=0, attack_value=25, durability=40, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006B": Item("0000006B", "Sorcerer's Hat", "A pointed hat worn by sorcerers and wizards, enhancing magical potency.",
                     weight=0.3, armor_value=5, attack_value=0, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006C": Item("0000006C", "Sleeping Bag", "A portable and comfortable sleeping bag for resting during long journeys.",
                     weight=1.0, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006D": Item("0000006D", "Elixir of Clarity", "A magical elixir that clears the mind and enhances focus and concentration.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006E": Item("0000006E", "Explorer's Hat", "A wide-brimmed hat favored by adventurers and explorers, providing protection from the sun and rain.",
                     weight=0.4, armor_value=5, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006F": Item("0000006F", "Book of Shadows", "A tome containing dark and forbidden knowledge, granting access to powerful dark magic spells.",
                     weight=1.5, armor_value=0, attack_value=0, durability=1, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000070": Item("00000070", "Horn of Summoning", "A magical horn used to summon and communicate with mystical creatures.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000071": Item("00000071", "Spider Silk Gloves", "Gloves made from the silk of giant spiders, providing increased dexterity and resistance to web-based attacks.",
                     weight=0.3, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000072": Item("00000072", "Gem of Power", "A precious gem imbued with raw magical energy, used for various enchantments and rituals.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000073": Item("00000073", "Blessed Water", "Water that has been blessed by divine entities, capable of healing wounds and curing ailments.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000074": Item("00000074", "Moonstone Ring", "A ring adorned with a moonstone, enhancing the wearer's magical abilities during nighttime.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000075": Item("00000075", "Crystal Orb", "A crystal orb used by seers and fortune-tellers to glimpse into the future.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000076": Item("00000076", "Warding Talisman", "A talisman inscribed with protective runes, providing enhanced defense against magical attacks.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000077": Item("00000077", "Bandit Mask", "A mask worn by bandits and rogues to conceal their identity and intimidate their victims.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000078": Item("00000078", "Skull Lantern", "A lantern made from a human skull, emitting an eerie glow that repels undead creatures.",
                     weight=1.0, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000079": Item("00000079", "Mystic Feather", "A feather infused with magical energies, capable of redirecting projectiles and providing limited levitation.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=120, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007A": Item("0000007A", "Enchanted Mirror", "A mystical mirror that reveals hidden truths and reflects the soul.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Rare",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007B": Item("0000007B", "Soulstone Pendant", "A pendant containing a captured soul, which grants the wearer increased vitality.",
                     weight=0.3, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007C": Item("0000007C", "Whispering Dagger", "A dagger forged by ancient assassins, rumored to whisper secrets to its wielder.",
                     weight=0.8, armor_value=0, attack_value=30, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007D": Item("0000007D", "Elven Bow", "A finely crafted bow of elven design, known for its accuracy and long range.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007E": Item("0000007E", "Scroll of Knowledge", "A scroll containing ancient wisdom and knowledge, granting insights to its reader.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007F": Item("0000007F", "Ring of Protection", "A ring imbued with protective enchantments, increasing the wearer's defense.",
                     weight=0.1, armor_value=3, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000080": Item("00000080", "Dragon Scale Armor", "Armor crafted from the scales of a mighty dragon, providing exceptional protection.",
                     weight=8.0, armor_value=70, attack_value=0, durability=120, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000081": Item("00000081", "Invisibility Cloak", "A cloak that grants the ability to become invisible, allowing the wearer to sneak undetected.",
                     weight=1.2, armor_value=8, attack_value=0, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000082": Item("00000082", "Frost Shard", "A shard of ice imbued with the power of frost, capable of freezing enemies on contact.",
                     weight=0.4, armor_value=0, attack_value=20, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Frost", required_level=0, quest_item=False),
    "00000083": Item("00000083", "Wand of Fireballs", "A wand that unleashes powerful fireballs, engulfing enemies in flames.",
                     weight=0.6, armor_value=0, attack_value=25, durability=40, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "00000084": Item("00000084", "Book of Shadows", "A forbidden tome containing dark and arcane knowledge, empowering the reader with forbidden spells.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000085": Item("00000085", "Amulet of the Moon", "An amulet infused with lunar magic, enhancing the wearer's mystical abilities during the night.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000086": Item("00000086", "Hunter's Crossbow", "A crossbow favored by skilled hunters, designed for precision and ease of use.",
                     weight=3.0, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000087": Item("00000087", "Druidic Staff", "A staff infused with the power of nature, allowing the wielder to channel the elements.",
                     weight=2.5, armor_value=0, attack_value=35, durability=60, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000088": Item("00000088", "Shadow Cloak", "A cloak woven from shadowy fabric, granting the wearer enhanced stealth and agility.",
                     weight=1.2, armor_value=6, attack_value=0, durability=60, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000089": Item("00000089", "Elixir of Agility", "An elixir that enhances the user's speed and reflexes, granting increased agility.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008A": Item("0000008A", "Enchanted Gloves", "Gloves infused with enchantments, increasing the wearer's dexterity and magical prowess.",
                     weight=0.5, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008B": Item("0000008B", "Holy Relic", "A sacred relic imbued with divine energy, capable of repelling dark forces.",
                     weight=0.8, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008C": Item("0000008C", "Sonic Boom Boots", "Boots that harness the power of sound, allowing the wearer to unleash devastating shockwaves.",
                     weight=1.5, armor_value=3, attack_value=0, durability=60, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008D": Item("0000008D", "Venomous Blade", "A blade coated with deadly venom, causing additional poison damage to enemies.",
                     weight=1.0, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Poison", required_level=0, quest_item=False),
    "0000008E": Item("0000008E", "Glowing Crystal", "A crystal that emits a soft, enchanting glow, providing illumination in the darkest of places.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008F": Item("0000008F", "Enchanted Bowtie", "A stylish bowtie enchanted with magic, granting the wearer a touch of elegance and charm.",
                     weight=0.1, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000090": Item("00000090", "Oracle's Staff", "A staff infused with the power of foresight, enabling the wielder to see into the future.",
                     weight=2.0, armor_value=0, attack_value=30, durability=60, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000091": Item("00000091", "Gauntlets of Strength", "Gauntlets imbued with ancient strength-enhancing enchantments, granting incredible power.",
                     weight=1.5, armor_value=5, attack_value=0, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000092": Item("00000092", "Mysterious Elixir", "A mysterious elixir with unknown properties, rumored to bestow temporary magical abilities.",
                     weight=0.4, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=400, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000093": Item("00000093", "Shield of Reflection", "A shield that reflects incoming projectiles and spells, providing enhanced defense.",
                     weight=4.0, armor_value=60, attack_value=0, durability=90, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000094": Item("00000094", "Moonstone Necklace", "A necklace adorned with a shimmering moonstone, granting heightened magical abilities under moonlight.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000095": Item("00000095", "Cross Pendant", "A pendant bearing the symbol of faith, providing protection against undead creatures.",
                     weight=0.3, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000096": Item("00000096", "Thunderstorm Tome", "A powerful tome that conjures a raging thunderstorm, striking down enemies with lightning bolts.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "00000097": Item("00000097", "Assassin's Hood", "A hood favored by assassins, providing increased stealth and critical strike chance.",
                     weight=0.8, armor_value=4, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000098": Item("00000098", "Crimson Orchid", "A rare orchid with crimson petals, possessing healing properties when consumed.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000099": Item("00000099", "Enchanted Harp", "A harp enchanted with magical melodies, capable of soothing hearts and calming minds.",
                     weight=2.0, armor_value=0, attack_value=25, durability=60, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009A": Item("0000009A", "Glimmering Dagger", "A dagger that glimmers with ethereal light, striking fear into the hearts of enemies.",
                     weight=0.6, armor_value=0, attack_value=35, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009B": Item("0000009B", "Crystal Shield", "A shield crafted from enchanted crystals, providing excellent magical defense.",
                     weight=5.0, armor_value=50, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009C": Item("0000009C", "Stealthy Boots", "Boots designed for silent movement, allowing the wearer to move undetected in the shadows.",
                     weight=1.2, armor_value=3, attack_value=0, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009D": Item("0000009D", "Scepter of Light", "A powerful scepter emanating a radiant light, capable of banishing darkness and dispelling evil.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009E": Item("0000009E", "Ancient Scroll", "An ancient scroll inscribed with forgotten knowledge, containing powerful incantations.",
                     weight=0.3, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009F": Item("0000009F", "Enchanted Necklace", "A necklace adorned with enchantments, enhancing the wearer's magical abilities.",
                     weight=0.2, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A0": Item("000000A0", "Vampiric Blade", "A blade that drains the life force of enemies, granting health to the wielder with each strike.",
                     weight=1.2, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A1": Item("000000A1", "Arcane Runestone", "A runestone inscribed with arcane symbols, empowering spells and increasing magical potency.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A2": Item("000000A2", "Feathered Hat", "A hat adorned with colorful feathers, bestowing a touch of elegance and style.",
                     weight=0.3, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A3": Item("000000A3", "Harmony Medallion", "A medallion that radiates harmony, providing increased resistance against disruptive magic.",
                     weight=0.2, armor_value=2, attack_value=0, durability=20, rarity="Rare",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A4": Item("000000A4", "Singing Sword", "A sword that sings with a melodic hum, resonating with the wielder's battle prowess.",
                     weight=2.5, armor_value=0, attack_value=50, durability=80, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A5": Item("000000A5", "Gem of Enlightenment", "A gem infused with ancient wisdom, granting profound insights and increased intellect.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A6": Item("000000A6", "Enchanted Boots", "Boots enchanted with magical swiftness, enhancing the wearer's speed and mobility.",
                     weight=1.0, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A7": Item("000000A7", "Nightshade Dagger", "A dagger infused with the essence of shadows, granting increased critical strike chance under the cover of darkness.",
                     weight=0.8, armor_value=0, attack_value=35, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A8": Item("000000A8", "Spellbound Grimoire", "A grimoire filled with enchantments and magical formulas, enabling the casting of advanced spells.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A9": Item("000000A9", "Phoenix Feather", "A feather from a mythical phoenix, radiating intense heat and capable of igniting fires.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000AA": Item("000000AA", "Crystalized Bow", "A bow crafted from crystalized energy, shooting arrows infused with magical power.",
                     weight=2.5, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AB": Item("000000AB", "Glowing Lantern", "A lantern that emits a gentle, soothing glow, illuminating the surroundings.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Common",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AC": Item("000000AC", "Crystal Blade", "A blade crafted from enchanted crystals, capable of channeling magical energy for devastating attacks.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AD": Item("000000AD", "Oracle's Robe", "A robe worn by seers and prophets, empowering the wearer with heightened magical perception.",
                     weight=2.0, armor_value=10, attack_value=0, durability=80, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AE": Item("000000AE", "Soulbound Necklace", "A necklace imbued with the essence of a powerful soul, providing protection against dark forces.",
                     weight=0.3, armor_value=3, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AF": Item("000000AF", "Thunderstrike Hammer", "A mighty hammer capable of summoning thunderstorms and unleashing powerful lightning strikes.",
                     weight=8.0, armor_value=0, attack_value=55, durability=90, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "000000B0": Item("000000B0", "Enchanted Quiver", "A quiver enchanted with magical properties, providing an endless supply of arrows.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B1": Item("000000B1", "Scroll of Teleportation", "A scroll that allows the user to instantly teleport to a known location.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B2": Item("000000B2", "Golem's Heartstone", "A heart-shaped stone extracted from a defeated golem, radiating with residual magical energy.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B3": Item("000000B3", "Silent Boots", "Boots designed for stealthy movement, muffling footsteps and suppressing sound.",
                     weight=1.2, armor_value=4, attack_value=0, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B4": Item("000000B4", "Fiery Essence", "A vial containing a potent essence of fire, capable of enhancing fire-based spells and attacks.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000B5": Item("000000B5", "Enchanted Cuffs", "Cuffs adorned with enchantments, granting the wearer increased resistance to magic.",
                     weight=0.4, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B6": Item("000000B6", "Mystic Cloak", "A cloak woven with intricate mystical patterns, enhancing the wearer's magical abilities.",
                     weight=1.5, armor_value=6, attack_value=0, durability=70, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B7": Item("000000B7", "Sapphire Pendant", "A pendant adorned with a sparkling sapphire, enhancing the wearer's magical aptitude.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B8": Item("000000B8", "Spiritbound Bow", "A bow infused with the essence of ethereal spirits, granting increased accuracy and critical strike chance.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B9": Item("000000B9", "Cursed Talisman", "A talisman imbued with a dark curse, amplifying the wearer's dark magic but at a cost.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BA": Item("000000BA", "Glowing Mushroom", "A luminescent mushroom that emits a soft glow, providing light in dark places.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BB": Item("000000BB", "Enchanted Mirror", "A mirror enchanted with a spell of reflection, capable of reflecting magical attacks.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BC": Item("000000BC", "Helm of the Berserker", "A helm infused with the spirit of a raging berserker, enhancing the wearer's strength and ferocity in battle.",
                     weight=2.0, armor_value=8, attack_value=0, durability=80, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BD": Item("000000BD", "Crystal of Resilience", "A crystal that fortifies the wearer's resilience, reducing the duration of negative status effects.",
                     weight=0.2, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BE": Item("000000BE", "Nightshade Elixir", "An elixir brewed from rare nightshade plants, providing temporary heightened senses and perception.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BF": Item("000000BF", "Mystic Amulet", "An amulet infused with ancient mystical energies, amplifying the wearer's magical abilities.",
                     weight=0.1, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C0": Item("000000C0", "Enchanted Gloves", "Gloves imbued with enchantments, granting the wearer increased dexterity and magical finesse.",
                     weight=0.5, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C1": Item("000000C1", "Silent Shiv", "A small, deadly Shiv that makes no sound when wielded, perfect for stealthy assassinations.",
                     weight=0.3, armor_value=0, attack_value=25, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C2": Item("000000C2", "Wand of Frost", "A wand that unleashes icy blasts, freezing enemies and slowing their movements.",
                     weight=0.4, armor_value=0, attack_value=30, durability=40, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Frost", required_level=0, quest_item=False),
    "000000C3": Item("000000C3", "Ethereal Robe", "A robe crafted from ethereal fabric, enhancing the wearer's magical abilities and providing ethereal protection.",
                     weight=1.5, armor_value=6, attack_value=0, durability=70, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C4": Item("000000C4", "Vampiric Amulet", "An amulet that feeds on the life force of enemies, granting health to the wearer with each successful attack.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C5": Item("000000C5", "Flaming Sword", "A sword imbued with the essence of fire, engulfing enemies in flames upon striking.",
                     weight=2.0, armor_value=0, attack_value=35, durability=60, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000C6": Item("000000C6", "Glyphed Dagger", "A dagger inscribed with ancient glyphs, increasing critical strike chance and amplifying magical damage.",
                     weight=0.6, armor_value=0, attack_value=30, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C7": Item("000000C7", "Crystal Staff", "A staff crafted from enchanted crystals, channeling the power of arcane energy with great precision.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C8": Item("000000C8", "Soulstone Ring", "A ring containing a captured soul, providing enhanced magical abilities to the wearer.",
                     weight=0.1, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C9": Item("000000C9", "Nature's Embrace", "A charm infused with the essence of nature, granting the wearer increased vitality and affinity with flora and fauna.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CA": Item("000000CA", "Whisperwind Bow", "A bow favored by skilled archers, known for its whisper-quiet string and deadly accuracy.",
                     weight=2.5, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CB": Item("000000CB", "Chaos Stone", "A stone infused with chaotic energy, unleashing unpredictable elemental effects upon activation.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CC": Item("000000CC", "Enchanted Earrings", "Earrings adorned with enchantments, increasing the wearer's magical affinity and spellcasting proficiency.",
                     weight=0.2, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CD": Item("000000CD", "Soulbound Gauntlets", "Gauntlets imbued with the essence of powerful souls, increasing the wearer's strength and resilience.",
                     weight=1.0, armor_value=5, attack_value=0, durability=60, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CE": Item("000000CE", "Stormcaller Ring", "A ring that harnesses the power of storms, allowing the wearer to summon lightning and control the weather.",
                     weight=0.1, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "000000CF": Item("000000CF", "Glimmering Crown", "A crown adorned with glimmering jewels, representing nobility and granting enhanced magical presence.",
                     weight=0.5, armor_value=3, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D0": Item("000000D0", "Phantom Blade", "A blade that phases in and out of reality, allowing the wielder to bypass defenses and strike ethereal targets.",
                     weight=1.5, armor_value=0, attack_value=35, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D1": Item("000000D1", "Voidstone Pendant", "A pendant containing a fragment of the void, providing increased resistance to dark magic.",
                     weight=0.2, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D2": Item("000000D2", "Crescent Blade", "A curved blade resembling the moon's crescent, enhancing the wielder's agility and critical strike chance.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D3": Item("000000D3", "Arcane Bracelet", "A bracelet infused with arcane energy, enhancing the wearer's spellcasting speed and mana regeneration.",
                     weight=0.3, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D4": Item("000000D4", "Duskblade", "A blade forged from twilight steel, radiating with a haunting aura and increasing shadow-based attacks.",
                     weight=2.0, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D5": Item("000000D5", "Enchanted Chalice", "A chalice filled with magical energy, restoring the user's health and mana when consumed.",
                     weight=0.5, armor_value=0, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D6": Item("000000D6", "Spectral Cloak", "A cloak woven from spectral threads, providing increased evasion and resistance against ethereal attacks.",
                     weight=1.5, armor_value=5, attack_value=0, durability=70, rarity="Uncommon",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D7": Item("000000D7", "Arcane Talisman", "A talisman infused with arcane magic, amplifying the wearer's spellcasting potency and accuracy.",
                     weight=0.2, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D8": Item("000000D8", "Luminous Earrings", "Earrings adorned with radiant gems, bestowing a radiant aura and increased magical power.",
                     weight=0.2, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D9": Item("000000D9", "Venomous Vial", "A vial containing potent venom, coating weapons with deadly poison upon application.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage="Poison", required_level=0, quest_item=False),
    "000000DA": Item("000000DA", "Sage's Tome", "A tome filled with ancient wisdom and knowledge, increasing the wearer's intellect and spellcasting abilities.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DB": Item("000000DB", "Crystal Shard", "A shard of enchanted crystal, radiating with residual magical energy.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DC": Item("000000DC", "Arcane Bracers", "Bracers infused with arcane power, increasing the wearer's spellcasting speed and accuracy.",
                     weight=0.4, armor_value=3, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DD": Item("000000DD", "Whispering Dagger", "A dagger that whispers secrets to the wielder, increasing critical strike chance and granting sneak attack bonuses.",
                     weight=0.5, armor_value=0, attack_value=30, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DE": Item("000000DE", "Scepter of Shadows", "A scepter shrouded in darkness, channeling the power of shadows and granting control over the unseen.",
                     weight=2.0, armor_value=0, attack_value=40, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DF": Item("000000DF", "Crown of Illusions", "A crown that creates illusions and conceals the wearer's true identity, granting increased deception and stealth abilities.",
                     weight=0.8, armor_value=2, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000E0": Item("000000E0", "Crystal of Tranquility", "A crystal that emits a calming aura, reducing stress and increasing focus.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False)
}

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\main.py  
# main.py

from game_controller import GameController

def main():
    game_controller = GameController()
    game_controller.run_game_loop()

if __name__ == "__main__":
    main()REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\puzzles.py  
class Puzzle:
    def __init__(self, description, solution):
        self.description = description
        self.solution = solution
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\quests.py  
#quests.py

from game import Quest, SideQuest
from story import story

# Define quests and side quests
main_quest = Quest("Unravel the Mystery", "Embark on a journey to unravel the mystery behind the lost civilization.", ["Unravel the Mystery"])
decipher_quest = Quest("Decipher the Ancient Text", "Decipher the encrypted portion of the tome to gain deeper knowledge.", ["Decipher the Ancient Text"])
allies_quest = Quest("Seek Allies", "Seek out potential allies who can aid you in your quest to protect Lumina.", ["Seek Allies"])
confrontation_quest = Quest("Confront Lord Vexis", "Prepare for the final confrontation and defeat Lord Vexis to save Lumina.", ["Confront Lord Vexis"])

first_barrier_side_quest = SideQuest("Unearth the Lost Art of Deciphering", "Find and learn the lost art of deciphering the arcane script.", ["Unearth the Lost Art of Deciphering"])
evidence_side_quest = SideQuest("Gather Evidence of the Threat", "Search for evidence that connects Lord Vexis's ambitions with the prophetic warning.", ["Gather Evidence of the Threat"])
unexpected_ally_side_quest = SideQuest("Earn the Trust of an Unexpected Ally", "Prove your worth and earn the trust of Eris, the enigmatic warrior-mage.", ["Earn the Trust of an Unexpected Ally"])
hidden_secrets_side_quest = SideQuest("Search for Hidden Secrets", "Explore the Royal Library and uncover the hidden chambers filled with scrolls of lost knowledge.", ["Search for Hidden Secrets"])
journey_to_shrine_side_quest = SideQuest("Embark on the Journey to the Hidden Shrine", "Embark on a perilous journey to find the hidden shrine linked to the lost civilization.", ["Embark on the Journey to the Hidden Shrine"])

blank_quest = Quest("No Active Quests", "You currently have no active quests.", [])

# Assign the blank quest for sections without quests
for section in story.values():
    if "quest" not in section:
        section["quest"] = blank_quest
    if "side_quest" not in section:
        section["side_quest"] = blank_quest

# Assign quests and side quests to the corresponding story sections
story["start"]["quest"] = main_quest
story["decision_to_learn"]["quest"] = decipher_quest
story["first_barrier"]["side_quest"] = first_barrier_side_quest
story["learning_the_language"]["side_quest"] = decipher_quest
story["first_insight"]["side_quest"] = hidden_secrets_side_quest
story["evidence_of_threat"]["side_quest"] = evidence_side_quest
story["burden_of_knowledge"]["quest"] = allies_quest
story["seeking_allies"]["quest"] = allies_quest
story["doubt_and_rejection"]["side_quest"] = unexpected_ally_side_quest
story["unexpected_ally"]["side_quest"] = unexpected_ally_side_quest
story["solidifying_the_partnership"]["side_quest"] = unexpected_ally_side_quest
story["curiosity_piqued"]["quest"] = hidden_secrets_side_quest
story["unexpected_allies"]["side_quest"] = hidden_secrets_side_quest
story["realizing_common_goals"]["side_quest"] = hidden_secrets_side_quest
story["first_shared_adventure"]["quest"] = journey_to_shrine_side_quest
story["revelation_of_eris_past"]["side_quest"] = journey_to_shrine_side_quest


REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\save_load.py  
import os
import json
from .game import Player, Item

class SaveLoad:
    @staticmethod
    def save_game(player, save_file='save.json'):
        """
        Save the game state to a file.
        """
        try:
            save_dir = os.path.dirname(save_file)
            if save_dir and not os.path.exists(save_dir):
                os.makedirs(save_dir)
            with open(save_file, 'w') as f:
                game_state = {
                    'player': {
                        'name': player.name,
                        'health': player.health,
                        'inventory': [item.__dict__ for item in player.inventory],
                    },
                    # Add other game state data as needed
                }
                json.dump(game_state, f)
        except Exception as e:
            print(f"Error while saving the game: {e}")

    @staticmethod
    def load_game(save_file='save.json'):
        """
        Load the game state from a file.
        """
        if not os.path.exists(save_file):
            print(f"No save file found at {save_file}")
            return None
        try:
            with open(save_file, 'r') as f:
                saved_data = json.load(f)
                player_data = saved_data.get('player')
                if player_data:
                    player = Player(
                        name=player_data.get('name'),
                        health=player_data.get('health'),
                        inventory=[Item(**item_data) for item_data in player_data.get('inventory')],
                    )
                    # Add other game state loading as needed
                    return player
                else:
                    print("Invalid save file format: Missing player data")
                    return None
        except Exception as e:
            print(f"Error while loading the game: {e}")
            return None
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\scene.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\story.py  
#story.py
'''
class Story:
    def __init__(self, name, description):
        self.name = name
        self.description = description

story = {
    "start": Story("Start", "In the royal city of Lumina, renowned for its vibrant culture and ancient history, our protagonist Caelum, an erudite scholar, comes across an enigmatic tome that hints at a lost civilization. His journey to unravel this mystery commences, unknowingly drawing the attention of the nefarious Lord Vexis."),
    "decision_to_learn": Story("Decision to Learn", "Deciding that the knowledge in the tome is too crucial to be left unearthed, Caelum dedicates himself to deciphering the ancient text, realizing this could be a turning point in his life."),
    "first_barrier": Story("First Barrier", "Caelum faces his first obstacle when he finds a portion of the tome encrypted in an arcane script. He must unearth the lost art of deciphering this ancient language."),
    "learning_the_language": Story("Learning the Language", "After weeks of study and cross-referencing ancient texts, Caelum manages to gain a basic understanding of the lost language, making it possible to slowly decrypt the tome."),
    "first_insight": Story("First Insight", "The first decrypted passages reveal knowledge far beyond Lumina's current understanding of magic and technology. This fuels Caelum's curiosity even further."),
    "evidence_of_threat": Story("Evidence of Threat", "While diving deeper into the translated text, Caelum stumbles upon a prophetic warning about a great darkness that once threatened the lost civilization. It bears unsettling similarities to Lord Vexis’s ambitions."),
    "burden_of_knowledge": Story("Burden of Knowledge", "Understanding the magnitude of the threat, Caelum feels the weight of responsibility. His quest is no longer just about curiosity but about protecting Lumina from a potentially devastating fate."),
    "seeking_allies": Story("Seeking Allies", "Knowing the enormity of his task, Caelum realizes he needs allies. He decides to share his discoveries with trusted scholars and influencers within Lumina."),
    "doubt_and_rejection": Story("Doubt and Rejection", "To his disappointment, Caelum's warnings are met with skepticism and disbelief from many. Some even accuse him of fearmongering and alarmism."),
    "unexpected_ally": Story("Unexpected Ally", "Just when Caelum is losing hope, Eris, who has overheard his attempts to convince others, approaches him. She believes in his cause and offers her help."),
    "solidifying_the_partnership": Story("Solidifying the Partnership", "Eris and Caelum form a pact to explore the secrets of the lost civilization together and stand against the darkness that looms over Lumina."),
    "curiosity_piqued": Story("Curiosity Piqued", "Caelum delves into the esoteric texts and discovers tantalizing hints of powerful magic and advanced knowledge possessed by the lost civilization. His desire to learn more solidifies his resolve to pursue this quest."),
    "hidden_secrets": Story("Hidden Secrets", "While deciphering the tome, Caelum discovers the existence of hidden chambers within the Royal Library. After a relentless search, they unearth a room filled with scrolls that disclose the lost civilization’s secrets. This revelation strengthens their resolve and enhances their abilities."),
    "understanding_the_secrets": Story("Understanding the Secrets", "The group dedicates days to studying the scrolls, gaining insights into the lost civilization's technology, magic, culture, and the catastrophe that led to their downfall."),
    "first_application_of_new_knowledge": Story("First Application of New Knowledge", "Using the newfound knowledge, Caelum and Eris experiment with ancient spells and devices, boosting their capabilities and defenses."),
    "gin's_disturbing_dream": Story("Gin's Disturbing Dream", "While the group is engrossed in their research, Gin has a vivid, disturbing dream that hints at a hidden shrine and an imminent transformation."),
    "interpreting_the_dream": Story("Interpreting the Dream", "Caelum and Eris, drawing upon their knowledge from the scrolls, decipher Gin's dream. They realize it's directing them to a shrine linked to the lost civilization."),
    "journey_to_the_shrine": Story("Journey to the Shrine", "Leaving the library, they embark on a quest to find the hidden shrine. Their journey is fraught with danger and obstacles, testing their strength and resolve."),
    "discovery_of_the_shrine": Story("Discovery of the Shrine", "After a grueling journey, they locate the shrine nestled deep in an ancient forest. Its imposing architecture and arcane energy affirm the insights from Gin's dream."),
    "gin's_transformation_begins": Story("Gin's Transformation Begins", "As Gin steps into the shrine, he's enveloped in a radiant light. His body undergoes a shocking transformation as he morphs into a majestic phoenix."),
    "group's_reaction_and_acceptance": Story("Group's Reaction and Acceptance", "While initially shocked, the group quickly adapts to the unexpected change. They see the transformed Gin not as a monstrous beast, but as a powerful protector and guide."),
    "gin's_new_abilities": Story("Gin's New Abilities", "In his phoenix form, Gin gains enhanced abilities. His prophetic dreams become clearer, and he can now manipulate fire and fly. These skills add a new dynamic to the group and their quest."),
    "vexis_revealed": Story("Vexis Revealed", "With their growing knowledge, Caelum and Eris uncover the true extent of Lord Vexis's ambitions. His pursuit of power, they realize, threatens to shroud Lumina in darkness."),
    "understanding_vexis_plan": Story("Understanding Vexis's Plan", "They decipher that Vexis intends to harness the lost civilization's technology to seize control of Lumina and extend his dominion."),
    "preparation_to_confront_vexis": Story("Preparation to Confront Vexis", "Recognizing the impending danger, the group decides to confront Lord Vexis. They begin preparing for the inevitable showdown, fortifying their defenses and planning their strategy."),
    "gin_predicts_vexis_next_move": Story("Gin Predicts Vexis's Next Move", "In a prophetic dream, Gin sees Vexis making a move to seize an ancient artifact of immense power. The group decides to intercept him and claim the artifact first."),
    "race_against_time": Story("Race Against Time", "The group embarks on a desperate race against time to locate and secure the artifact before Vexis does."),
    "unexpected_setback": Story("Unexpected Setback", "Their journey is hindered by a horde of Vexis’s minions. The group is forced to engage them, delaying their quest."),
    "retrieving_the_artifact": Story("Retrieving the Artifact", "After a grueling battle, the group finally reaches the artifact's location. Using their knowledge of the ancient civilization, they manage to secure it."),
    "vexis_confrontation": Story("Vexis Confrontation", "With the artifact in their possession, the group is ready to confront Vexis. They reach his stronghold, prepared for the inevitable battle."),
    "vexis_battle": Story("Vexis Battle", "The group engages in a fierce battle with Vexis. The fight tests their limits, but they manage to hold their ground, refusing to surrender."),
    "vexis_past": Story("Vexis's Past", "Further research reveals shocking information about Vexis's past, his connections to the lost civilization, and the personal motivations behind his nefarious ambitions."),
    "confirming_vexis_plan": Story("Confirming Vexis's Plan", "Caelum and Eris manage to infiltrate a secret meeting of Vexis's lieutenants, confirming their suspicions and understanding the immediacy of the threat."),
    "gin's_prophetic_dream": Story("Gin's Prophetic Dream", "While the duo deciphers Vexis's plan, Gin has a prophetic dream foretelling an impending attack on their faction and a deadly challenge he must face."),
    "decoding_gin's_dream": Story("Decoding Gin's Dream", "With their enriched understanding of the arcane, Caelum and Eris interpret Gin's dream. They realize that while their faction is at risk, Gin must also confront a colossal dragon."),
    "weighing_the_options": Story("Weighing the Options", "Facing the double-edged sword of danger, they contemplate their options. Should they help their faction ward off Vexis's forces, or should they aid Gin in his potentially deadly challenge?"),
    "internal_struggles": Story("Internal Struggles", "Each member of the trio wrestles with this decision, torn between loyalty to their allies and the urge to protect one another. Their camaraderie is tested as they weigh the stakes."),
    "resolution_to_act": Story("Resolution to Act", "They eventually reach a difficult decision, realizing that their individual paths lie in the choices they make now. They resolve to act, aware of the consequences."),
    "before_the_storm": Story("Before the Storm", "As they prepare for the trials ahead, they spend a moment in silent camaraderie, strengthening their resolve and promising to endure whatever comes their way."),
    "revelations_and_choices": Story("Revelations and Choices", "The trio learns of an impending attack on their faction by Vexis's forces. Simultaneously, Gin, in his phoenix form, is challenged by a colossal dragon, endangering his life. They face a difficult choice, deciding where their aid is needed most."),
    "final_preparation": Story("Final Preparation", "Having made their difficult decision, they engage in a fierce battle, either protecting their faction or saving Gin. Regardless of the outcome, they use the experience, strength, and knowledge they've gained to prepare for the imminent confrontation with Lord Vexis."),
    "repercussions_of_choice": Story("Repercussions of Choice", "The aftermath of their choice leaves an indelible impact, leading to joy, despair, or a bittersweet combination of both. But, it reinforces their determination to thwart Vexis's plans."),
    "gathering_allies": Story("Gathering Allies", "Recognizing the magnitude of their final battle, they rally their allies, forging a united front against Vexis. They make strategic plans, ensuring each ally's strengths are used to their full potential."),
    "strengthening_bonds": Story("Strengthening Bonds", "During the preparation, the group grows closer, strengthening their bonds and forging unbreakable friendships. They draw strength from one another, knowing they can rely on their comrades in the coming fight."),
    "calm_before_the_storm": Story("Calm Before the Storm", "In a brief respite before the final battle, the group finds solace in each other's company. They reflect on their journey, share stories, and brace themselves for what lies ahead."),
    "final_confrontation_with_vexis": Story("Final Confrontation with Vexis", "The time has come to face Lord Vexis. The group, armed with knowledge, allies, and unwavering determination, storms his stronghold, ready to put an end to his reign of darkness."),
    "climactic_battle": Story("Climactic Battle", "The battle between the group and Vexis reaches its climax. Each member fights with everything they have, using their unique abilities and working together to overcome Vexis's powerful magic and minions."),
    "victory_and_revelation": Story("Victory and Revelation", "After a grueling battle, the group emerges victorious, defeating Lord Vexis. In the aftermath, they uncover shocking revelations about Vexis's true identity and the origins of the lost civilization."),
    "rebuilding_and_recovery": Story("Rebuilding and Recovery", "With Vexis defeated, Lumina begins the process of rebuilding and recovery. The group plays a pivotal role in restoring balance, using their knowledge to advance the city's magic and technology."),
    "legacy_of_the_lost_civilization": Story("Legacy of the Lost Civilization", "The group ensures that the knowledge and artifacts of the lost civilization are preserved, recognizing their historical and cultural significance. They establish an institute dedicated to the study and protection of this legacy."),
    "reflection_and_new_beginnings": Story("Reflection and New Beginnings", "As the dust settles, the group takes a moment to reflect on their incredible journey and the personal growth they've experienced. They part ways for a while, but their bond remains unbreakable, and they eagerly anticipate new adventures on the horizon.")
}
'''
story = {
    "start": {
        "name": "Start",
        "description": "In the royal city of Lumina, renowned for its vibrant culture and ancient history, our protagonist Caelum, an erudite scholar, comes across an enigmatic tome that hints at a lost civilization. His journey to unravel this mystery commences, unknowingly drawing the attention of the nefarious Lord Vexis."
    },
    "decision_to_learn": {
        "name": "Decision to Learn",
        "description": "Deciding that the knowledge in the tome is too crucial to be left unearthed, Caelum dedicates himself to deciphering the ancient text, realizing this could be a turning point in his life."
    },
    "first_barrier": {
        "name": "First Barrier",
        "description": "Caelum faces his first obstacle when he finds a portion of the tome encrypted in an arcane script. He must unearth the lost art of deciphering this ancient language."
    },
    "learning_the_language": {
        "name": "Learning the Language",
        "description": "After weeks of study and cross-referencing ancient texts, Caelum manages to gain a basic understanding of the lost language, making it possible to slowly decrypt the tome."
    },
    "first_insight": {
        "name": "First Insight",
        "description": "The first decrypted passages reveal knowledge far beyond Lumina's current understanding of magic and technology. This fuels Caelum's curiosity even further."
    },
    "evidence_of_threat": {
        "name": "Evidence of Threat",
        "description": "While diving deeper into the translated text, Caelum stumbles upon a prophetic warning about a great darkness that once threatened the lost civilization. It bears unsettling similarities to Lord Vexis’s ambitions."
    },
    "burden_of_knowledge": {
        "name": "Burden of Knowledge",
        "description": "Understanding the magnitude of the threat, Caelum feels the weight of responsibility. His quest is no longer just about curiosity but about protecting Lumina from a potentially devastating fate."
    },
    "seeking_allies": {
        "name": "Seeking Allies",
        "description": "Knowing the enormity of his task, Caelum realizes he needs allies. He decides to share his discoveries with trusted scholars and influencers within Lumina."
    },
    "doubt_and_rejection": {
        "name": "Doubt and Rejection",
        "description": "To his disappointment, Caelum's warnings are met with skepticism and disbelief from many. Some even accuse him of fearmongering and alarmism."
    },
    "unexpected_ally": {
        "name": "Unexpected Ally",
        "description": "Just when Caelum is losing hope, Eris, who has overheard his attempts to convince others, approaches him. She believes in his cause and offers her help."
    },
    "solidifying_the_partnership": {
        "name": "Solidifying the Partnership",
        "description": "Eris and Caelum form a pact to explore the secrets of the lost civilization together and stand against the darkness that looms over Lumina."
    },
    "curiosity_piqued": {
        "name": "Curiosity Piqued",
        "description": "Caelum delves into the esoteric texts and discovers tantalizing hints of powerful magic and advanced knowledge possessed by the lost civilization. His desire to learn more solidifies his resolve to pursue this quest."
    },
    "unexpected_allies": {
        "name": "Unexpected Allies",
        "description": "While researching, Caelum encounters Eris, a warrior-mage with an enigmatic past. Her interests align with his, and she offers her aid. Their partnership is formed, each complimenting the other's skills."
    },
    "realizing_common_goals": {
        "name": "Realizing Common Goals",
        "description": "As Caelum and Eris spend more time together, they find common ground in their ambitions and dreams. Their bond strengthens as they commit to aiding each other in their respective quests."
    },
    "first_shared_adventure": {
        "name": "First Shared Adventure",
        "description": "The duo embarks on their first adventure together to retrieve a lost artifact, said to be tied to the ancient civilization. Through their trials and tribulations, they learn to trust and rely on each other."
    },
    "revelation_of_eris_past": {
        "name": "Revelation of Eris' Past",
        "description": "In an emotional moment, Eris shares her past with Caelum. She reveals that she's the last of her kind, a survivor of a forgotten tribe related to the lost civilization. Her personal connection to their quest cements their partnership."
    },
    "eris_teaches_caelum": {
        "name": "Eris Teaches Caelum",
        "description": "Eris begins to teach Caelum martial arts and basic spellcraft, augmenting his scholarly knowledge with practical skills. This not only broadens Caelum's capabilities but also deepens their trust and understanding."
    },
    "first_encounter_with_vexis_forces": {
        "name": "First Encounter with Vexis's Forces",
        "description": "Caelum and Eris face their first encounter with Vexis's minions. They manage to escape but realize that they are being hunted, raising the stakes of their quest."
    },
    "realization_of_their_limitations": {
        "name": "Realization of Their Limitations",
        "description": "Following their narrow escape, Caelum and Eris realize they are ill-prepared to face the dangers ahead alone. They acknowledge the need for allies."
    },
    "research_on_potential_allies": {
        "name": "Research on Potential Allies",
        "description": "They delve into researching potential allies. Two names consistently emerge: the Arcane Circle, a secretive society focused on preserving ancient knowledge, and the Royal Guard, the determined protectors of Lumina."
    },
    "investigation_and_deliberation": {
        "name": "Investigation and Deliberation",
        "description": "Caelum and Eris spend days investigating these factions, weighing the benefits and drawbacks of each. They consider their values, resources, and potential risks involved."
    },
    "resolution_to_join": {
        "name": "Resolution to Join",
        "description": "After much deliberation, they decide it's time to align themselves with one of the factions. They prepare to approach their chosen faction, fully aware that this decision will drastically shape their journey."
    },
    "join_faction": {
        "name": "Joining a Faction",
        "description": "Soon, they are faced with a choice: should they join the Arcane Circle, a clandestine society focused on safeguarding ancient knowledge, or ally with the Royal Guard, stalwart protectors of Lumina? The decision would shape their journey and future alliances."
    },
    "first_conflict": {
        "name": "First Conflict",
        "description": "The duo finds themselves targeted by Lord Vexis’s minions, who aim to hinder their progress. Supported by their chosen faction, Caelum and Eris defend themselves, marking their first battle against Lord Vexis's forces."
    },
    "aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "The first conflict leaves its mark on the group, both physically and emotionally. It's a harsh reminder of the dangers they face but also strengthens their resolve."
    },
    "strengthening_alliances": {
        "name": "Strengthening Alliances",
        "description": "Recognizing the scale of their opposition, Caelum and Eris focus on strengthening their alliances. They undertake missions to help their chosen faction, earning their trust and support."
    },
    "discovery_of_gin": {
        "name": "Discovery of Gin",
        "description": "On one such mission, they come across Gin, a simple farmer with strange, prophetic dreams. Intrigued by his visions, they decide to investigate further."
    },
    "gin_reveals_dreams": {
        "name": "Gin Reveals Dreams",
        "description": "Gin hesitantly shares his dreams, which cryptically hint at looming threats and the path they should take. Caelum and Eris realize the significance of these visions in their quest."
    },
    "confirmation_of_gin's_abilities": {
        "name": "Confirmation of Gin's Abilities",
        "description": "To confirm Gin's abilities, they cautiously act on information from his dreams. When his predictions come true, they understand his immense potential."
    },
    "welcoming_gin": {
        "name": "Welcoming Gin",
        "description": "Convinced of Gin's unique ability, Caelum and Eris offer him a place in their group. They promise to keep him safe and help understand his abilities better."
    },
    "gin's_doubts_and_fears": {
        "name": "Gin's Doubts and Fears",
        "description": "Initially, Gin is overwhelmed by the sudden change and the weight of his abilities. He grapples with fear and doubt, uncertain of his place in this grand quest."
    },
    "assuaging_gin's_fears": {
        "name": "Assuaging Gin's Fears",
        "description": "Seeing his struggle, Caelum and Eris comfort Gin. They assure him that his gift is not a burden but a beacon of hope. They pledge to stand by him, no matter what."
    },
    "gin_accepts": {
        "name": "Gin Accepts",
        "description": "Strengthened by their support, Gin agrees to join their group. He begins to view his gift as a means to contribute to a cause larger than himself."
    },
    "meet_gin": {
        "name": "Meet Gin",
        "description": "During their adventures, they meet Gin, a humble dreamer with the uncanny ability to receive prophetic dreams. Sensing his potential, they welcome him to their group, unaware of the critical role he would play."
    },
    "hidden_secrets": {
        "name": "Hidden Secrets",
        "description": "While deciphering the tome, Caelum discovers the existence of hidden chambers within the Royal Library. After a relentless search, they unearth a room filled with scrolls that disclose the lost civilization’s secrets. This revelation strengthens their resolve and enhances their abilities."
    },
    "understanding_the_secrets": {
        "name": "Understanding the Secrets",
        "description": "The group dedicates days to studying the scrolls, gaining insights into the lost civilization's technology, magic, culture, and the catastrophe that led to their downfall."
    },
    "first_application_of_new_knowledge": {
        "name": "First Application of New Knowledge",
        "description": "Using the newfound knowledge, Caelum and Eris experiment with ancient spells and devices, boosting their capabilities and defenses."
    },
    "gin's_disturbing_dream": {
        "name": "Gin's Disturbing Dream",
        "description": "While the group is engrossed in their research, Gin has a vivid, disturbing dream that hints at a hidden shrine and an imminent transformation."
    },
    "interpreting_the_dream": {
        "name": "Interpreting the Dream",
        "description": "Caelum and Eris, drawing upon their knowledge from the scrolls, decipher Gin's dream. They realize it's directing them to a shrine linked to the lost civilization."
    },
    "journey_to_the_shrine": {
        "name": "Journey to the Shrine",
        "description": "Leaving the library, they embark on a quest to find the hidden shrine. Their journey is fraught with danger and obstacles, testing their strength and resolve."
    },
    "discovery_of_the_shrine": {
        "name": "Discovery of the Shrine",
        "description": "After a grueling journey, they locate the shrine nestled deep in an ancient forest. Its imposing architecture and arcane energy affirm the insights from Gin's dream."
    },
    "gin's_transformation_begins": {
        "name": "Gin's Transformation Begins",
        "description": "As Gin steps into the shrine, he's enveloped in a radiant light. His body undergoes a shocking transformation as he morphs into a majestic phoenix."
    },
    "group's_reaction_and_acceptance": {
        "name": "Group's Reaction and Acceptance",
        "description": "While initially shocked, the group quickly adapts to the unexpected change. They see the transformed Gin not as a monstrous beast, but as a powerful protector and guide."
    },
    "gin's_new_abilities": {
        "name": "Gin's New Abilities",
        "description": "In his phoenix form, Gin gains enhanced abilities. His prophetic dreams become clearer, and he can now manipulate fire and fly. These skills add a new dynamic to the group and their quest."
    },
    "legendary_transformation": {
        "name": "Legendary Transformation",
        "description": "Following a particular prophetic dream, Gin leads the group to a hidden shrine where he undergoes an unexpected transformation. He morphs into a majestic phoenix, serving as a protector and guide, proving pivotal to their quest."
    },
    "vexis_revealed": {
        "name": "Vexis Revealed",
        "description": "With their growing knowledge, Caelum and Eris uncover the true extent of Lord Vexis's ambitions. His pursuit of power, they realize, threatens to shroud Lumina in darkness."
    },
    "understanding_vexis_plan": {
        "name": "Understanding Vexis's Plan",
        "description": "They decipher that Vexis intends to harness the lost civilization's technology to seize control of Lumina and extend his dominion."
    },
    "preparation_to_confront_vexis": {
        "name": "Preparation to Confront Vexis",
        "description": "Recognizing the impending danger, the group decides to confront Lord Vexis. They begin preparing for the inevitable showdown, fortifying their defenses and planning their strategy."
    },
    "gin_predicts_vexis_next_move": {
        "name": "Gin Predicts Vexis's Next Move",
        "description": "In a prophetic dream, Gin sees Vexis making a move to seize an ancient artifact of immense power. The group decides to intercept him and claim the artifact first."
    },
    "race_against_time": {
        "name": "Race Against Time",
        "description": "The group embarks on a desperate race against time to locate and secure the artifact before Vexis does."
    },
    "unexpected_setback": {
        "name": "Unexpected Setback",
        "description": "Their journey is hindered by a horde of Vexis’s minions. The group is forced to engage them, delaying their quest."
    },
    "retrieving_the_artifact": {
        "name": "Retrieving the Artifact",
        "description": "After a grueling battle, the group finally reaches the artifact's location. Using their knowledge of the ancient civilization, they manage to secure it."
    },
    "vexis_confrontation": {
        "name": "Vexis Confrontation",
        "description": "With the artifact in their possession, the group is ready to confront Vexis. They reach his stronghold, prepared for the inevitable battle."
    },
    "vexis_battle": {
        "name": "Vexis Battle",
        "description": "The group engages in a fierce battle with Vexis. The fight tests their limits, but they manage to hold their ground, refusing to surrender."
    },
    "vexis_past": {
        "name": "Vexis's Past",
        "description": "Further research reveals shocking information about Vexis's past, his connections to the lost civilization, and the personal motivations behind his nefarious ambitions."
    },
    "confirming_vexis_plan": {
        "name": "Confirming Vexis's Plan",
        "description": "Caelum and Eris manage to infiltrate a secret meeting of Vexis's lieutenants, confirming their suspicions and understanding the immediacy of the threat."
    },
    "gin's_prophetic_dream": {
        "name": "Gin's Prophetic Dream",
        "description": "While the duo deciphers Vexis's plan, Gin has a prophetic dream foretelling an impending attack on their faction and a deadly challenge he must face."
    },
    "decoding_gin's_dream": {
        "name": "Decoding Gin's Dream",
        "description": "With their enriched understanding of the arcane, Caelum and Eris interpret Gin's dream. They realize that while their faction is at risk, Gin must also confront a colossal dragon."
    },
    "weighing_the_options": {
        "name": "Weighing the Options",
        "description": "Facing the double-edged sword of danger, they contemplate their options. Should they help their faction ward off Vexis's forces, or should they aid Gin in his potentially deadly challenge?"
    },
    "internal_struggles": {
        "name": "Internal Struggles",
        "description": "Each member of the trio wrestles with this decision, torn between loyalty to their allies and the urge to protect one another. Their camaraderie is tested as they weigh the stakes."
    },
    "resolution_to_act": {
        "name": "Resolution to Act",
        "description": "They eventually reach a difficult decision, realizing that their individual paths lie in the choices they make now. They resolve to act, aware of the consequences."
    },
    "before_the_storm": {
        "name": "Before the Storm",
        "description": "As they prepare for the trials ahead, they spend a moment in silent camaraderie, strengthening their resolve and promising to endure whatever comes their way."
    },
    "revelations_and_choices": {
        "name": "Revelations and Choices",
        "description": "The trio learns of an impending attack on their faction by Vexis's forces. Simultaneously, Gin, in his phoenix form, is challenged by a colossal dragon, endangering his life. They face a difficult choice, deciding where their aid is needed most."
    },
    "final_preparation": {
        "name": "Final Preparation",
        "description": "Having made their difficult decision, they engage in a fierce battle, either protecting their faction or saving Gin. Regardless of the outcome, they use the experience, strength, and knowledge they've gained to prepare for the imminent confrontation with Lord Vexis."
    },
    "repercussions_of_choice": {
        "name": "Repercussions of Choice",
        "description": "The aftermath of their choice leaves an indelible impact, leading to joy, despair, or a bittersweet combination of both. But, it reinforces their determination to thwart Vexis's plans."
    },
    "gathering_allies": {
        "name": "Gathering Allies",
        "description": "Recognizing the magnitude of their final battle, they rally their allies, forging a united front against Vexis. They make strategic plans, ensuring each ally's strengths are used to their full potential."
    },
    "strengthening_personal_abilities": {
        "name": "Strengthening Personal Abilities",
        "description": "Each member of the trio focuses on honing their abilities. Eris trains vigorously, Caelum delves into the arcane knowledge, and Gin learns to harness his phoenix powers more effectively."
    },
    "the_last_night": {
        "name": "The Last Night",
        "description": "The night before the final confrontation, they share stories, fears, and hopes around a campfire. Their camaraderie deepens, and they draw strength from their shared resolve."
    },
    "approaching_the_cursed_spire": {
        "name": "Approaching the Cursed Spire",
        "description": "They approach the Cursed Spire, the stage for their final battle. The imposing edifice emanates an oppressive aura, yet they press on, courage unwavering."
    },
    "battles_outside_the_spire": {
        "name": "Battles Outside the Spire",
        "description": "Before they can confront Vexis, they must overcome his formidable defenses. They, along with their allies, engage in intense battles, slowly progressing towards the spire's peak."
    },
    "ascension_to_the_peak": {
        "name": "Ascension to the Peak",
        "description": "With their allies holding the line, the trio ascends the spire. They confront and overcome numerous trials, their resolve tested at each step."
    },
    "vexis_confrontation_prep": {
        "name": "Vexis Confrontation Preparation",
        "description": "As they reach the peak, they steel themselves for the ultimate confrontation. They exchange a final glance of shared determination before stepping into the fray."
    },
    "final_battle": {
        "name": "Final Battle",
        "description": "Armed with the wisdom of the lost civilization, their unique abilities, and their unwavering resolve, Caelum, Eris, and Gin confront Lord Vexis in a climactic battle atop the Cursed Spire."
    },
    "battle_climax": {
        "name": "Battle Climax",
        "description": "The trio's combined efforts begin to overpower Vexis. The battle is intense, but their unity, trust, and shared resolve tip the balance in their favor."
    },
    "good_vexis_defeat": {
        "name": "Vexis's Defeat",
        "description": "With a final, concerted effort, they vanquish Vexis, his dark ambitions crumbling along with him. They stand victorious, the daunting spire resonating with their triumph."
    },
    "good_aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "In the wake of the battle, they help their allies regroup, healing the wounded and mourning the fallen. Their victory is bittersweet, marked with the relief of overcoming a great evil, but also the sorrow of their losses."
    },
    "good_return_to_lumina": {
        "name": "Return to Lumina",
        "description": "They return to Lumina as heroes. The city, once on the brink of despair, now radiates hope and gratitude. Their bravery and tenacity have saved the city and its citizens from Vexis's darkness."
    },
    "good_recognition_of_heroes": {
        "name": "Recognition of Heroes",
        "description": "Caelum, Eris, and Gin are celebrated as the saviors of Lumina. Their deeds become the stuff of legends, stories to inspire future generations."
    },
    "good_peaceful_respite": {
        "name": "Peaceful Respite",
        "description": "After the tumultuous events, they find a moment of peace. They reflect on their journey, understanding the depth of their transformation, and the bonds they've forged."
    },
    "good_glimpse_of_future": {
        "name": "Glimpse of the Future",
        "description": "As they watch Lumina rejoice, they know that their journey doesn't end here. There are still secrets to uncover, battles to fight, and a world to protect."
    },
    "good_end": {
        "name": "Good End",
        "description": "Congratulations! Our heroes have triumphed over Lord Vexis, liberating Lumina from his malicious intentions. Peace returns, and they are hailed as heroes. However, as they look upon the tranquil kingdom, they know that their journey is far from over..."
    },
    "bad_vexis_victory": {
        "name": "Vexis's Victory",
        "description": "Lord Vexis triumphs over the trio, seizing the ancient knowledge they had worked so hard to protect. His malicious laugh echoes across the spire as Lumina falls into his hands."
    },
    "bad_aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "They retreat, nursing their wounds and their bruised spirits. They mourn their defeat, but the flame of resistance still flickers within them."
    },
    "bad_occupied_lumina": {
        "name": "Occupied Lumina",
        "description": "Returning to Lumina, they find a city gripped by Vexis's power. Fear and despair taint the once-vibrant city, but in the hearts of its citizens, hope remains, kindled by the heroes' undying resolve."
    },
    "bad_underground_resistance": {
        "name": "Underground Resistance",
        "description": "Caelum, Eris, and Gin join the budding resistance, vowing to free Lumina from Vexis's iron grip. They operate in the shadows, carefully planning their next move."
    },
    "bad_sacrifices_made": {
        "name": "Sacrifices Made",
        "description": "The trio faces difficult choices, sacrifices made in the name of their cause. They lose allies and experience personal losses, fueling their determination to bring an end to Vexis's tyranny."
    },
    "bad_final_showdown": {
        "name": "Final Showdown",
        "description": "With the resistance rallying behind them, they confront Vexis in a final, desperate battle. The outcome hangs in the balance as they give their all, fighting for the freedom of Lumina."
    },
    "bad_vexis_defeated": {
        "name": "Vexis Defeated",
        "description": "Against all odds, they manage to defeat Vexis, shattering his reign of darkness. The city rejoices, liberated from his oppressive rule."
    },
    "bad_rebuilding_lumina": {
        "name": "Rebuilding Lumina",
        "description": "The trio and the remaining resistance members unite to rebuild Lumina. It's a daunting task, but their determination and the support of the citizens push them forward."
    },
    "bad_bittersweet_victory": {
        "name": "Bittersweet Victory",
        "description": "Although they have freed Lumina, the scars of the conflict run deep. They mourn the losses, but their triumph serves as a beacon of hope, a reminder that darkness can be overcome."
    },
    "bad_end": {
        "name": "Bad End",
        "description": "Oh no! Lord Vexis emerges victorious, plunging Lumina into darkness. However, a flicker of hope remains, as Caelum, Eris, and Gin join the underground resistance to fight against Vexis's tyranny. Their journey to liberate Lumina continues, against all odds..."
    }
}
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\view.py  
# view.py
import curses 

class GameView:
    def __init__(self, game, controller):
        self.game = game
        self.controller = controller

        # Initialize curses
        self.stdscr = curses.initscr()
        curses.cbreak()
        curses.noecho()
        self.stdscr.keypad(True)

    def cleanup(self):
        curses.nocbreak()
        self.stdscr.keypad(False)
        curses.echo()
        curses.endwin()

    def run(self):
        running = True
        while running:
            # Get the key pressed
            c = self.stdscr.getch()

            # Parse the key to a command
            command = self.controller.parse_input(c)
            if command is not None:
                self.stdscr.addstr(f"{command}\n")  # Display the command on the screen
                self.stdscr.refresh()

                # Run the command
                running = self.controller.run_command(command)

        self.cleanup()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\whiteboard.py  
from math import sin,cos,sqrt,atan2,pi
import pygame
pygame.init()

class Planet:
    dt = 1/100
    G = 6.67428e-11 #G constant
    scale = 1/(1409466.667) #1 m = 1/1409466.667 pixlar
    def __init__(self,x=0,y=0,radius=0,color=(0,0,0),mass=0,vx=0,vy=0):
        self.x = x #x-coordinate pygame-window
        self.y = y #y-coordinate pygame-window
        self.radius = radius
        self.color = color
        self.mass = mass
        self.vx = vx #velocity in the x axis
        self.vy = vy #velocity in the y axis
        
    def draw(self,screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)
    
    def orbit(self,trace):
        pygame.draw.rect(trace, self.color, (self.x, self.y, 2, 2))
        
    def update_vel(self,Fnx,Fny):
        ax = Fnx/self.mass #Calculates acceleration in x- and y-axis for body 1.
        ay = Fny/self.mass
        self.vx -= ((ax * Planet.dt)/Planet.scale)
        self.vy -= ((ay * Planet.dt)/Planet.scale)
        self.update_pos()
     
    def update_pos(self):
        self.x += ((self.vx * Planet.dt)) #changes position considering each body's velocity.
        self.y += ((self.vy * Planet.dt))
        
    def move(self,body):
        dx = (self.x - body.x) #Calculates difference in x- and y-axis between the bodies
        dy = (self.y - body.y)
        r = (sqrt((dy**2)+(dx**2))) #Calculates the distance between the bodies
        angle = atan2(dy, dx) #Calculates the angle between the bodies with atan2!
        if r < self.radius: #Checks if the distance between the bodies is less than the radius of the bodies. Uses then Gauss gravitational law to calculate force.
            F = 4/3 * pi * r
            Fx = cos(angle) * F
            Fy = sin(angle) * F
        else:  
            F = (Planet.G*self.mass*body.mass)/((r/Planet.scale)**2) #Newtons gravitational formula.
            Fx = cos(angle) * F
            Fy = sin(angle) * F
        return Fx,Fy

def motion():
    for i in range(0,len(bodies)):
        Fnx = 0 #net force
        Fny = 0
        for j in range(0,len(bodies)):
            if bodies[i] != bodies[j]:
                Fnx += (bodies[i].move(bodies[j]))[0]
                Fny += (bodies[i].move(bodies[j]))[1]
            elif bodies[i] == bodies[j]:
                continue
        bodies[i].update_vel(Fnx,Fny)
        bodies[i].draw(screen)
        bodies[i].orbit(trace)
        Fnx,Fny=0,0 

screen = pygame.display.set_mode([900,650]) #width - height
trace = pygame.Surface((900, 650))
pygame.display.set_caption("Moon simulation")
FPS = 60 #how quickly/frames per second our game should update. Change?

earth = Planet(450,325,30,(0,0,255),5.97219*10**(24),-24.947719394204714/2) #450= xpos,325=ypos,30=radius
luna = Planet(450,(575/11),10,(128,128,128),7.349*10**(22),1023)
moon = Planet() #the second moon
bodies = [earth,luna]

running = True
clock = pygame.time.Clock()

while running: #if user clicks close window
    clock.tick(FPS)    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    screen.fill((0,0,0))
    pygame.Surface.blit(screen, trace, (0, 0))
    motion()

    pygame.display.flip() #update? flip? 

pygame.quit()REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\description_generator.py  
import random
from faker import Faker
import spacy

faker = Faker()
nlp = spacy.load("en_core_web_sm")

def generate_description(entity, name):
    if entity == "Universe":
        return generate_universe_description()
    elif entity == "Planet":
        return generate_planet_description(name)
    elif entity == "Continent":
        return generate_continent_description(name)
    elif entity == "Country":
        return generate_country_description(name)
    elif entity == "Region":
        return generate_region_description(name)
    elif entity == "State":
        return generate_state_description(name)
    elif entity == "Province":
        return generate_province_description(name)
    elif entity == "City":
        return generate_city_description(name)
    elif entity == "Village":
        return generate_village_description(name)
    elif entity == "Town":
        return generate_town_description(name)
    elif entity == "Landmark":
        return generate_landmark_description(name)
    else:
        return ""

def generate_universe_description():
    return "A vast cosmos"

def generate_planet_description(name):
    return f"A mysterious and enchanting planet called {name} in the far reaches of the universe."

def generate_continent_description(name):
    return f"A continent named {name} rich in history and ancient ruins."

def generate_country_description(name):
    return f"A country known as {name} with its own unique characteristics and cultural heritage."

def generate_region_description(name):
    return f"A region called {name} where you can experience the beauty of nature and the local traditions."

def generate_state_description(name):
    return f"A state named {name} with its own distinct landscapes and connections to the environment."

def generate_province_description(name):
    return f"A province named {name} known for its notable features and contributions."

def generate_city_description(name):
    return f"A bustling city called {name} that offers a vibrant mix of cultures and opportunities."

def generate_village_description(name):
    return f"A peaceful village known as {name} where you can enjoy tranquility and the local community."

def generate_town_description(name):
    return f"A charming town named {name} that captures the essence of small-town life and hospitality."

def generate_landmark_description(name):
    doc = nlp(faker.text())
    sentences = [sent.text for sent in doc.sents]
    return f"A remarkable landmark called {name} that {random.choice(sentences)}"
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\location_classes.py  
from ..game import Location

class Container(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        self.locations = []

    def add_location(self, location):
        if self.validate_containment(location):
            self.locations.append(location)
        else:
            print(f"Error: Cannot place {type(location).__name__} within {type(self).__name__}.")

    def get_location(self, name):
        for location in self.locations:
            if location.name == name:
                return location
        return None

    def validate_containment(self, location):
        if hasattr(self, 'valid_locations'):
            return isinstance(location, self.valid_locations)
        else:
            return False

class Forest(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Swamp(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Ruin(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Field(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Ruins(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class City(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Village(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Town(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Landmark(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Universe(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Planet(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Continent(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Country(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Region(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class State(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Province(Container):

    def __init__(self, name, description):
        super().__init__(name, description)
        
class Island(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Ocean(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Mountain(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Desert(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Lake(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class River(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Building(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Castle(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Dungeon(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Room(Container):
    valid_locations = tuple() # To be filled after all location classes are defined
    # This is a special case, as it is the only location that cannot contain other locations        
    def __init__(self, name, description):
        super().__init__(name, description)

# Defining valid locations after all classes are defined
Universe.valid_locations = (Planet,)
Planet.valid_locations = (Continent, Ocean)
Ocean.valid_locations = (Continent, Island)
Continent.valid_locations = (Country, Region)
Island.valid_locations = (Country, Region, Forest, Desert, Field, Ruins, Mountain, Castle, Dungeon)
Country.valid_locations = (Region, State, Province, Desert, Mountain, Lake, River)
Region.valid_locations = (Country, State, Province, Desert, Mountain, Village, Landmark, Forest, Field, Ruins)
Mountain.valid_locations = (Village, Landmark, Forest, Ruins)
Lake.valid_locations = (Landmark, Ruins)
River.valid_locations = (Landmark, Ruins)
Desert.valid_locations = (Landmark, Ruins)
State.valid_locations = (City, Village, Town, Landmark, Forest, Field, Desert, Ruins)
Province.valid_locations = (City, Village, Town, Landmark, Forest, Field, Ruins)
City.valid_locations = (Landmark, Ruins, Building, Castle, Dungeon)
Castle.valid_locations = (Landmark, Ruins, Building, Dungeon, Room)
Village.valid_locations = (Landmark, Forest, Field, Ruins, Building)
Town.valid_locations = (Landmark, Forest, Field, Ruins, Building)
Forest.valid_locations = (Landmark, Ruins, River, Lake)
Field.valid_locations = (Landmark, Ruins, River, Lake)
Ruins.valid_locations = (Landmark, River, Lake, Dungeon)
Landmark.valid_locations = (Building, Dungeon)
Building.valid_locations = (Dungeon, Room)
Dungeon.valid_locations = (Room,)
Room.valid_locations = tuple()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\map_generator.py  
# map_generator.py

import random
import os.path
from location_description import *

class Map:
    def __init__(self, size=(100, 100)):
        self.size = size
        self.contents = []

    def generate(self):
        if os.path.exists('location_description.py'):
            self.generate_maps_from_description()
        else:
            self.generate_maps_organically()

    def generate_maps_from_description(self):
        # Read location_description.py and generate maps based on the data
        # ...

    def generate_maps_organically(self):
        # Generate maps organically from the bottom up
        maps = []
        for continent in continents:
            continent_map = self.generate_continent_map(continent)
            maps.append(continent_map)

        with open('maps.py', 'w') as f:
            f.write("from map_classes import Map\n\n")
            for i, map in enumerate(maps):
                f.write(f"map_{i+1} = Map({map.size})\n")
                f.write(f"map_{i+1}.contents = {map.contents}\n")

    def generate_continent_map(self, continent):
        # Generate the map for a continent
        continent_map = Map()
        # ...

        for country in continent.countries:
            country_map = self.generate_country_map(country)
            continent_map.contents.append(country_map)

        return continent_map

    def generate_country_map(self, country):
        # Generate the map for a country
        country_map = Map()
        # ...

        for city in country.cities:
            city_map = self.generate_city_map(city)
            country_map.contents.append(city_map)

        return country_map

    def generate_city_map(self, city):
        # Generate the map for a city
        city_map = Map()
        # ...

        for building in city.buildings:
            building_map = self.generate_building_map(building)
            city_map.contents.append(building_map)

        return city_map

    def generate_building_map(self, building):
        # Generate the map for a building
        building_map = Map()
        # ...

        return building_map

    def generate_castle_map(self, castle):
        # Generate the map for a castle
        castle_map = Map()
        # ...

        return castle_map

    def generate_dungeon_map(self, dungeon):
        # Generate the map for a dungeon
        dungeon_map = Map()
        # ...

        return dungeon_map


def generate_maps():
    map = Map()
    map.generate()
    return map


if __name__ == "__main__":
    generated_map = generate_maps()
    # Use the generated_map for the game
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\name_generator.py  
from faker import Faker
import random
import string

fake = Faker()

class NameGenerator:

    def __init__(self):
        self.vowels = ['a', 'e', 'i', 'o', 'u']
        self.consonants = [ch for ch in string.ascii_lowercase if ch not in self.vowels]

        self.prefixes = {
        'continent': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'country': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'state': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'mountain': ['Mount', 'Mt.', 'Pico', 'Massif'],
        'lake': ['Lake', 'Lago', 'Mar'],
        'sea': ['Mar'],
        'castle': ['Castle', 'Chateau', 'Schloss', 'Burg', 'Fort'],
        'general': ['The', 'Grand', 'Old', 'New']
    }
        self.suffixes = {
        'continent': ['major', 'minor'],    
        'mountain': ['Peak', 'Ridge', 'Pass', 'Summit', 'Crest', 'Top', 'Point'],
        'river': ['River', 'Stream', 'Creek', 'Brook', 'Riviera', 'Fjord'],
        'forest': ['Woods', 'Forest', 'Groves', 'Thicket', 'Copse', 'Stand'],
        'swamp': ['Swamp', 'Marsh', 'Bog', 'Fen', 'Mire', 'Wetlands'],
        'desert': ['Desert', 'Wastes', 'Expanse', 'Sands', 'Dunes'],
        'island': ['Island', 'Isle', 'Isle of', 'Archipelago', 'Cay', 'Atoll'],
        'ocean': ['Ocean', 'Sea', 'Bay', 'Gulf', 'Harbor', 'Strait', 'Channel'],
        'building': ['Building', 'Tower', 'Hall', 'Palace', 'Manor', 'Mansion', 'Fortress'],
        'city': ['City', 'Metropolis', 'Capital', 'Haven', 'ville', 'burg'],
        'province': ['Province', 'County', 'Region', 'Territory', 'Shire'],
        'state': ['State', 'Commonwealth', 'Republic'],
        'village': ['Village', 'Hamlet', 'Settlement'],
        'town': ['Town', 'Borough', 'Township', 'ton'],
        'landmark': ['Monument', 'Memorial', 'Statue', 'Obelisk', 'Pillar', 'Column'],
        'dungeon': ['Dungeon', 'Crypt', 'Vault', 'Labyrinth', 'Catacombs', 'Cavern', 'Caverns', 'Den'],
        'castle': ['Castle', 'Fort', 'Keep', 'Tower', 'Palace', 'Spire', 'Stronghold', 'Citadel', 'Bastion', 'Burg', 'Chateau', 'Schloss'],
    }
        self.characteristics = {
        'general': ['Broad', 'Tall', 'Grand', 'Majestic', 'Mighty', 'Ancient', 'Brilliant', 'Colossal', 'Dazzling', 'Enormous', 'Gigantic', 'Golden', 'Haunting', 'Immense', 'Jagged', 'Lush', 'Mystical', 'Narrow', 'Ominous', 'Pristine', 'Quaint', 'Radiant', 'Secluded', 'Turquoise', 'Unspoiled', 'Vibrant', 'Winding', 'Xenophilic', 'Yielding', 'Zenithal']
    }

        self.first_names = [name for name in dir(Faker()) if "first_name" in name]
        
    def generate_syllable(self):
        syllable = random.choice(self.consonants) + random.choice(self.vowels)
        if random.choice([True, False]):  # With 50% chance add a trailing consonant
            syllable += random.choice(self.consonants)
        return syllable

    def generate_fantasy_name(self, syllable_count=2):
        name = ''.join(self.generate_syllable() for _ in range(syllable_count))
        return name.capitalize()

    def generate_single_word_name(self):
        return fake.word().capitalize()

    def generate_two_part_name(self):
        characteristic = random.choice(self.characteristics)
        name = fake.word().capitalize()
        return f"{characteristic} {name}"

    def generate_possessive_name(self):
        first_name_func = random.choice(self.first_names)
        first_name = getattr(fake, first_name_func)().capitalize()
        suffix = random.choice(self.suffixes)
        return f"{first_name}'s {suffix}"

    def generate_non_english_name(self):
        return fake.words(nb=1, ext_word_list=None, unique=False)[0].capitalize()

    def generate_prefixed_name(self):
        prefix = random.choice(self.prefixes)
        name = fake.word().capitalize()
        return f"{prefix} {name}"

def generate_continent_name(self):
    # select a random method for name generation
    generator = random.choice([self.generate_single_word_name,
                               self.generate_two_part_name,
                               self.generate_possessive_name,
                               self.generate_non_english_name,
                               self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['continent'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['continent'])
        name = f"{name} {suffix}"

    
def generate_mountain_name(self):
    # select a random method for name generation
    generator = random.choice([self.generate_single_word_name,
                               self.generate_two_part_name,
                               self.generate_possessive_name,
                               self.generate_non_english_name,
                               self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['mountain'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['mountain'])
        name = f"{name} {suffix}"

    return name

def generate_river_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['river'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['river'])
        name = f"{name} {suffix}"

    return name

def generate_state_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['state'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['state'])
        name = f"{name} {suffix}"

    return name

def generate_forest_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['forest'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['forest'])
        name = f"{name} {suffix}"

    return name

def generate_country_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['country'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['country'])
        name = f"{name} {suffix}"

    return name

def generate_swamp_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['swamp'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['swamp'])
        name = f"{name} {suffix}"

    return name

def generate_desert_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['desert'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['desert'])
        name = f"{name} {suffix}"

    return name

def generate_lake_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['lake'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['lake'])
        name = f"{name} {suffix}"

    return name

def generate_island_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['island'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['island'])
        name = f"{name} {suffix}"

    return name

def generate_ocean_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['ocean'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['ocean'])
        name = f"{name} {suffix}"

    return name


    
def generate_building_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['building'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['building'])
        name = f"{name} {suffix}"

    return name


    
def generate_city_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['city'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['city'])
        name = f"{name} {suffix}"

    return name

def generate_province_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['province'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['province'])
        name = f"{name} {suffix}"

    return name

def generate_landmark_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['landmark'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['landmark'])
        name = f"{name} {suffix}"

    return name

def generate_castle_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['castle'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['castle'])
        name = f"{name} {suffix}"

    return name


    
def generate_dungeon_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['dungeon'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['dungeon'])
        name = f"{name} {suffix}"

    return name



name_generator = NameGenerator()
for i in range(10):
    print(name_generator.generate_mountain_name())


    def generate_river_name(self):
        return "The " + self.generate_fantasy_name() + " River"

    def generate_continent_name(self):
        return self.generate_fantasy_name()

    def generate_forest_name(self):
        return self.generate_fantasy_name() + " Woods"

    def generate_country_name(self):
        return self.generate_fantasy_name()

    def generate_Swamp_name(self):
        return self.generate_fantasy_name() + " Swamp"

    def generate_desert_name(self):
        return self.generate_fantasy_name() + " Desert"

    def generate_lake_name(self):
        return "Lake " + self.generate_fantasy_name()

    def generate_island_name(self):
        return self.generate_fantasy_name() + " Island"

    def generate_ocean_name(self):
        return "The " + self.generate_fantasy_name() + " Ocean"

    def generate_building_name(self):
        return self.generate_fantasy_name() + " Building"

    def generate_city_name(self):
        return self.generate_fantasy_name() + " City"

    def generate_province_name(self):
        return self.generate_fantasy_name() + " Province"

    def generate_landmark_name(self):
        return "The " + self.generate_fantasy_name() + " Monument"

    def generate_castle_name(self):
        return "Castle " + self.generate_fantasy_name()

    def generate_dungeon_name(self):
        return "The " + self.generate_fantasy_name() + " Dungeon"

    def generate_name(self, name_type):
        if name_type == "fantasy":
            return self.generate_fantasy_name()
        elif name_type == "continent":
            return self.generate_continent_name()
        elif name_type == "country":
            return self.generate_country_name()
        elif name_type == "swamp":
            return self.generate_swamp_name()
        elif name_type == "state":
            return self.generate_state_name()
        elif name_type == "mountain":
            return self.generate_mountain_name()
        elif name_type == "river":
            return self.generate_river_name()
        elif name_type == "forest":
            return self.generate_forest_name()
        elif name_type == "desert":
            return self.generate_desert_name()
        elif name_type == "lake":
            return self.generate_lake_name()
        elif name_type == "island":
            return self.generate_island_name()
        elif name_type == "ocean":
            return self.generate_ocean_name()
        elif name_type == "building":
            return self.generate_building_name()
        elif name_type == "city":
            return self.generate_city_name()
        elif name_type == "province":
            return self.generate_province_name()
        elif name_type == "landmark":
            return self.generate_landmark_name()
        elif name_type == "castle":
            return self.generate_castle_name()
        elif name_type == "dungeon":
            return self.generate_dungeon_name()
        else:
            return fake.first_name()

name_generator = NameGenerator()
print(name_generator.generate_name("continent"))  # Generates a continent name
print(name_generator.generate_name("country"))  # Generates a country name
print(name_generator.generate_name("swamp"))  # Generates a swamp name
print(name_generator.generate_name("state"))  # Generates a state name
print(name_generator.generate_name("mountain"))  # Generates a mountain name
print(name_generator.generate_name("river"))  # Generates a river name
print(name_generator.generate_name("forest"))  # Generates a forest name
print(name_generator.generate_name("desert"))  # Generates a desert name
print(name_generator.generate_name("lake"))  # Generates a lake name
print(name_generator.generate_name("island"))  # Generates an island name
print(name_generator.generate_name("ocean"))  # Generates an ocean name
print(name_generator.generate_name("building"))  # Generates a building name
print(name_generator.generate_name("city"))  # Generates a city name
print(name_generator.generate_name("province"))  # Generates a province name
print(name_generator.generate_name("landmark"))  # Generates a landmark name
print(name_generator.generate_name("castle"))  # Generates a castle name
print(name_generator.generate_name("dungeon"))  # Generates a dungeon name
print(name_generator.generate_name("fantasy"))  # Generates a fantasy nameREM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\planet_test_one.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_asciiart.py  
from math import ceil

from PIL import (
    Image,
    ImageFont,
    ImageDraw,
)

PIL_GRAYSCALE = 'L'
PIL_WIDTH_INDEX = 0
PIL_HEIGHT_INDEX = 1
COMMON_MONO_FONT_FILENAMES = [
    'DejaVuSansMono.ttf',  # Linux
    'Consolas Mono.ttf',   # MacOS, I think
    'Consola.ttf',         # Windows, I think
]


def main():
    image = textfile_to_image('content.txt')
    image.show()
    image.save('content.png')


def textfile_to_image(textfile_path):
    """Convert text file to a grayscale image.

    arguments:
    textfile_path - the content of this file will be converted to an image
    font_path - path to a font file (for example impact.ttf)
    """
    # parse the file into lines stripped of whitespace on the right side
    with open(textfile_path) as f:
        lines = tuple(line.rstrip() for line in f.readlines())

    # choose a font (you can see more detail in the linked library on github)
    font = None
    large_font = 20  # get better resolution with larger size
    for font_filename in COMMON_MONO_FONT_FILENAMES:
        try:
            font = ImageFont.truetype(font_filename, size=large_font)
            print(f'Using font "{font_filename}".')
            break
        except IOError:
            print(f'Could not load font "{font_filename}".')
    if font is None:
        font = ImageFont.load_default()
        print('Using default font.')REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_image.py  
def text_to_image(
    text: str,
    font_filepath: str,
    font_size: int,
    color: Tuple[int, int, int, int],
) -> ImageType:
    font = ImageFont.truetype(font_filepath, size=font_size)

    img = Image.new("RGBA", font.getmask(text).size)

    draw = ImageDraw.Draw(img)
    draw_point = (0, 0)

    draw.multiline_text(draw_point, text, font=font, fill=color)
    font = ImageFont.truetype(font_filepath, size=font_size)

    text_window = img.getbbox()
    img = img.crop(text_window)


    return imgREM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder.py  
import os
import random
from map_generator import Map, generate_locations
from description_generator import DescriptionGenerator
from name_generator import NameGenerator
from map_generator import generate_maps
from location_classes import *

class World:
    def __init__(self, name="default", universe="one_alpha"):
        self.name = name
        self.universe = universe
        self.locations = []
        self.maps = []

    def generate(self):
        name_gen = NameGenerator()
        desc_gen = DescriptionGenerator()
        universe = Universe(name_gen.generate_universe_name(), desc_gen.generate_universe_description())
        self.locations.append(universe)

        planet_name = input("Enter the name of the planet: ")
        planet = Planet(planet_name, desc_gen.generate_planet_description())
        universe.add_location(planet)

        num_continents = random.randint(4, 7)  # Generate a random number of continents (4 to 7)
        for _ in range(num_continents):
            continent_name = name_gen.generate_continent_name()
            continent_desc = desc_gen.generate_continent_description()
            continent = Continent(continent_name, continent_desc)
            planet.add_location(continent)

            num_countries_per_continent = random.randint(3, 6)  # Generate a random number of countries per continent
            for _ in range(num_countries_per_continent):
                country_name = name_gen.generate_country_name()
                country_desc = desc_gen.generate_country_description()
                country = Country(country_name, country_desc)
                continent.add_location(country)

                num_regions_per_continent = random.randint(2, 5)  # Generate a random number of regions per continent
                for _ in range(num_regions_per_continent):
                    region_name = name_gen.generate_region_name()
                    region_desc = desc_gen.generate_region_description()
                    region = Region(region_name, region_desc)
                    continent.add_location(region)

                    num_provinces_per_country = random.randint(1, 3)  # Generate a random number of provinces per country
                    for _ in range(num_provinces_per_country):
                        province_name = name_gen.generate_province_name()
                        province_desc = desc_gen.generate_province_description()
                        province = Province(province_name, province_desc)
                        country.add_location(province)

                        num_rivers_per_province = random.randint(1, 2)  # Generate a random number of rivers per province
                        for _ in range(num_rivers_per_province):
                            river_name = name_gen.generate_river_name()
                            river_desc = desc_gen.generate_river_description()
                            river = River(river_name, river_desc)
                            province.add_location(river)

                        num_cities_per_province = random.randint(1, 3)  # Generate a random number of cities per province
                        for _ in range(num_cities_per_province):
                            city_name = name_gen.generate_city_name()
                            city_desc = desc_gen.generate_city_description()
                            city = City(city_name, city_desc)
                            province.add_location(city)

                            num_buildings_per_city = random.randint(10, 20)  # Generate a random number of buildings per city
                            for _ in range(num_buildings_per_city):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                city.add_location(building)

                        num_villages_per_province = random.randint(3, 5)  # Generate a random number of villages per province
                        for _ in range(num_villages_per_province):
                            village_name = name_gen.generate_village_name()
                            village_desc = desc_gen.generate_village_description()
                            village = Village(village_name, village_desc)
                            province.add_location(village)

                            num_buildings_per_village = random.randint(5, 9)  # Generate a random number of buildings per village
                            for _ in range(num_buildings_per_village):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                village.add_location(building)

                        num_towns_per_province = random.randint(2, 4)  # Generate a random number of towns per province
                        for _ in range(num_towns_per_province):
                            town_name = name_gen.generate_town_name()
                            town_desc = desc_gen.generate_town_description()
                            town = Town(town_name, town_desc)
                            province.add_location(town)

                            num_buildings_per_town = random.randint(8, 14)  # Generate a random number of buildings per town
                            for _ in range(num_buildings_per_town):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                town.add_location(building)

                        num_forests_per_region = random.randint(1, 3)  # Generate a random number of forests per region
                        for _ in range(num_forests_per_region):
                            forest_name = name_gen.generate_forest_name()
                            forest_desc = desc_gen.generate_forest_description()
                            forest = Forest(forest_name, forest_desc)
                            region.add_location(forest)

                            num_landmarks_per_forest = random.randint(1, 3)  # Generate a random number of landmarks per forest
                            for _ in range(num_landmarks_per_forest):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                forest.add_location(landmark)

                                num_ruins_per_forest = random.randint(1, 3)  # Generate a random number of ruins per forest
                                for _ in range(num_ruins_per_forest):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    forest.add_location(ruin)

                        num_swamps_per_region = random.randint(1, 3)  # Generate a random number of swamps per region
                        for _ in range(num_swamps_per_region):
                            swamp_name = name_gen.generate_swamp_name()
                            swamp_desc = desc_gen.generate_swamp_description()
                            swamp = Swamp(swamp_name, swamp_desc)
                            region.add_location(swamp)

                            num_landmarks_per_swamp = random.randint(1, 3)  # Generate a random number of landmarks per swamp
                            for _ in range(num_landmarks_per_swamp):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                swamp.add_location(landmark)

                                num_ruins_per_swamp = random.randint(1, 3)  # Generate a random number of ruins per swamp
                                for _ in range(num_ruins_per_swamp):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    swamp.add_location(ruin)

                        num_fields_per_region = random.randint(1, 3)  # Generate a random number of fields per region
                        for _ in range(num_fields_per_region):
                            field_name = name_gen.generate_field_name()
                            field_desc = desc_gen.generate_field_description()
                            field = Field(field_name, field_desc)
                            region.add_location(field)

                            num_landmarks_per_field = random.randint(1, 3)  # Generate a random number of landmarks per field
                            for _ in range(num_landmarks_per_field):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                field.add_location(landmark)

                                num_ruins_per_field = random.randint(1, 3)  # Generate a random number of ruins per field
                                for _ in range(num_ruins_per_field):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    field.add_location(ruin)

                        num_deserts_per_region = random.randint(1, 3)  # Generate a random number of deserts per region
                        for _ in range(num_deserts_per_region):
                            desert_name = name_gen.generate_desert_name()
                            desert_desc = desc_gen.generate_desert_description()
                            desert = Desert(desert_name, desert_desc)
                            region.add_location(desert)

                            num_landmarks_per_desert = random.randint(1, 3)  # Generate a random number of landmarks per desert
                            for _ in range(num_landmarks_per_desert):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                desert.add_location(landmark)

                                num_ruins_per_desert = random.randint(1, 3)  # Generate a random number of ruins per desert
                                for _ in range(num_ruins_per_desert):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    desert.add_location(ruin)

                        num_lakes_per_region = random.randint(1, 3)  # Generate a random number of lakes per region
                        for _ in range(num_lakes_per_region):
                            lake_name = name_gen.generate_lake_name()
                            lake_desc = desc_gen.generate_lake_description()
                            lake = Lake(lake_name, lake_desc)
                            region.add_location(lake)

                            num_landmarks_per_lake = random.randint(1, 3)  # Generate a random number of landmarks per lake
                            for _ in range(num_landmarks_per_lake):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                lake.add_location(landmark)

                        num_mountains_per_continent = random.randint(1, 3)  # Generate a random number of mountains per continent
                        for _ in range(num_mountains_per_continent):
                            mountain_name = name_gen.generate_mountain_name()
                            mountain_desc = desc_gen.generate_mountain_description()
                            mountain = Mountain(mountain_name, mountain_desc)
                            continent.add_location(mountain)

                            num_landmarks_per_mountain = random.randint(1, 3)  # Generate a random number of landmarks per mountain
                            for _ in range(num_landmarks_per_mountain):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                mountain.add_location(landmark)

                                num_ruins_per_mountain = random.randint(1, 3)  # Generate a random number of ruins per mountain
                                for _ in range(num_ruins_per_mountain):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    mountain.add_location(ruin)

        num_oceans = random.randint(4, 7)  # Generate a random number of oceans (4 to 7)
        for _ in range(num_oceans):
            ocean_name = name_gen.generate_ocean_name()
            ocean_desc = desc_gen.generate_ocean_description()
            ocean = Ocean(ocean_name, ocean_desc)
            planet.add_location(ocean)

        num_islands = random.randint(2, 8)  # Generate a random number of islands (2 to 8)
        for _ in range(num_islands):
            island_name = name_gen.generate_island_name()
            island_desc = desc_gen.generate_island_description()
            island = Island(island_name, island_desc)
            planet.add_location(island)

        self.locations += generate_locations()
        map = Map()
        map.generate()
        self.maps.append(map)

    def save(self):
        os.makedirs(self.name.lower(), exist_ok=True)
        with open(os.path.join(self.name.lower(), 'location_definitions.py'), 'w') as f:
            f.write("from location_classes import Universe, Planet, Continent, Country, Region, Province, City, Village, Town, "
                    "Landmark, Forest, Field, Ruin, Mountain, Desert, Lake, River, Building, Castle, Dungeon, Room, Ocean, Island\n\n")
            for location in self.locations:
                f.write(f"{location.name.lower().replace(' ', '_')} = {location.__class__.__name__}("
                        f'"{location.name}", "{location.description}")\n')
                if isinstance(location, Container):
                    for contained_location in location.locations:
                        f.write(f"{contained_location.name.lower().replace(' ', '_')} = "
                                f"{contained_location.__class__.__name__}("
                                f'"{contained_location.name}", "{contained_location.description}")\n')

def main():
    name = input("Enter the name of the world: ")
    universe_name = input("Enter the name of the universe (default: one_alpha): ")
    if not universe_name:
        universe_name = "one_alpha"
    world = World(name, universe_name)
    world.generate()
    world.save()

    generate_maps(world.name)

if __name__ == "__main__":
    main()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder_gui.py  
import pygame
import sys
import random
import noise
import numpy as np

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
MAP_HEIGHT = SCREEN_HEIGHT * 2 // 3
CONSOLE_HEIGHT = SCREEN_HEIGHT - MAP_HEIGHT
BLUE = (0, 0, 255)
WHITE = (255, 255, 255)
CONTINENT_COLOR = (139, 69, 19)  # Brown color for continents
DESERT_COLOR = (255, 255, 0)  # Beige color for desert
FOREST_COLOR = (0, 100, 0)  # Dark green color for forest
MOUNTAIN_COLOR = (128, 128, 128)  # Gray color for mountains
SWAMP_COLOR = (0, 255,255)  # Grey Green color for swamp
PLAINS_COLOR = (255, 255, 255)  # Light Grey Green color for plains

# Initialize Pygame
pygame.init()
clock = pygame.time.Clock()

# Create the Pygame window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("World Builder")

# Clear the screen
screen.fill(BLUE)

def generate_waves_shape():
    shape = []
    num_points = random.randint(50, 130)  # Number of points for the vector line
    start_x = random.randint(0, SCREEN_WIDTH)
    start_y = random.randint(SCREEN_HEIGHT // 3, int(SCREEN_HEIGHT * 3 / 5))

    scale = 0.1  # The smaller the scale the smoother the noise
    octaves = 6  # Number of levels of detail
    persistence = 0.5  # Amplitude of each successive octave
    lacunarity = 2.0  # Frequency of each successive octave

    for i in range(num_points):
        x = start_x + i
        y = start_y + noise.pnoise2(x * scale, 
                                     start_y * scale, 
                                     octaves=octaves, 
                                     persistence=persistence, 
                                     lacunarity=lacunarity, 
                                     repeatx=SCREEN_WIDTH, 
                                     repeaty=SCREEN_HEIGHT, 
                                     base=0)
        shape.append((x, int(y)))

    return shape

def generate_continent_shape():
    shape = []
    num_points = random.randint(160000, 288000)  # Number of points for the vector line
    start_x = random.randint(0, SCREEN_WIDTH)
    start_y = random.randint(SCREEN_HEIGHT // 3, int(SCREEN_HEIGHT * 3 / 5))

    for _ in range(num_points):
        shape.append((start_x, start_y))
        direction = random.randint(0, 3)  # Random direction (0 = up, 1 = down, 2 = left, 3 = right)
        if direction == 0:
            start_y -= 1
        elif direction == 1:
            start_y += 1
        elif direction == 2:
            start_x -= 1
        else:
            start_x += 1

    return shape

# Draw the map area
map_area = pygame.Rect(0, 0, SCREEN_WIDTH, MAP_HEIGHT)
pygame.draw.rect(screen, BLUE, map_area)

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    # Generate and draw the continent shape
    continent_shape = generate_continent_shape()
    pygame.draw.lines(screen, CONTINENT_COLOR, False, continent_shape, 2)

    # Display the continent shape on the map
    for i in range(len(continent_shape) - 1):
        pygame.draw.line(screen, CONTINENT_COLOR, continent_shape[i], continent_shape[i + 1], 1)

# Draw the console area
console_area = pygame.Rect(0, MAP_HEIGHT, SCREEN_WIDTH, CONSOLE_HEIGHT)
pygame.draw.rect(screen, WHITE, console_area)

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Generate and draw the waves shape
    waves_shape = generate_waves_shape()
    pygame.draw.lines(screen, WHITE, False, waves_shape, 2)
    
    # Update the display
    pygame.display.flip()
    clock.tick(2)
    
# Quit the game
pygame.quit()
sys.exit()REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeOne.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeTwo.py  
#generateTreeTwo.py

from PIL import Image, ImageDraw

# Image size
width = 200
height = 200

# Define the trunk of the tree
trunk_height = 50
trunk_width = 10

# Define the tree color
tree_color = (34, 139, 34) # Green
trunk_color = (139,69,19) # Brown

# Create a new image with white background
img = Image.new('RGB', (width, height), (255, 255, 255))
draw = ImageDraw.Draw(img)

# Draw the trunk
draw.rectangle(
    [(width // 2 - trunk_width // 2, height - trunk_height), 
     (width // 2 + trunk_width // 2, height)], 
    fill=trunk_color
)

# Draw the tree
for i in range(height - trunk_height, 0, -1):
    color = tree_color
    start = width // 2 - i
    end = width // 2 + i
    draw.line([(start, i), (end, i)], fill=color)

# Save the image
img.save('pixel_tree.png')
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_classes.py  
from ..game import Location

class Container(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        self.locations = []

    def add_location(self, location):
        if self.validate_containment(location):
            self.locations.append(location)
        else:
            print(f"Error: Cannot place {type(location).__name__} within {type(self).__name__}.")

    def get_location(self, name):
        for location in self.locations:
            if location.name == name:
                return location
        return None

    def validate_containment(self, location):
        return isinstance(location, (Region, State, Province, City, Village, Town, Landmark))

class Universe(Container):
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Planet(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Continent(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Country(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Region(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class State(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Province(Container):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Forrest(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Field(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
                
class Ruins(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class City(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Village(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Town(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Landmark(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_definitions.py  
#location_definitions.py

from location_classes import Universe, Planet, Continent, Country, Region, State, Province, City, Village, Town, Landmark

# Create instances of locations

one_alpha = Universe("The Universe", "A vast cosmos")
thulea = Planet("Thulea", "A mysterious and enchanting planet in the far reaches of the universe.")
lumos = Continent("Lumos", "A continent rich in history and ancient ruins.")
dawnbreak = Region("Dawnbreak", "A region where the first rays of sunlight touch the land.")
luminaria = Country("Luminaria", "A country known for its radiant beauty and rich culture.")
astravale = State("Astravale", "A state nestled in the valley of astral wonders.")
province = Province("Ontario", "A province in Canada")
luminaria_city = Village("Luminaria City", "A bustling city that shines like a beacon of light.")
royal_library = Landmark("Royal Library", "A grand library that holds the knowledge of countless ages.")
luminaria_city.add_landmark(royal_library)
starcrest = Village("Starcrest", "A peaceful village known for its stargazing observatory.")
astral_archive = Landmark("Astral Archive", "An ancient repository of celestial knowledge.")
starcrest.add_landmark(astral_archive)
ezitahan = Country("Ezitahan", "A country of ancient traditions and mystical secrets.")
reqedor = State("Reqedor", "A state with lush landscapes and a deep connection to nature.")
wravora = Village("Wravora", "A charming village nestled in the heart of the wilderness.")
pekkopan_tower = Landmark("Pekkopan Tower", "A towering structure that houses the wisdom of the ancient Pekko tribe.")
wravora.add_landmark(pekkopan_tower)
ikrecrizar = Village("Ikrecrizar", "A remote village known for its skilled artisans and craftsmanship.")
erissenem_gardens = Landmark("Erissenem Gardens", "Exquisite gardens filled with rare and mystical plants.")
ikrecrizar.add_landmark(erissenem_gardens)
yocutha = Country("Yocutha", "A country shrouded in mystery and ancient legends.")
dawnshire = State("Dawnshire", "A state where the first light of dawn brings hope and new beginnings.")
shimmerfield = Village("Shimmerfield", "A village adorned with shimmering fields of luminescent flowers.")
trilith_drift_palace = Landmark("Trilith Drift Palace", "A magnificent palace perched on floating rock formations.")
shimmerfield.add_landmark(trilith_drift_palace)
argentia_reach = Village("Argentia Reach", "A coastal village renowned for its silvery beaches and sparkling waters.")
verdantide_glade = Landmark("Verdantide Glade", "An enchanting glade where nature flourishes in vibrant hues.")
argentia_reach.add_landmark(verdantide_glade)
frostholm_highlands = Region("Frostholm Highlands", "A region of icy landscapes and majestic snow-capped mountains.")
mugulux = Country("Mugulux", "A country known for its frozen tundras and resilient people.")
frostholm = State("Frostholm", "A state where frost and ice dominate the landscape.")
frostholm_village = Village("Frostholm Village", "A cozy village nestled amidst snowy valleys.")
hearthfire_inn = Landmark("Hearthfire Inn", "A warm and welcoming inn where travelers find respite from the cold.")
frostholm_village.add_landmark(hearthfire_inn)
astralyn_bluff = Village("Astralyn Bluff", "A village perched on a cliff overlooking vast astral plains.")
emberfall_enclave = Landmark("Emberfall Enclave", "A hidden sanctuary where embers dance and flicker eternally.")
astralyn_bluff.add_landmark(emberfall_enclave)
aine_pusea = Country("Ainepusea", "A country of mesmerizing landscapes and mystical energies.")
stormwatch_crest = State("Stormwatch Crest", "A state where stormy skies unleash raw elemental power.")
stormwatch_city = Village("Stormwatch City", "A bustling city where lightning crackles through the air.")
frostholm_highlands_citadel = Landmark("Frostholm Highlands Citadel", "An imposing fortress that stands as a beacon of strength.")
stormwatch_city.add_landmark(frostholm_highlands_citadel)
havenholm_vale = Village("Havenholm Vale", "A tranquil village nestled in a verdant valley.")
royal_citadel = Landmark("Royal Citadel", "The majestic seat of power where rulers govern with wisdom and grace.")
havenholm_vale.add_landmark(royal_citadel)
shadowfen_marsh = Region("Shadowfen Marsh", "A region cloaked in darkness and mystery, where shadows dance on murky waters.")
phakkeacaea = Country("Phakkeacaea", "A country of mist-laden forests and ancient arcane traditions.")
shadowfen_marsh_state = State("Shadowfen Marsh", "A state where the marshlands hold ancient secrets and hidden dangers.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
shadowfen_marsh_state.add_place(ezitahan_city)
shadowfen_marsh_state.add_place(reqedor_village)
zeloria_landmark = Landmark("Zeloria", "A mystical sanctuary hidden within the depths of Shadowfen Marsh.")
ezitahan_city.add_landmark(zeloria_landmark)
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
mugulux_landmark = Landmark("Mugulux", "A sacred site where the spirits of the ancestors are honored.")
yocutha_village.add_landmark(mugulux_landmark)
luxuinia = Country("Luxuinia", "A country known for its ethereal beauty and captivating aura.")
astralyn_bluff_state = State("Astralyn Bluff", "A state where the bluffs hold breathtaking views of astral phenomena.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
luxuinia_state = State("Astralyn Bluff", "A state where astral energies permeate every corner.")
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
astralyn_bluff_state.add_place(pekkopan_village)
astralyn_bluff_state.add_place(ikrecrizar_village)
aiharreolum = Continent("Aiharreolum", "A continent steeped in celestial mysteries and magic.")
uzaikaton = Region("Uzaikaton", "A region where ancient ruins and celestial phenomena intertwine.")
eaprastorith = Country("Eaprastorith", "A country where the power of the heavens is harnessed.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
stormwatch_crest_village = Village("Stormwatch Crest", "A village nestled amidst the storm-wracked peaks.")
havenholm_vale_state.add_place(astralyn_bluff_city)
havenholm_vale_state.add_place(stormwatch_crest_village)
stormwatch_crest_village.add_landmark(frostholm_highlands_citadel)
eaprastorith.add_place(havenholm_vale_state)
eaprastorith.add_place(stormwatch_crest_village)
astosheopan = Country("Astosheopan", "A country blessed with celestial wonders and mystical phenomena.")
celestria_expanse = State("Celestria Expanse", "A state where the celestial veil is thin, allowing glimpses of other realms.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
celestria_expanse.add_place(ezitahan_city)
celestria_expanse.add_place(reqedor_village)
celestria_expanse.add_place(yocutha_village)

toggurean = Region("Toggurean", "A region of rugged landscapes and untamed beauty.")
homaivaria = Country("Homaivaria", "A country known for its vast forests and deep spiritual connections.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
shadowfen_marsh_city.add_landmark(zeloria_landmark)
homaivaria.add_place(frostholm_highlands_state)
homaivaria.add_place(shadowfen_marsh_city)

hegrukya = Country("Hegruckya", "A country where ancient spirits and primal forces shape the land.")
stormwatch_crest_state = State("Stormwatch Crest", "A state where the storms rage with unrivaled fury.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
stormwatch_crest_state.add_place(pekkopan_village)
stormwatch_crest_state.add_place(ikrecrizar_village)
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
hegrukya.add_place(stormwatch_crest_state)
hegrukya.add_place(pekkopan_village)
hegrukya.add_place(ikrecrizar_village)

kreottodia = Region("Kreottodia", "A region of enchanting landscapes and ancient wonders.")
xuppagary = Country("Xuppagary", "A country known for its diverse terrains and cultural heritage.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
xuppagary.add_place(trilith_drift_state)
xuppagary.add_place(argentia_reach_city)

hisrasal = Country("Hisrasal", "A country where the dawn's first light holds divine significance.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
hisrasal.add_place(dawnshire_state)

mustopis = Continent("Mustopis", "A continent where magic and technology intertwine harmoniously.")
draisaborg = Region("Draisaborg", "A region known for its vibrant cities and cultural diversity.")
grufathage = Country("Grufathage", "A country of diverse landscapes and rich folklore.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
grufathage.add_place(shimmerfield_state)
grufathage.add_place(ezitahan_city)
grufathage.add_place(reqedor_village)
grufathage.add_place(yocutha_village)
grufathage.add_place(zeloria_landmark)
grufathage.add_place(royal_library)
grufathage.add_place(astral_archive)
grufathage.add_place(trilith_drift_palace)
grufathage.add_place(verdantide_glade)

ouyecrogary = Region("Ouyecrogary", "A region where ancient ruins hold untold secrets and hidden treasures.")
hakusha = Country("Hakusha", "A country where the elements dance in harmony and spiritual enlightenment is sought.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
astralyn_bluff_city.add_landmark(zeloria_landmark)
hakusha.add_place(frostholm_highlands_state)
hakusha.add_place(astralyn_bluff_city)
hakusha.add_place(shadowfen_marsh_city)

astibberal = Country("Astibberal", "A country where ancient wisdom and arcane arts intertwine.")
oudrattuthia = Region("Oudrattuthia", "A region of dark forests and hidden magical enclaves.")
hegrukya_state = State("Hegruckya", "A state where ancient spirits and primal forces shape the land.")
stormwatch_crest_village = Village("Stormwatch Crest", "A village embraced by stormy skies and fierce winds.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
zeloria_landmark = Landmark("Zeloria", "A place of ancient power and mystic energies.")
hegrukya_state.add_place(stormwatch_crest_village)
hegrukya_state.add_place(pekkopan_village)
stormwatch_crest_village.add_landmark(zeloria_landmark)
astibberal.add_place(hegrukya_state)
astibberal.add_place(stormwatch_crest_village)
oudrattuthia.add_place(pekkopan_village)
oudrattuthia.add_place(zeloria_landmark)
astibberal.add_place(oudrattuthia)

hegrukya.add_place(astibberal)

kreassiston = Region("Kreassiston", "A region of ancient ruins and magical anomalies.")
zenagon = Continent("Zenagon", "A continent where mysticism and technological advancements coexist.")
keasodor = Region("Keasodor", "A region known for its lush forests and harmonious coexistence with nature.")
kracceviel = Country("Kracceviel", "A country celebrated for its vibrant culture and rich traditions.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
kracceviel.add_place(trilith_drift_state)
kracceviel.add_place(argentia_reach_city)
kracceviel.add_place(zeloria_landmark)

thaslisan = Country("Thaslisan", "A country known for its captivating landscapes and ethereal beauty.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
thaslisan.add_place(dawnshire_state)

darrethen = Region("Darrethen", "A region where enchantment and elegance pervade every corner.")
celestia = Country("Celestia", "A country where celestial beauty and divine radiance shine brightly.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
darrethen.add_place(shimmerfield_state)
darrethen.add_place(ezitahan_city)
darrethen.add_place(reqedor_village)
darrethen.add_place(yocutha_village)
celestia.add_place(darrethen)

sunspire = Country("Sunspire", "A country where the sun's radiant energy fuels life and inspiration.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
sunspire.add_place(dawnshire_state)

eclipsia = Continent("Eclipsia", "A continent where darkness and light dance in eternal balance.")
gloaming_province = Region("Gloaming Province", "A region bathed in the soft hues of twilight and shimmering stars.")
illumina = Country("Illumina", "A country known for its radiant landscapes and ethereal allure.")
astravale = State("Astravale", "A state nestled in the valley of astral wonders.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
starcrest_village.add_landmark(astral_archive)
astravale.add_place(luminaria_city)
astravale.add_place(starcrest_village)
astravale.add_place(zeloria_landmark)
astravale.add_place(royal_library)
astravale.add_place(astral_archive)
astravale.add_place(trilith_drift_palace)
astravale.add_place(verdantide_glade)
illumina.add_place(astravale)
illumina.add_place(luminaria_city)
illumina.add_place(starcrest_village)
eventide = Country("Eventide", "A country where twilight casts a bewitching spell and shadows come alive.")
reqedor_state = State("Reqedor", "A state where ancient forests and mystical beings coexist in harmony.")
wravora_city = Village("Wravora", "A city embraced by the tranquility of nature.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
wravora_city.add_landmark(pekkopan_tower)
ikrecrizar_village.add_landmark(erissenem_gardens)
reqedor_state.add_place(wravora_city)
reqedor_state.add_place(ikrecrizar_village)
eventide.add_place(reqedor_state)

lusteria = Region("Lusteria", "A region of shimmering landscapes and magical allure.")
dawnshire = Country("Dawnshire", "A country where the first light of dawn brings hope and new beginnings.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
shimmerfield_city = Village("Shimmerfield", "A city adorned with shimmering fields of luminescent flowers.")
trilith_drift_palace = Landmark("Trilith Drift Palace", "A magnificent palace perched on floating rock formations.")
shimmerfield_city.add_landmark(trilith_drift_palace)
argentia_reach_city = Village("Argentia Reach", "A coastal village renowned for its silvery beaches and sparkling waters.")
verdantide_glade = Landmark("Verdantide Glade", "An enchanting glade where nature flourishes in vibrant hues.")
argentia_reach_city.add_landmark(verdantide_glade)
dawnshire_state.add_place(shimmerfield_city)
dawnshire_state.add_place(argentia_reach_city)
lusteria.add_place(dawnshire_state)

shadowfen_marsh = Region("Shadowfen Marsh", "A region cloaked in darkness and mystery, where shadows dance on murky waters.")
phakkeacaea = Country("Phakkeacaea", "A country of mist-laden forests and ancient arcane traditions.")
shadowfen_marsh_state = State("Shadowfen Marsh", "A state where the marshlands hold ancient secrets and hidden dangers.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shadowfen_marsh_state.add_place(ezitahan_city)
shadowfen_marsh_state.add_place(reqedor_village)
shadowfen_marsh_state.add_place(yocutha_village)
shadowfen_marsh.add_place(shadowfen_marsh_state)

luxuinia = Country("Luxuinia", "A country known for its ethereal beauty and captivating aura.")
astralyn_bluff_state = State("Astralyn Bluff", "A state where the bluffs hold breathtaking views of astral phenomena.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
zeloria_landmark = Landmark("Zeloria", "A place of ancient power and mystic energies.")
luxuinia_state = State("Astralyn Bluff", "A state where astral energies permeate every corner.")
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
astralyn_bluff_state.add_place(pekkopan_village)
astralyn_bluff_state.add_place(ikrecrizar_village)
luxuinia.add_place(astralyn_bluff_state)

oudrattuthia = Region("Oudrattuthia", "A region of ancient forests and magical enclaves.")
hegrukya = Country("Hegruckya", "A country where ancient spirits and primal forces shape the land.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
astralyn_bluff_city.add_landmark(zeloria_landmark)
hegrukya.add_place(frostholm_highlands_state)
hegrukya.add_place(astralyn_bluff_city)
hegrukya.add_place(shadowfen_marsh_city)

kreassiston = Region("Kreassiston", "A region of ancient ruins and magical anomalies.")
kreassiston.add_place(zeloria_landmark)
kreassiston.add_place(royal_library)
kreassiston.add_place(astral_archive)
kreassiston.add_place(trilith_drift_palace)
kreassiston.add_place(verdantide_glade)

xuppagary = Country("Xuppagary", "A country known for its diverse terrains and cultural heritage.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
xuppagary.add_place(trilith_drift_state)
xuppagary.add_place(argentia_reach_city)

thaslisan = Country("Thaslisan", "A country known for its captivating landscapes and ethereal beauty.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
thaslisan.add_place(dawnshire_state)

darrethen = Region("Darrethen", "A region where enchantment and elegance pervade every corner.")
celestia = Country("Celestia", "A country where celestial beauty and divine radiance shine brightly.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
darrethen.add_place(shimmerfield_state)
darrethen.add_place(ezitahan_city)
darrethen.add_place(reqedor_village)
darrethen.add_place(yocutha_village)
celestia.add_place(darrethen)

sunspire = Country("Sunspire", "A country where the sun's radiant energy fuels life and inspiration.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
sunspire.add_place(dawnshire_state)

universe = Universe("The Vast Cosmos", "A mysterious and expansive cosmos")
thelea = Planet("Thelea", "A mesmerizing celestial body brimming with otherworldly wonders")
continent = Continent("Zephyrion", "A continent within the realm of Thelea, where mystical landscapes and ancient civilizations intertwine")
country = Country("Etherea", "A mystical realm within the continent of Zephyrion, where magic and enchantment flourish")
region = Region("Azure Highlands", "A realm of breathtaking beauty and ethereal landscapes within the country of Etherea")
state = State("Astralweave", "A realm within the Azure Highlands, where cosmic energies intertwine with the fabric of reality")
province = Province("Luminary Reach", "An enchanting province in the realm of Astralweave, known for its radiant beauty and celestial wonders")
city = City("Stellaris", "The celestial capital city of the province Luminary Reach, where starlight dances upon ancient spires")
village = Village("Moonshadow", "A tranquil village nestled beneath the luminescent glow of celestial moons")
town = Town("Stardust Crossing", "A vibrant town where interstellar travelers gather and cosmic energies converge")
landmark = Landmark("Celestial Cascade", "A magnificent waterfall of shimmering stardust, flowing through the heart of the Astralweave realm")

# Add locations to containers

universe.add_location(thelea)
thelea.add_location(continent)
continent.add_location(country)
country.add_location(region)
region.add_location(state)
state.add_location(city)
state.add_location(village)
state.add_location(town)
country.add_location(province)
province.add_location(city)
province.add_location(town)
state.add_location(landmark)


REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\maps.py  
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\characters.py 
class Character:
    def __init__(self, name, health, inventory, alignment, location, dialogue):
        self.name = name
        self.health = health
        self.inventory = inventory
        self.alignment = alignment  # good, evil, neutral
        self.location = location
        self.dialogue = dialogue
        self.alive = True

    def greet(self):
        return f"Hello, I am {self.name}. I am on the {self.alignment} side."

    def is_alive(self):
        return self.alive

    def take_damage(self, damage):
        self.health -= damage
        if self.health <= 0:
            self.alive = False
            self.health = 0

    def speak(self):
        return self.dialogue


class Enemy(Character):
    def __init__(self, name, health, inventory, damage, location, dialogue, alignment="evil"):
        super().__init__(name, health, inventory, alignment, location, dialogue)
        self.damage = damage

    def attack(self, target):
        target.take_damage(self.damage)
        return f"{self.name} attacks {target.name} for {self.damage} damage!"


class Ally(Character):
    def __init__(self, name, health, inventory, help_text, location, dialogue, alignment="good"):
        super().__init__(name, health, inventory, alignment, location, dialogue)
        self.help_text = help_text

    def provide_help(self):
        return f"{self.name} says: {self.help_text}"


# Create characters with their respective locations and dialogues
caelum = Ally("Caelum", 100, [], "I possess extensive knowledge of the ancient civilization.", "Royal Library", "The secrets of the lost civilization shall be unraveled under my guidance!")
eris = Ally("Eris", 100, [], "My unparalleled combat skills and mastery of magic make me an unstoppable force.", "Warrior's Stronghold", "With sword and spell, justice shall prevail!")
vexis = Enemy("Lord Vexis", 120, [], 15, "Shadow Keep", "Your futile attempts to uncover the ancient secrets will only lead to your demise!")
informant1 = Enemy("Hepzibah", 80, [], 10, "Hidden Library", "My allegiance lies with Lord Vexis. Your every discovery shall be reported!", alignment="neutral")
informant2 = Enemy("Algernon", 80, [], 10, "Scholar's Retreat", "Rumors of your endeavors have reached my ears. Lord Vexis will be delighted!", alignment="neutral")
spy1 = Enemy("Phineas", 90, [], 12, "Underground Lair", "Your every move is being meticulously observed. Lord Vexis shall always have the advantage!", alignment="evil")
spy2 = Enemy("Lavinia", 90, [], 12, "Assassin's Hideout", "Lord Vexis demands your swift demise. Prepare to meet your untimely end!", alignment="evil")
hero1 = Ally("Gallant", 100, [], "I stand ready to assist you!", "Castle Stronghold", "Hail, noble adventurer! I am Gallant, ever loyal to our cause!")
villain1 = Enemy("Malachi", 100, [], 10, "Dark Citadel", "Tremble before the might of Malachi! True fear shall consume your heart!")
ally1 = Ally("Valeria", 80, [], "My expertise in combat is at your disposal.", "Frostholm Village", "Together, we shall triumph over any adversity!")
ally2 = Ally("Seraphine", 75, [], "My vast knowledge shall aid you in your quests.", "Academy of Wisdom", "Wisdom and courage shall guide our path to victory!")
villain2 = Enemy("Grimgor", 60, [], 8, "Shadow Caverns", "Behold the might of Grimgor, the harbinger of darkness!", alignment="evil")
ally3 = Ally("Braveheart", 80, [], "With unwavering loyalty, I shall fight alongside you.", "Warrior's Camp", "Fear not, for Braveheart shall stand as your shield!")
ally4 = Ally("Zephyrus", 70, [], "As master of the skies, I bring strategic advantage.", "Aerie Heights", "Take flight with me, and victory shall be ours to claim!")
ally5 = Ally("Ironclad", 80, [], "I shall shatter all obstacles with indomitable strength.", "Ironforge Fortress", "No barrier shall endure against the might of Ironclad!")
villain3 = Enemy("Vex'Nor", 70, [], 10, "Shadowed Ruins", "Tremble before the dark powers of Vex'Nor!", alignment="evil")
villain4 = Enemy("Lysandra", 60, [], 10, "Enchantress Tower", "The magic within me shall consume all of Elysium!", alignment="evil")
ally6 = Ally("Keeneye", 80, [], "My keen vision detects hidden dangers from afar.", "Woodland Outpost", "Ever watchful, I shall ensure our safety.")
ally7 = Ally("Bumblethorn", 75, [], "As a defender of the realm, I can aid with bee-related challenges.", "Beehive Grove", "In unity with the bees, we shall overcome all obstacles!")
ally8 = Ally("Morphius", 80, [], "I possess the power to shape-shift and deceive our foes.", "Shadowhaven Sanctum", "Through myriad forms, we shall emerge victorious!")
villain5 = Enemy("Dreadheart", 100, [], 12, "Twilight Keep", "I am the embodiment of your darkest nightmares! Dreadheart reigns supreme!", alignment="evil")
ally9 = Ally("Thornwhisper", 85, [], "I blend into nature's embrace, enabling stealth and subterfuge.", "Whispering Woods", "Nature's embrace conceals our every move.")
villain6 = Enemy("Arachnon", 70, [], 10, "Webbed Depths", "Escape from my intricate web? Impossible!", alignment="evil")
ally10 = Ally("Warden Reginald", 70, [], "As the noble ruler, I have knowledge and resources at our disposal.", "Royal Citadel", "With honor and wisdom, I lead our cause!")
ally11 = Ally("Lady Elara", 70, [], "As the wise councilor, my guidance shall illuminate our path.", "Chamber of Wisdom", "Never underestimate the power of compassion and wisdom.")
ally12 = Ally("Aurora", 90, [], "I am the mystical guardian, imbued with the essence of ancient magic.", "Sanctum of Mysteries", "Harness the magic within you, and all shall be possible!")
ally13 = Ally("Eldric", 100, [], "In the absence of the hero, I shall provide aid and guidance.", "Hall of Heroes", "By the ancient oaths, I answer your call!")
villain7 = Enemy("Slaughterbane", 75, [], 10, "Bloodthorn Arena", "No whip can match the fury of Slaughterbane!", alignment="evil")
villain8 = Enemy("Venomstrike", 70, [], 8, "Poisoned Marsh", "Feel the venom coursing through your veins! You are powerless against Venomstrike!", alignment="evil")
villain9 = Enemy("Nightshade", 80, [], 10, "Cursed Crypts", "Your darkest fears shall nourish Nightshade's power!", alignment="evil")
neutral1 = Character("Equinox", 90, [], "I maintain the delicate balance of the cosmos.", "Astral Sanctum", "I am Equinox, guardian of cosmic harmony.", alignment="neutral")
ally14 = Ally("Whirlwind", 80, [], "I summon the cyclone's might, tearing through our enemies.", "Tempest Spire", "The storm's wrath is at our command! Unleash the fury of the whirlwind!")

characters = [caelum, eris, vexis, informant1, informant2, spy1, spy2, hero1, villain1, ally1, ally2, villain2, ally3, ally4, ally5, villain3, villain4, ally6, ally7, ally8, villain5, ally9, villain6, ally10, ally11, ally12, ally13, villain7, villain8, villain9, neutral1, ally14]
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat.py 
#combat.py

from combat_controller import CombatController
import random


class Combat:
    @staticmethod
    def validate_character(character):
        """
        Validate the character object
        """
        if character is None or not all(hasattr(character, attr) for attr in ['attack_bonus', 'damage_bonus', 'weapon', 'armor_class', 'health']):
            raise ValueError('Invalid character')

    @staticmethod
    def roll_die(sides):
        """
        Simulate a roll of a die with the specified number of sides.
        """
        return random.randint(1, sides)

    @staticmethod
    def attack(attacker, defender):
        """
        Simulate an attack from the attacker to the defender.
        """
        # Validate the characters
        Combat.validate_character(attacker)
        Combat.validate_character(defender)

        # Roll a d20 to determine if the attack hits
        roll = Combat.roll_die(20) + attacker.attack_bonus
        if roll >= defender.armor_class:
            # The attack hits
            # Roll a die to determine damage
            damage = Combat.roll_die(attacker.weapon.damage_die) + attacker.damage_bonus
            # Apply special ability damage if available
            if attacker.weapon.special_ability:
                special_damage = Combat.roll_die(attacker.weapon.special_ability['damage_die'])
                damage += special_damage
                print(f"{attacker.name} hits {defender.name} with special ability {attacker.weapon.special_ability['name']} for {special_damage} damage.")
            # Apply damage to the defender
            defender.health -= damage
            print(f"{attacker.name} hits {defender.name} for {damage} damage.")
        else:
            # The attack misses
            print(f"{attacker.name}'s attack misses.")

def engage_combat(self, enemy_name):
    enemy = self.player.current_location.get_creature(enemy_name)
    if enemy:
        print(f"A wild {enemy.name} appears!")
        while self.player.health > 0 and enemy.health > 0:
            # Player's turn
            CombatController.attack(self.player, enemy)
            if enemy.health <= 0:
                print(f"You have defeated {enemy.name}!")
                break
            # Enemy's turn
            CombatController.attack(enemy, self.player)
            if self.player.health <= 0:
                print("You have been defeated...")
                break
    else:
        print("There is no such creature here.")

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\combat_controller.py 
# combat_controller.py
import random

class CombatController:
    @staticmethod
    def validate_character(character):
        # Validation code here
        if character is None or not all(hasattr(character, attr) for attr in ['attack_bonus', 'damage_bonus', 'weapon', 'armor_class', 'health']):
            raise ValueError('Invalid character')

    @staticmethod
    def roll_die(sides):
        # Roll die code here
        return random.randint(1, sides)

    @staticmethod
    def attack(attacker, defender):
        # Attack simulation code here
        roll = CombatController.roll_die(20) + attacker.attack_bonus
        if roll >= defender.armor_class:
            damage = CombatController.roll_die(attacker.weapon.damage_die) + attacker.damage_bonus
            defender.health -= damage
            print(f"{attacker.name} hits {defender.name} for {damage} damage.")
        else:
            print(f"{attacker.name}'s attack misses.")

    @staticmethod
    def engage_combat(player, enemy):
        # Combat engagement code here
        print(f"A wild {enemy.name} appears!")
        while player.health > 0 and enemy.health > 0:
            CombatController.attack(player, enemy)
            if enemy.health <= 0:
                print(f"You have defeated {enemy.name}!")
                break
            CombatController.attack(enemy, player)
            if player.health <= 0:
                print("You have been defeated...")
                break

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\commands.py 
#commands.py
from . import save_load
from . import controller
from . import combat
from .characters import characters

class Commands:

    def __init__(self, game_state):
        self.game_state = game_state
        self.combat = combat.Combat()
        
    def look(self):
        location = self.game_state.get_player_location()
        return location.get_description()

    def use_item(self, item_name):
        player = self.game_state.get_player()
        item = player.get_item(item_name)
        if item:
            return item.use()
        else:
            return "You don't have that item."

    def move(self, direction):
        if direction in ['north', 'south', 'east', 'west', 'northeast', 'northwest', 'southeast', 'southwest', 'up', 'down']:
            new_location = self.game_state.move_player(direction)
            return new_location.get_description()
        else:
            return "Invalid direction."

    def save(self):
        # Call the save function from save_load module
        save_load.save_game(self.game_state.player)
        return "Game saved."

    def restore(self):
        # Call the load function from save_load module
        self.game_state.player = save_load.load_game()
        return "Game restored."

    def restart(self):
        # Reset the game state in game_state
        self.game_state.reset_state()
        return "Game restarted."

    def verbose(self):
        # Enable verbose mode in game_state
        self.game_state.verbose = True
        return "Verbose mode on."

    def score(self):
        # Fetch score from player object
        return f"Your score is {self.game_state.player.score}."

    def diagnostic(self):
        # Let's assume game_state has a diagnostic method which runs some checks
        result = self.game_state.diagnostic()
        return "Everything seems to be working fine." if result else "Something seems off."

    def brief(self):
        # Enable brief mode in game_state
        self.game_state.brief = True
        return "Brief mode on."

    def superbrief(self):
        # Enable superbrief mode in game_state
        self.game_state.superbrief = True
        return "Superbrief mode on."

    def quit(self):
        # Call game_state's quit method
        self.game_state.quit()
        return "Quitting game."

    def climb(self):
        # Climb command implementation would depend on the game world.
        # If climbing is context-dependent, you'll need to check the player's location, possible actions, etc.
        # For now, let's say that climbing just changes the player's altitude
        self.game_state.player.altitude += 1
        return "You start to climb."

def redo_last_command(self):
    # Redo last command implementation
    if self.game_state.last_command is not None:
        # Recall the last command and parameters used and perform the action
        return getattr(self, self.game_state.last_command[0])(*self.game_state.last_command[1:])
    else:
        return "No previous command to redo."

def go(self, direction):
    # Go command implementation
    return self.move(direction)

def enter(self, place):
    # Enter command implementation
    if self.game_state.get_player_location().name == place:
        return "You're already here."
    else:
        possible_directions = self.game_state.get_player_location().get_exits()
        for direction in possible_directions:
            if possible_directions[direction].name == place:
                return self.move(direction)
        return f"There's no {place} nearby to enter."

def go_in(self, place):
    # Go in command implementation
    return self.enter(place)

def go_out(self):
    # Go out command implementation
    return self.move("out")

def say_hello(self):
    # Say hello command implementation
    return "You say hello. It echoes in the quiet."

def get_item(self, item_name):
    # Get/take/grab command implementation
    item = self.game_state.get_player_location().get_item(item_name)
    if item:
        self.game_state.get_player().add_item(item)
        return f"You have taken the {item_name}."
    else:
        return f"There's no {item_name} here to take."

def get_all_items(self):
    # Get/take/grab all command implementation
    items = self.game_state.get_player_location().get_items()
    for item in items:
        self.game_state.get_player().add_item(item)
    return "You've taken all the items."

def throw_item_at(self, item_name, target):
    # Throw item at command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        self.game_state.get_player().remove_item(item_name)
        return f"You've thrown the {item_name} at the {target}."
    else:
        return f"You don't have a {item_name} to throw."

def open_container(self, container_name):
    # Open container command implementation
    container = self.game_state.get_player_location().get_container(container_name)
    if container:
        return container.open()
    else:
        return f"There's no {container_name} here to open."

def open_exit(self, exit_name):
    # Open exit command implementation
    exit = self.game_state.get_player_location().get_exit(exit_name)
    if exit:
        if exit.is_locked():
            return f"The {exit_name} is locked."
        else:
            return exit.open()
    else:
        return f"There's no {exit_name} here to open."

def read_item(self, item_name):
    # Read command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_readable():
            return item.read()
        else:
            return f"You can't read the {item_name}."
    else:
        return f"You don't have a {item_name} to read."

def drop_item(self, item_name):
    # Drop command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        self.game_state.get_player().remove_item(item_name)
        self.game_state.get_player_location().add_item(item)
        return f"You have dropped the {item_name}."
    else:
        return f"You don't have a {item_name} to drop."

def put_item_in_container(self, item_name, container_name):
    # Put command implementation
    item = self.game_state.get_player().get_item(item_name)
    container = self.game_state.get_player_location().get_container(container_name)
    if item and container:
        self.game_state.get_player().remove_item(item_name)
        container.add_item(item)
        return f"You have put the {item_name} in the {container_name}."
    else:
        return f"You don't have a {item_name} to put in the {container_name}."

def turn_control_with_item(self, control_name, item_name):
    # Turn control with item command implementation
    control = self.game_state.get_player_location().get_control(control_name)
    item = self.game_state.get_player().get_item(item_name)
    if control and item:
        return control.turn_with(item)
    else:
        return f"You can't turn the {control_name} with the {item_name}."

def turn_on_item(self, item_name):
    # Turn on item command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.turn_on()
    else:
        return f"You don't have a {item_name} to turn on."

def turn_off_item(self, item_name):
    # Turn off item command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.turn_off()
    else:
        return f"You don't have a {item_name} to turn off."

def move_object(self, object_name):
    # Move object command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    if object:
        return object.move()
    else:
        return f"There's no {object_name} here to move."

def attack_creature_with_item(self, creature_name, item_name):
    # Attack creature with item command implementation
    creature = self.game_state.get_player_location().get_creature(creature_name)
    item = self.game_state.get_player().get_item(item_name)
    if creature and item:
        return self.combat.attack(creature, item)
    else:
        return f"You can't attack the {creature_name} with the {item_name}."

def examine_object(self, object_name):
    # Examine command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    if object:
        return object.examine()
    else:
        return f"There's no {object_name} here to examine."

def show_inventory(self):
    # Inventory command implementation
    return self.game_state.get_player().show_inventory()

def eat_item(self, item_name):
    # Eat command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_edible():
            self.game_state.get_player().remove_item(item_name)
            return item.eat()
        else:
            return f"You can't eat the {item_name}."
    else:
        return f"You don't have a {item_name} to eat."

def shout(self):
    # Shout command implementation
    return "You shout loudly. The echo lingers in the air."

def close_door(self, door_name):
    # Close door command implementation
    door = self.game_state.get_player_location().get_door(door_name)
    if door:
        return door.close()
    else:
        return f"There's no {door_name} here to close."

def tie_item_to_object(self, item_name, object_name):
    # Tie item to object command implementation
    item = self.game_state.get_player().get_item(item_name)
    object = self.game_state.get_player_location().get_object(object_name)
    if item and object:
        return object.tie_item(item)
    else:
        return f"You can't tie the {item_name} to the {object_name}."

def pick_item(self, item_name):
    # Pick command implementation
    return self.get_item(item_name)

def kill_self_with_weapon(self, weapon_name):
    # Kill self with weapon command implementation
    weapon = self.game_state.get_player().get_item(weapon_name)
    if weapon:
        return self.combat.self_harm(weapon)
    else:
        return "You don't have the weapon to do this."

def break_item_with_item(self, item_to_break_name, breaking_item_name):
    # Break item with item command implementation
    item_to_break = self.game_state.get_player().get_item(item_to_break_name)
    breaking_item = self.game_state.get_player().get_item(breaking_item_name)
    if item_to_break and breaking_item:
        return item_to_break.break_with(breaking_item)
    else:
        return "You don't have the necessary items to do this."

def attack_creature_with_item(self, creature_name, item_name):
    # Attack creature with item command implementation
    creature = self.game_state.get_player_location().get_creature(creature_name)
    item = self.game_state.get_player().get_item(item_name)
    if creature and item:
        return self.combat.attack(creature, item)
    else:
        return "You can't attack the creature with this item."

def pray(self):
    # Pray command implementation
    return "You start to pray."

def drink_item(self, item_name):
    # Drink command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        if item.is_drinkable():
            self.game_state.get_player().remove_item(item_name)
            return item.drink()
        else:
            return "You can't drink this item."
    else:
        return "You don't have the item to drink."

def smell_item(self, item_name):
    # Smell command implementation
    item = self.game_state.get_player().get_item(item_name)
    if item:
        return item.smell()
    else:
        return "You don't have the item to smell."

def cut_object_with_weapon(self, object_name, weapon_name):
    # Cut object with weapon command implementation
    object = self.game_state.get_player_location().get_object(object_name)
    weapon = self.game_state.get_player().get_item(weapon_name)
    if object and weapon:
        return object.cut_with(weapon)
    else:
        return "You can't cut the object with this weapon."

def wand_commands(self):
    # Wand commands implementation
    return "The wand glows faintly."

def fall(self):
    # Wand fall command implementation
    return "You command the wand to fall. It thuds against the ground."

def fantasize(self):
    # Wand fantasize command implementation
    return "You command the wand to fantasize. It does nothing."

def fear(self):
    # Wand fear command implementation
    return "You command the wand to fear. It trembles slightly."

def feeble(self):
    # Wand feeble command implementation
    return "You command the wand to become feeble. It dims slightly."

def fence(self):
    # Wand fence command implementation
    return "You command the wand to fence. It does nothing."

def ferment(self):
    # Wand ferment command implementation
    return "You command the wand to ferment. It does nothing."

def fierce(self):
    # Wand fierce command implementation
    return "You command the wand to become fierce. It sparks briefly."

def filch(self):
    # Wand filch command implementation
    return "You command the wand to filch. It does nothing."

def fireproof(self):
    # Wand fireproof command implementation
    return "You command the wand to become fireproof. It glows red briefly."

def float(self):
    # Wand float command implementation
    return "You command the wand to float. It rises a few inches off the ground."

def fluoresce(self):
    # Wand fluoresce command implementation
    return "You command the wand to fluoresce. It emits a soft, radiant light."

def free(self):
    # Wand free command implementation
    return "You command the wand to free. It briefly feels lighter in your hand."

def freeze(self):
    # Wand freeze command implementation
    return "You command the wand to freeze. It chills momentarily."

def frobizz(self):
    # Wand frobizz command implementation
    return "You command the wand to frobizz. It vibrates momentarily."

def frobnoid(self):
    # Wand frobnoid command implementation
    return "You command the wand to frobnoid. It wobbles briefly."

def frobozzle(self):
    # Wand frobozzle command implementation
    return "You command the wand to frobozzle. It remains stubbornly normal."

def fry(self):
    # Wand fry command implementation
    return "You command the wand to fry. It warms up slightly."

def fudge(self):
    # Wand fudge command implementation
    return "You command the wand to fudge. It gets slightly sticky."

def fumble(self):
    # Wand fumble command implementation
    return "You command the wand to fumble. It nearly slips from your grip."

def engage_combat(self, enemy):
    # Engage combat command implementation
    enemy = self.game_state.get_player_location().get_creature(enemy)
    if enemy:
        self.combat.initiate_combat(self.game_state.get_player(), enemy)
        return "You engage in combat!"
    else:
        return "There is no such creature here."

    # Add more commands as needed

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\controller.py 
# controller.py

import curses

class Controller:
    def __init__(self, game):
        self.game = game
        self.actionable_commands = ["look", "use item", "move"]
        self.last_command = None

    def parse_input(self, c):
        # Map the key to an action
        if c == curses.KEY_UP:
            direction = "north"
            command = "move north"
        elif c == curses.KEY_DOWN:
            direction = "south"
            command = "move south"
        elif c == curses.KEY_LEFT:
            direction = "west"
            command = "move west"
        elif c == curses.KEY_RIGHT:
            direction = "east"
            command = "move east"
        elif c == ord('q'):
            command = "quit"
        else:
            return None  # Unhandled key press, return None

        # Save the last command
        self.last_command = command
        return command

    def run_command(self, command):
        if command == "quit":
            return False
        elif command in self.actionable_commands:
            # Call the corresponding function for this command
            getattr(self.game.player, command.replace(" ", "_"))()
        return True

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game.py 
#game.py

from combat_controller import CombatController

class Player:
    def __init__(self, name, health, inventory):
        self._name = name
        self._health = health
        self._inventory = inventory
        self._current_location = None
        self._active_quests = []

    @property
    def name(self):
        return self._name

    @property
    def health(self):
        return self._health

    @property
    def inventory(self):
        return self._inventory

    @property
    def current_location(self):
        return self._current_location

    @current_location.setter
    def current_location(self, location):
        self._current_location = location

    @property
    def active_quests(self):
        return self._active_quests

    def get_item(self, name):
        """
        Get the item with the specified name from the player's inventory.
        Returns the item if found, None otherwise.
        """
        for item in self._inventory:
            if item.name.lower() == name.lower():
                return item
        return None

    def use_item(self, item):
        """
        Use the specified item.
        Returns True if the item was successfully used, False otherwise.
        """
        if item in self._inventory:
            self._inventory.remove(item)
            self._health += item.effect
            return True
        else:
            return False

    def get_quest(self, name):
        """
        Get the quest with the specified name from the player's active quests.
        Returns the quest if found, None otherwise.
        """
        for quest in self._active_quests:
            if quest.name.lower() == name.lower():
                return quest
        return None

    def start_quest(self, quest):
        """
        Start the specified quest.
        Returns True if the quest was successfully started, False otherwise.
        """
        if quest in self._active_quests:
            return False
        else:
            self._active_quests.append(quest)
            return True

    def complete_quest(self, quest):
        """
        Complete the specified quest.
        Returns True if the quest was successfully completed, False otherwise.
        """
        if quest in self._active_quests:
            self._active_quests.remove(quest)
            return True
        else:
            return False

    def add_item(self, item):
        """
        Add the specified item to the player's inventory.
        """
        self._inventory.append(item)

    def move(self, direction):
        """
        Move the player in the specified direction if possible.
        Returns True if the move was successful, False otherwise.
        """
        next_location = self.current_location.get_adjacent_Location(direction)
        if next_location is not None:
            self.current_location = next_location
            return True
        else:
            return False
        
class Location:
    def __init__(self, name, description):
        self._name = name
        self._description = description
        self._adjacent_locations = {}

    @property
    def name(self):
        return self._name

    @property
    def description(self):
        return self._description

    @property
    def adjacent_locations(self):
        return self._adjacent_locations

    def connect_location(self, location, direction):
        """
        Connect this location to the specified location in the specified direction.
        """
        self._adjacent_locations[direction] = location
        location._adjacent_locations[self.get_opposite_direction(direction)] = self

    def get_adjacent_location(self, direction):
        """
        Get the adjacent location in the specified direction.
        Returns the location if found, None otherwise.
        """
        return self._adjacent_locations.get(direction)

    def get_opposite_direction(self, direction):
        """
        Get the opposite direction of the specified direction.
        """
        opposite_directions = {
            "north": "south",
            "south": "north",
            "east": "west",
            "west": "east"
        }
        return opposite_directions.get(direction)

    def move(self, direction):
        """
        Move the player in the specified direction if possible.
        Returns True if the move was successful, False otherwise.
        """
        next_location = self.current_location.get_adjacent_location(direction)
        if next_location is not None:
            self.current_location = next_location
            return True
        else:
            return False

    def get_item(self, name):
        """
        Get the item with the specified name from the player's inventory.
        Returns the item if found, None otherwise.
        """
        for item in self.inventory:
            if item.name.lower() == name.lower():
                return item
        return None

    def use_item(self, item):
        """
        Use the specified item.
        Returns True if the item was successfully used, False otherwise.
        """
        if item in self.inventory:
            self.inventory.remove(item)
            self.health += item.effect
            return True
        else:
            return False

    def get_quest(self, name):
        """
        Get the quest with the specified name from the player's active quests.
        Returns the quest if found, None otherwise.
        """
        for quest in self.active_quests:
            if quest.name.lower() == name.lower():
                return quest
        return None

    def start_quest(self, quest):
        """
        Start the specified quest.
        Returns True if the quest was successfully started, False otherwise.
        """
        if quest in self.active_quests:
            return False
        else:
            self.active_quests.append(quest)
            return True

    def complete_quest(self, quest):
        """
        Complete the specified quest.
        Returns True if the quest was successfully completed, False otherwise.
        """
        if quest in self.active_quests:
            self.active_quests.remove(quest)
            return True
        else:
            return False

    def add_item(self, item):
        """
        Add the specified item to the player's inventory.
        """
        self.inventory.append(item)


class Location:
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.adjacent_Locations = {}

    def connect(self, Location, direction):
        """
        Connect this Location to the specified Location in the specified direction.
        """
        self.adjacent_Locations[direction] = Location
        Location.adjacent_Locations[self.get_opposite_direction(direction)] = self

    def get_adjacent_Location(self, direction):
        """
        Get the adjacent Location in the specified direction.
        Returns the Location if found, None otherwise.
        """
        return self.adjacent_Locations.get(direction)

    def get_description(self):
        """
        Get the description of this Location.
        """
        return self.description

    def get_opposite_direction(self, direction):
        """
        Get the opposite direction of the specified direction.
        """
        if direction == "north":
            return "south"
        elif direction == "south":
            return "north"
        elif direction == "east":
            return "west"
        elif direction == "west":
            return "east"
        else:
            return None


class Item:
    def __init__(self, name, description, effect):
        self.name = name
        self.description = description
        self.effect = effect

    def get_description(self):
        """
        Get the description of this item.
        """
        return self.description

class Quest:
    def __init__(self, name, description, objectives):
        self.name = name
        self.description = description
        self.objectives = objectives

    def get_description(self):
        """
        Get the description of this quest.
        """

        return self.description
    
class SideQuest(Quest):
    def __init__(self, name, description, objectives):
        super().__init__(name, description, objectives)
        self.side_quest_property = None  # Add additional properties specific to side quests


REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\game_controller.py 
#game_controller.py

from combat_controller import CombatController
from game import Player, Location, Item, Quest

class GameController:
    def __init__(self):
        # Initialize game objects
        self.player = Player("Player", 100, [])
        self.location1 = Location("Start Village", "You are in a peaceful village.")
        self.location2 = Location("Dark Forest", "You have entered a gloomy forest.")
        self.location3 = Location("Mysterious Castle", "You are at the entrance of a grand castle.")
        # Connect locations
        self.location1.connect(self.location2, "north")
        self.location1.connect(self.location3, "east")
        self.location2.connect(self.location1, "south")
        self.location3.connect(self.location1, "west")
        self.player.current_location = self.location1
        self.show_actions = True  # Variable to track if actions should be displayed
        self.combat_controller = CombatController()

    def process_command(self, command):
        # Parse user input
        parts = command.split()
        action = parts[0]
        
        if action == "toggle actions":
            self.show_actions = not self.show_actions
        elif action == "move":            
            direction = parts[1]
            if self.player.move(direction):
                print("Moved to", self.player.current_location.name)
            else:
                print("Cannot move in that direction.")
        elif action == "use":
            item_name = " ".join(parts[1:])
            item = self.player.get_item(item_name)
            if item is not None:
                if self.player.use_item(item):
                    print("Used", item.name)
                else:
                    print("Cannot use that item.")
            else:
                print("Item not found.")
        elif action == "travel":
            destination = parts[1]
            method = " ".join(parts[2:])  # Assuming method can be more than one word
            self.player.travel(destination, method)
        elif action == "start":
            quest_name = " ".join(parts[1:])
            quest = self.player.get_quest(quest_name)
            if quest is not None:
                if self.player.start_quest(quest):
                    print("Started quest:", quest.name)
                else:
                    print("Cannot start that quest.")
            else:
                print("Quest not found.")
        elif action == "complete":
            quest_name = " ".join(parts[1:])
            quest = self.player.get_quest(quest_name)
            if quest is not None:
                if self.player.complete_quest(quest):
                    print("Completed quest:", quest.name)
                else:
                    print("Cannot complete that quest.")
            else:
                print("Quest not found.")
        elif action == "combat":
            enemy_name = " ".join(parts[1:])
            result = self.engage_combat(enemy_name)
            print(result)
        else:
            print("Invalid command.")

    def engage_combat(self, enemy_name):
        enemy = self.player.current_location.get_creature(enemy_name)
        if enemy:
            self.combat_controller.initiate_combat(self.player, enemy)
            return "You engage in combat!"
        else:
            return "There is no such creature here."

    def run_game_loop(self):
        # Start game loop
        while True:
            # Print current location description
            print(self.player.current_location.get_description())
            # Print available actions
            if self.show_actions:
                print("Available actions:")
                print("move <direction>")
                print("use <item>")
                print("start <quest>")
                print("complete <quest>")
                print("travel <destination> <method>")
                print("toggle actions")
                print("combat <enemy>")
            
            # Get user input
            command = input("Enter command: ")
            
            self.process_command(command)

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\items.py 
from game import Item
# items.py

class Item:
    def __init__(self, id, name, description, weight, armor_value, attack_value, durability, rarity, value, usable, stackable, effects=None, range=None, elemental_damage=None, required_level=0, quest_item=False):
        self.id = id
        self.name = name
        self.description = description
        self.weight = weight
        self.armor_value = armor_value
        self.attack_value = attack_value
        self.durability = durability
        self.rarity = rarity
        self.value = value
        self.usable = usable
        self.stackable = stackable
        self.effects = effects
        self.range = range
        self.elemental_damage = elemental_damage
        self.required_level = required_level
        self.quest_item = quest_item

item_type_translation = {
    "WEP": "Weapon",
    "KEY": "Key",
    "ARM": "Armor",
    "POT": "Potion",
    # Add more item type codes and translations as needed
}

item_dict = {
    "00000001": Item("00000001", "Healing Elixir", "A mystical elixir that restores health and mends wounds.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=10, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000002": Item("00000002", "Blade of Destiny", "Forged by ancient sorcery, this blade holds the fate of kingdoms.",
                     weight=5.0, armor_value=0, attack_value=50, durability=100, rarity="Legendary",
                     value=1000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000003": Item("00000003", "Shield of Guardians", "An enchanted shield that shields the bearer from dark forces.",
                     weight=10.0, armor_value=50, attack_value=0, durability=150, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000004": Item("00000004", "Ancient Map of Eldoria", "An ancient map that reveals the hidden realms of Eldoria.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000005": Item("00000005", "Key to Forbidden Citadel", "This key unlocks the gates of the forbidden Citadel.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=20, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=True),
    "00000006": Item("00000006", "Axe of Titan's Fury", "An immense battle axe imbued with the fury of ancient Titans.",
                     weight=8.0, armor_value=0, attack_value=75, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000007": Item("00000007", "Mystic Chest of Enigma", "A mystical chest filled with enigmatic secrets and hidden knowledge.",
                     weight=20.0, armor_value=0, attack_value=0, durability=1, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000008": Item("00000008", "Orb of Divine Insight", "A radiant orb that grants profound wisdom and foresight.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000009": Item("00000009", "Amulet of Arcane Power", "An amulet that channels arcane energy to enhance the wearer's abilities.",
                     weight=0.2, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "0000000A": Item("0000000A", "Ethereal Blaster", "A futuristic blaster that unleashes powerful ethereal energy bolts.",
                     weight=2.0, armor_value=0, attack_value=60, durability=60, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=6, quest_item=False),
    "0000000B": Item("0000000B", "Shadowstrike Blade", "A legendary blade that harnesses the darkness itself, capable of slicing through armor and vanquishing enemies with a single strike.",
                     weight=4.5, armor_value=0, attack_value=80, durability=120, rarity="Epic",
                     value=1500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "0000000C": Item("0000000C", "Crystalized Orb", "A mystic orb that emanates a brilliant light, capable of unlocking hidden powers and revealing the secrets of the arcane.",
                     weight=1.0, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000000D": Item("0000000D", "Radiant Essence", "A shimmering essence infused with celestial energy, radiating with healing properties and restoring vitality to the wounded.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=20, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000000E": Item("0000000E", "Dragonheart Pendant", "A pendant crafted from the heart of a mighty dragon, granting the wearer impenetrable defense and the power to withstand even the fiercest of attacks.",
                     weight=0.8, armor_value=60, attack_value=0, durability=80, rarity="Legendary",
                     value=2000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=15, quest_item=False),
    "0000000F": Item("0000000F", "Tome of Arcane Knowledge", "A tome filled with ancient wisdom and forbidden spells, offering the key to unlocking the secrets of the arcane arts.",
                     weight=2.0, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000010": Item("00000010", "Celestial Longbow", "A bow infused with celestial energy, granting unparalleled accuracy and the ability to unleash devastating arrows imbued with divine power.",
                     weight=3.5, armor_value=0, attack_value=70, durability=150, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000011": Item("00000011", "Frostbite Gauntlets", "Gauntlets forged in the heart of an icy mountain, capable of freezing foes upon contact and providing resistance against frost-based attacks.",
                     weight=1.2, armor_value=40, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000012": Item("00000012", "Thundering Warhammer", "A massive warhammer infused with the power of thunder, generating thunderstorms with each mighty swing and striking fear into the hearts of enemies.",
                     weight=6.0, armor_value=0, attack_value=90, durability=120, rarity="Epic",
                     value=1800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=14, quest_item=False),
    "00000013": Item("00000013", "Luminous Elixir", "An elixir concocted from rare glowing herbs, radiating a soothing aura that restores health and grants temporary resistance to dark magic.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=50, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000014": Item("00000014", "Enchanted Robes", "Robes woven with ancient enchantments, providing exceptional magical protection and enhancing the wearer's spellcasting abilities.",
                     weight=2.5, armor_value=50, attack_value=0, durability=80, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000015": Item("00000015", "Viper's Fang Dagger", "A deadly dagger crafted from the fang of a venomous serpent, delivering swift and precise strikes that inflict deadly poison upon enemies.",
                     weight=0.8, armor_value=0, attack_value=60, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000016": Item("00000016", "Golem Core Shard", "A shard imbued with the essence of a mighty golem, granting the bearer increased strength and the ability to withstand tremendous physical force.",
                     weight=1.5, armor_value=20, attack_value=0, durability=80, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000017": Item("00000017", "Phoenix Feather Quill", "A quill plucked from the majestic wings of a phoenix, enabling the writing of powerful spells and granting the ability to unleash fiery magic.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000018": Item("00000018", "Stormguard Shield", "A shield infused with the power of thunderstorms, creating a protective barrier that absorbs and redirects lightning-based attacks.",
                     weight=4.0, armor_value=70, attack_value=0, durability=150, rarity="Rare",
                     value=900, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "00000019": Item("00000019", "Whisperwind Boots", "Boots crafted from the ethereal essence of the Whisperwind, granting the wearer increased speed and the ability to move in silence.",
                     weight=1.2, armor_value=30, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000001A": Item("0000001A", "Silvermoon Amulet", "An amulet blessed by the moonlight of the Silvermoon, enhancing the bearer's magical prowess and granting the ability to harness moon-based spells.",
                     weight=0.4, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001B": Item("0000001B", "Venomous Vial", "A vial filled with potent venom extracted from deadly creatures, capable of poisoning enemies and causing debilitating effects.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=30, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001C": Item("0000001C", "Astral Compass", "A compass infused with astral energy, guiding the bearer through uncharted realms and revealing hidden paths to distant lands.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001D": Item("0000001D", "Runebound Armor", "Armor adorned with ancient runes, providing mystical protection and increasing the wearer's resistance against magical attacks.",
                     weight=5.0, armor_value=80, attack_value=0, durability=120, rarity="Epic",
                     value=2000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=15, quest_item=False),
    "0000001E": Item("0000001E", "Glimmering Pearl", "A radiant pearl imbued with shimmering magic, granting the ability to illuminate darkness and revealing hidden treasures.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=40, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000001F": Item("0000001F", "Flameforged Greatsword", "A greatsword forged in the heart of an ancient volcano, engulfed in everlasting flames and capable of cleaving through any obstacle.",
                     weight=7.0, armor_value=0, attack_value=100, durability=150, rarity="Epic",
                     value=2200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=16, quest_item=False),
    "00000020": Item("00000020", "Dreamweaver Staff", "A staff woven with the essence of dreams, allowing the bearer to delve into the realm of dreams and harness its power to shape reality.",
                     weight=4.5, armor_value=0, attack_value=60, durability=120, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=12, quest_item=False),
    "00000021": Item("00000021", "Serpent's Scale Mail", "Armor crafted from the scales of a mighty serpent, providing exceptional protection against poison and granting resistance to venomous attacks.",
                     weight=6.5, armor_value=90, attack_value=0, durability=150, rarity="Epic",
                     value=2500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=18, quest_item=False),
    "00000022": Item("00000022", "Starlight Cloak", "A cloak infused with the power of the stars, granting the wearer enhanced agility and the ability to blend with the night sky, rendering them invisible.",
                     weight=2.0, armor_value=30, attack_value=0, durability=100, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=10, quest_item=False),
    "00000023": Item("00000023", "Ancient Relic", "A relic from a bygone era, radiating ancient magic and holding the key to unlocking forgotten knowledge and secrets of the past.",
                     weight=3.0, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000024": Item("00000024", "Swiftwind Boots", "Boots imbued with the swiftness of the wind, granting the wearer increased speed and agility, allowing them to move with unparalleled grace.",
                     weight=1.0, armor_value=20, attack_value=0, durability=80, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000025": Item("00000025", "Cursed Skull Pendant", "A pendant cursed by dark sorcery, granting the bearer increased power but at a terrible cost, consuming their life essence over time.",
                     weight=0.6, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000026": Item("00000026", "Thunderstrike Gauntlets", "Gauntlets infused with the power of thunderstorms, allowing the wearer to summon lightning bolts and unleash devastating electrical attacks.",
                     weight=1.5, armor_value=40, attack_value=0, durability=100, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000027": Item("00000027", "Frostbite Arrows", "Arrows crafted from enchanted ice, capable of freezing enemies upon impact and leaving them vulnerable to subsequent attacks.",
                     weight=0.1, armor_value=0, attack_value=40, durability=100, rarity="Uncommon",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "00000028": Item("00000028", "Essence of Eternal Flame", "A vial containing the essence of an eternal flame, granting the ability to unleash devastating fire-based attacks and ignite surroundings.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=30, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000031": Item("00000031", "Wooden Shovel", "A basic wooden shovel, suitable for digging small holes and trenches.",
                     weight=2.0, armor_value=0, attack_value=5, durability=50, rarity="Common",
                     value=15, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000032": Item("00000032", "Iron Spade", "An iron spade with a sturdy handle, designed for digging in tough and rocky terrains.",
                     weight=3.5, armor_value=0, attack_value=8, durability=75, rarity="Common",
                     value=25, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000033": Item("00000033", "Oil Lantern", "A traditional oil-powered lantern that provides a steady source of light in dark environments.",
                     weight=1.5, armor_value=0, attack_value=0, durability=30, rarity="Common",
                     value=10, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000034": Item("00000034", "Iron Key", "A simple iron key that can unlock various standard locks.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000035": Item("00000035", "Leather Gloves", "A pair of simple leather gloves, providing basic protection for the hands.",
                     weight=0.3, armor_value=5, attack_value=0, durability=20, rarity="Common",
                     value=8, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000036": Item("00000036", "Iron Keyring", "A keyring made of iron, capable of holding multiple keys.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=3, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000037": Item("00000037", "Leather Pouch", "A small leather pouch, useful for storing coins, gems, and other small items.",
                     weight=0.5, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000038": Item("00000038", "Rope", "A sturdy rope made of natural fibers, suitable for various utility purposes.",
                     weight=1.0, armor_value=0, attack_value=0, durability=50, rarity="Common",
                     value=10, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000039": Item("00000039", "Cooking Pot", "A medium-sized cooking pot made of cast iron, perfect for preparing meals during outdoor adventures.",
                     weight=2.5, armor_value=0, attack_value=0, durability=40, rarity="Common",
                     value=15, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003A": Item("0000003A", "Ink Bottle", "A small glass bottle filled with ink, commonly used for writing and drawing.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003B": Item("0000003B", "Chalk", "A piece of chalk made from compressed calcium carbonate, often used for writing on blackboards or marking paths.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003C": Item("0000003C", "Glass Bottle", "A transparent glass bottle with a cork stopper, suitable for holding liquids or small items.",
                     weight=0.4, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=5, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003D": Item("0000003D", "Wooden Bowl", "A simple wooden bowl, useful for holding food or other small items.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=3, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003E": Item("0000003E", "Fishing Net", "A sturdy net made of woven fibers, designed for catching fish or other aquatic creatures.",
                     weight=1.2, armor_value=0, attack_value=0, durability=30, rarity="Common",
                     value=12, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000003F": Item("0000003F", "Iron Buckle", "A sturdy iron buckle commonly used for fastening belts or straps.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000040": Item("00000040", "Leather Belt", "A simple leather belt with a metal buckle, used to hold clothing or secure equipment.",
                     weight=0.4, armor_value=2, attack_value=0, durability=15, rarity="Common",
                     value=6, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000041": Item("00000041", "Wooden Mug", "A sturdy wooden mug, suitable for holding and drinking beverages.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=3, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000042": Item("00000042", "Flint and Steel", "A set consisting of a small piece of flint and a metal striker, used to create sparks and start fires.",
                     weight=0.2, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=7, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000043": Item("00000043", "Wooden Spoon", "A basic wooden spoon, useful for stirring and mixing ingredients while cooking.",
                     weight=0.3, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=2, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000044": Item("00000044", "Traveler's Journal", "A compact journal with blank pages, intended for recording travel experiences and observations.",
                     weight=0.6, armor_value=0, attack_value=0, durability=15, rarity="Common",
                     value=8, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000045": Item("00000045", "Cloth Bandage", "A soft cloth bandage used to wrap wounds and provide basic medical care.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=3, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000046": Item("00000046", "Iron Nails", "A small bundle of iron nails, commonly used for construction or repairing items.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=4, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000047": Item("00000047", "Wooden Comb", "A simple wooden comb, used for grooming and styling hair.",
                     weight=0.2, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=2, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000048": Item("00000048", "Fishing Hook", "A sharp fishing hook attached to a line, used for catching fish.",
                     weight=0.1, armor_value=0, attack_value=2, durability=1, rarity="Common",
                     value=2, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000049": Item("00000049", "Enchanted Cloak", "A magical cloak that provides protection against the elements.",
                     weight=2.0, armor_value=10, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=5, quest_item=False),
    "0000004A": Item("0000004A", "Satchel of Holding", "A satchel enchanted with a dimensional pocket, allowing for increased storage capacity.",
                     weight=1.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004B": Item("0000004B", "Glowstone Pendant", "A pendant infused with magical energy, emitting a soft glow in dark environments.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004C": Item("0000004C", "Smoke Bomb", "A small explosive device that creates a dense cloud of smoke, useful for stealth and distraction.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004D": Item("0000004D", "Mystic Rune", "An ancient rune inscribed on a small stone tablet, believed to hold mystical powers.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004E": Item("0000004E", "Pocket Watch", "A finely crafted pocket watch, allowing for accurate timekeeping.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000004F": Item("0000004F", "Elven Tonic", "A special elven brew that provides temporary enhancements to agility and reflexes.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=250, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000050": Item("00000050", "Ancient Relic", "A mysterious artifact from a long-lost civilization, holding untold secrets.",
                     weight=5.0, armor_value=0, attack_value=0, durability=1, rarity="Rare",
                     value=1000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000051": Item("00000051", "Crystal Staff", "A staff carved from a rare crystal, amplifying magical abilities.",
                     weight=4.0, armor_value=0, attack_value=50, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "00000052": Item("00000052", "Dwarven Ale", "A strong and flavorful ale brewed by skilled dwarven craftsmen.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000053": Item("00000053", "Lucky Charm", "A small charm believed to bring good fortune and increase luck.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000054": Item("00000054", "Ranger's Quiver", "A specially designed quiver that increases arrow capacity and quickens reloading.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000055": Item("00000055", "Silk Gloves", "Elegant gloves made from fine silk, providing dexterity and comfort.",
                     weight=0.2, armor_value=5, attack_value=0, durability=20, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000056": Item("00000056", "Harmonious Flute", "A beautifully crafted wooden flute, capable of producing enchanting melodies.",
                     weight=0.4, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000057": Item("00000057", "Poisoned Dagger", "A small dagger coated with a deadly poison, inflicting additional damage over time.",
                     weight=0.8, armor_value=0, attack_value=30, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000058": Item("00000058", "Thieves' Tools", "A set of tools commonly used by skilled thieves for lockpicking and stealthy activities.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000059": Item("00000059", "Wanderer's Boots", "Sturdy leather boots designed for long journeys, providing comfort and endurance.",
                     weight=1.2, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005A": Item("0000005A", "Soulstone", "A small crystal imbued with ancient magic, capable of storing the essence of fallen creatures.",
                     weight=0.3, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005B": Item("0000005B", "Hunter's Bow", "A well-crafted bow favored by hunters, providing increased accuracy and range.",
                     weight=2.0, armor_value=0, attack_value=40, durability=60, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005C": Item("0000005C", "Potion of Invisibility", "A magical potion that grants temporary invisibility to the drinker.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000005D": Item("0000005D", "Elven Bow", "An elegant bow crafted by skilled elven archers, granting increased precision and power.",
                     weight=1.8, armor_value=0, attack_value=45, durability=70, rarity="Rare",
                     value=700, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=7, quest_item=False),
    "0000005E": Item("0000005E", "Wand of Fireballs", "A wand infused with fire magic, allowing the wielder to unleash powerful fireballs.",
                     weight=0.8, armor_value=0, attack_value=55, durability=60, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=8, quest_item=False),
    "0000005F": Item("0000005F", "Elixir of Strength", "A potent elixir that temporarily enhances the drinker's physical strength.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000060": Item("00000060", "Enchanted Necklace", "A necklace adorned with enchanted gemstones, bestowing magical protection.",
                     weight=0.6, armor_value=15, attack_value=0, durability=40, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000061": Item("00000061", "Bard's Lute", "A musical instrument favored by bards, capable of enchanting listeners with its melodies.",
                     weight=1.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000062": Item("00000062", "Cloak of Shadows", "A dark cloak that grants the wearer enhanced stealth and evasion abilities.",
                     weight=1.5, armor_value=20, attack_value=0, durability=50, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000063": Item("00000063", "Scroll of Teleportation", "A magical scroll that instantly transports the reader to a previously marked location.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000064": Item("00000064", "Silk Robes", "Exquisite robes made from fine silk, providing magical affinity and comfort.",
                     weight=2.0, armor_value=15, attack_value=0, durability=30, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000065": Item("00000065", "Book of Enchantments", "A thick book containing ancient knowledge of enchantments and magical rituals.",
                     weight=1.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000066": Item("00000066", "Trap Kit", "A set of tools used for setting up traps and mechanisms to deter intruders.",
                     weight=1.2, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000067": Item("00000067", "Enchanted Bracelet", "A bracelet infused with magical energies, enhancing the wearer's spellcasting abilities.",
                     weight=0.4, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000068": Item("00000068", "Phoenix Feather", "A feather from a mythical phoenix, said to possess regenerative properties.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000069": Item("00000069", "Crystal Shard", "A shard of rare crystal with various magical properties.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006A": Item("0000006A", "Sneak's Dagger", "A small, lightweight dagger favored by stealthy assassins.",
                     weight=0.6, armor_value=0, attack_value=25, durability=40, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006B": Item("0000006B", "Sorcerer's Hat", "A pointed hat worn by sorcerers and wizards, enhancing magical potency.",
                     weight=0.3, armor_value=5, attack_value=0, durability=30, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006C": Item("0000006C", "Sleeping Bag", "A portable and comfortable sleeping bag for resting during long journeys.",
                     weight=1.0, armor_value=0, attack_value=0, durability=1, rarity="Common",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006D": Item("0000006D", "Elixir of Clarity", "A magical elixir that clears the mind and enhances focus and concentration.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006E": Item("0000006E", "Explorer's Hat", "A wide-brimmed hat favored by adventurers and explorers, providing protection from the sun and rain.",
                     weight=0.4, armor_value=5, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000006F": Item("0000006F", "Book of Shadows", "A tome containing dark and forbidden knowledge, granting access to powerful dark magic spells.",
                     weight=1.5, armor_value=0, attack_value=0, durability=1, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000070": Item("00000070", "Horn of Summoning", "A magical horn used to summon and communicate with mystical creatures.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000071": Item("00000071", "Spider Silk Gloves", "Gloves made from the silk of giant spiders, providing increased dexterity and resistance to web-based attacks.",
                     weight=0.3, armor_value=10, attack_value=0, durability=40, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000072": Item("00000072", "Gem of Power", "A precious gem imbued with raw magical energy, used for various enchantments and rituals.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000073": Item("00000073", "Blessed Water", "Water that has been blessed by divine entities, capable of healing wounds and curing ailments.",
                     weight=0.8, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000074": Item("00000074", "Moonstone Ring", "A ring adorned with a moonstone, enhancing the wearer's magical abilities during nighttime.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000075": Item("00000075", "Crystal Orb", "A crystal orb used by seers and fortune-tellers to glimpse into the future.",
                     weight=0.5, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000076": Item("00000076", "Warding Talisman", "A talisman inscribed with protective runes, providing enhanced defense against magical attacks.",
                     weight=0.2, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000077": Item("00000077", "Bandit Mask", "A mask worn by bandits and rogues to conceal their identity and intimidate their victims.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000078": Item("00000078", "Skull Lantern", "A lantern made from a human skull, emitting an eerie glow that repels undead creatures.",
                     weight=1.0, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000079": Item("00000079", "Mystic Feather", "A feather infused with magical energies, capable of redirecting projectiles and providing limited levitation.",
                     weight=0.1, armor_value=0, attack_value=0, durability=1, rarity="Uncommon",
                     value=120, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007A": Item("0000007A", "Enchanted Mirror", "A mystical mirror that reveals hidden truths and reflects the soul.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Rare",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007B": Item("0000007B", "Soulstone Pendant", "A pendant containing a captured soul, which grants the wearer increased vitality.",
                     weight=0.3, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007C": Item("0000007C", "Whispering Dagger", "A dagger forged by ancient assassins, rumored to whisper secrets to its wielder.",
                     weight=0.8, armor_value=0, attack_value=30, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007D": Item("0000007D", "Elven Bow", "A finely crafted bow of elven design, known for its accuracy and long range.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007E": Item("0000007E", "Scroll of Knowledge", "A scroll containing ancient wisdom and knowledge, granting insights to its reader.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000007F": Item("0000007F", "Ring of Protection", "A ring imbued with protective enchantments, increasing the wearer's defense.",
                     weight=0.1, armor_value=3, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000080": Item("00000080", "Dragon Scale Armor", "Armor crafted from the scales of a mighty dragon, providing exceptional protection.",
                     weight=8.0, armor_value=70, attack_value=0, durability=120, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000081": Item("00000081", "Invisibility Cloak", "A cloak that grants the ability to become invisible, allowing the wearer to sneak undetected.",
                     weight=1.2, armor_value=8, attack_value=0, durability=80, rarity="Rare",
                     value=800, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000082": Item("00000082", "Frost Shard", "A shard of ice imbued with the power of frost, capable of freezing enemies on contact.",
                     weight=0.4, armor_value=0, attack_value=20, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Frost", required_level=0, quest_item=False),
    "00000083": Item("00000083", "Wand of Fireballs", "A wand that unleashes powerful fireballs, engulfing enemies in flames.",
                     weight=0.6, armor_value=0, attack_value=25, durability=40, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "00000084": Item("00000084", "Book of Shadows", "A forbidden tome containing dark and arcane knowledge, empowering the reader with forbidden spells.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000085": Item("00000085", "Amulet of the Moon", "An amulet infused with lunar magic, enhancing the wearer's mystical abilities during the night.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000086": Item("00000086", "Hunter's Crossbow", "A crossbow favored by skilled hunters, designed for precision and ease of use.",
                     weight=3.0, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000087": Item("00000087", "Druidic Staff", "A staff infused with the power of nature, allowing the wielder to channel the elements.",
                     weight=2.5, armor_value=0, attack_value=35, durability=60, rarity="Uncommon",
                     value=180, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000088": Item("00000088", "Shadow Cloak", "A cloak woven from shadowy fabric, granting the wearer enhanced stealth and agility.",
                     weight=1.2, armor_value=6, attack_value=0, durability=60, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000089": Item("00000089", "Elixir of Agility", "An elixir that enhances the user's speed and reflexes, granting increased agility.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008A": Item("0000008A", "Enchanted Gloves", "Gloves infused with enchantments, increasing the wearer's dexterity and magical prowess.",
                     weight=0.5, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008B": Item("0000008B", "Holy Relic", "A sacred relic imbued with divine energy, capable of repelling dark forces.",
                     weight=0.8, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008C": Item("0000008C", "Sonic Boom Boots", "Boots that harness the power of sound, allowing the wearer to unleash devastating shockwaves.",
                     weight=1.5, armor_value=3, attack_value=0, durability=60, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008D": Item("0000008D", "Venomous Blade", "A blade coated with deadly venom, causing additional poison damage to enemies.",
                     weight=1.0, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Poison", required_level=0, quest_item=False),
    "0000008E": Item("0000008E", "Glowing Crystal", "A crystal that emits a soft, enchanting glow, providing illumination in the darkest of places.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000008F": Item("0000008F", "Enchanted Bowtie", "A stylish bowtie enchanted with magic, granting the wearer a touch of elegance and charm.",
                     weight=0.1, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000090": Item("00000090", "Oracle's Staff", "A staff infused with the power of foresight, enabling the wielder to see into the future.",
                     weight=2.0, armor_value=0, attack_value=30, durability=60, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000091": Item("00000091", "Gauntlets of Strength", "Gauntlets imbued with ancient strength-enhancing enchantments, granting incredible power.",
                     weight=1.5, armor_value=5, attack_value=0, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000092": Item("00000092", "Mysterious Elixir", "A mysterious elixir with unknown properties, rumored to bestow temporary magical abilities.",
                     weight=0.4, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=400, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000093": Item("00000093", "Shield of Reflection", "A shield that reflects incoming projectiles and spells, providing enhanced defense.",
                     weight=4.0, armor_value=60, attack_value=0, durability=90, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000094": Item("00000094", "Moonstone Necklace", "A necklace adorned with a shimmering moonstone, granting heightened magical abilities under moonlight.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000095": Item("00000095", "Cross Pendant", "A pendant bearing the symbol of faith, providing protection against undead creatures.",
                     weight=0.3, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000096": Item("00000096", "Thunderstorm Tome", "A powerful tome that conjures a raging thunderstorm, striking down enemies with lightning bolts.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Legendary",
                     value=5000, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "00000097": Item("00000097", "Assassin's Hood", "A hood favored by assassins, providing increased stealth and critical strike chance.",
                     weight=0.8, armor_value=4, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000098": Item("00000098", "Crimson Orchid", "A rare orchid with crimson petals, possessing healing properties when consumed.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "00000099": Item("00000099", "Enchanted Harp", "A harp enchanted with magical melodies, capable of soothing hearts and calming minds.",
                     weight=2.0, armor_value=0, attack_value=25, durability=60, rarity="Rare",
                     value=350, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009A": Item("0000009A", "Glimmering Dagger", "A dagger that glimmers with ethereal light, striking fear into the hearts of enemies.",
                     weight=0.6, armor_value=0, attack_value=35, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009B": Item("0000009B", "Crystal Shield", "A shield crafted from enchanted crystals, providing excellent magical defense.",
                     weight=5.0, armor_value=50, attack_value=0, durability=100, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009C": Item("0000009C", "Stealthy Boots", "Boots designed for silent movement, allowing the wearer to move undetected in the shadows.",
                     weight=1.2, armor_value=3, attack_value=0, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009D": Item("0000009D", "Scepter of Light", "A powerful scepter emanating a radiant light, capable of banishing darkness and dispelling evil.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009E": Item("0000009E", "Ancient Scroll", "An ancient scroll inscribed with forgotten knowledge, containing powerful incantations.",
                     weight=0.3, armor_value=0, attack_value=0, durability=20, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "0000009F": Item("0000009F", "Enchanted Necklace", "A necklace adorned with enchantments, enhancing the wearer's magical abilities.",
                     weight=0.2, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A0": Item("000000A0", "Vampiric Blade", "A blade that drains the life force of enemies, granting health to the wielder with each strike.",
                     weight=1.2, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A1": Item("000000A1", "Arcane Runestone", "A runestone inscribed with arcane symbols, empowering spells and increasing magical potency.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A2": Item("000000A2", "Feathered Hat", "A hat adorned with colorful feathers, bestowing a touch of elegance and style.",
                     weight=0.3, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A3": Item("000000A3", "Harmony Medallion", "A medallion that radiates harmony, providing increased resistance against disruptive magic.",
                     weight=0.2, armor_value=2, attack_value=0, durability=20, rarity="Rare",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A4": Item("000000A4", "Singing Sword", "A sword that sings with a melodic hum, resonating with the wielder's battle prowess.",
                     weight=2.5, armor_value=0, attack_value=50, durability=80, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A5": Item("000000A5", "Gem of Enlightenment", "A gem infused with ancient wisdom, granting profound insights and increased intellect.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A6": Item("000000A6", "Enchanted Boots", "Boots enchanted with magical swiftness, enhancing the wearer's speed and mobility.",
                     weight=1.0, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A7": Item("000000A7", "Nightshade Dagger", "A dagger infused with the essence of shadows, granting increased critical strike chance under the cover of darkness.",
                     weight=0.8, armor_value=0, attack_value=35, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A8": Item("000000A8", "Spellbound Grimoire", "A grimoire filled with enchantments and magical formulas, enabling the casting of advanced spells.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000A9": Item("000000A9", "Phoenix Feather", "A feather from a mythical phoenix, radiating intense heat and capable of igniting fires.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000AA": Item("000000AA", "Crystalized Bow", "A bow crafted from crystalized energy, shooting arrows infused with magical power.",
                     weight=2.5, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AB": Item("000000AB", "Glowing Lantern", "A lantern that emits a gentle, soothing glow, illuminating the surroundings.",
                     weight=1.0, armor_value=0, attack_value=0, durability=60, rarity="Common",
                     value=50, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AC": Item("000000AC", "Crystal Blade", "A blade crafted from enchanted crystals, capable of channeling magical energy for devastating attacks.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AD": Item("000000AD", "Oracle's Robe", "A robe worn by seers and prophets, empowering the wearer with heightened magical perception.",
                     weight=2.0, armor_value=10, attack_value=0, durability=80, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AE": Item("000000AE", "Soulbound Necklace", "A necklace imbued with the essence of a powerful soul, providing protection against dark forces.",
                     weight=0.3, armor_value=3, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000AF": Item("000000AF", "Thunderstrike Hammer", "A mighty hammer capable of summoning thunderstorms and unleashing powerful lightning strikes.",
                     weight=8.0, armor_value=0, attack_value=55, durability=90, rarity="Rare",
                     value=600, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "000000B0": Item("000000B0", "Enchanted Quiver", "A quiver enchanted with magical properties, providing an endless supply of arrows.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B1": Item("000000B1", "Scroll of Teleportation", "A scroll that allows the user to instantly teleport to a known location.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B2": Item("000000B2", "Golem's Heartstone", "A heart-shaped stone extracted from a defeated golem, radiating with residual magical energy.",
                     weight=0.5, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B3": Item("000000B3", "Silent Boots", "Boots designed for stealthy movement, muffling footsteps and suppressing sound.",
                     weight=1.2, armor_value=4, attack_value=0, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B4": Item("000000B4", "Fiery Essence", "A vial containing a potent essence of fire, capable of enhancing fire-based spells and attacks.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000B5": Item("000000B5", "Enchanted Cuffs", "Cuffs adorned with enchantments, granting the wearer increased resistance to magic.",
                     weight=0.4, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B6": Item("000000B6", "Mystic Cloak", "A cloak woven with intricate mystical patterns, enhancing the wearer's magical abilities.",
                     weight=1.5, armor_value=6, attack_value=0, durability=70, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B7": Item("000000B7", "Sapphire Pendant", "A pendant adorned with a sparkling sapphire, enhancing the wearer's magical aptitude.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B8": Item("000000B8", "Spiritbound Bow", "A bow infused with the essence of ethereal spirits, granting increased accuracy and critical strike chance.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000B9": Item("000000B9", "Cursed Talisman", "A talisman imbued with a dark curse, amplifying the wearer's dark magic but at a cost.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BA": Item("000000BA", "Glowing Mushroom", "A luminescent mushroom that emits a soft glow, providing light in dark places.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BB": Item("000000BB", "Enchanted Mirror", "A mirror enchanted with a spell of reflection, capable of reflecting magical attacks.",
                     weight=1.5, armor_value=0, attack_value=0, durability=40, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BC": Item("000000BC", "Helm of the Berserker", "A helm infused with the spirit of a raging berserker, enhancing the wearer's strength and ferocity in battle.",
                     weight=2.0, armor_value=8, attack_value=0, durability=80, rarity="Rare",
                     value=500, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BD": Item("000000BD", "Crystal of Resilience", "A crystal that fortifies the wearer's resilience, reducing the duration of negative status effects.",
                     weight=0.2, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BE": Item("000000BE", "Nightshade Elixir", "An elixir brewed from rare nightshade plants, providing temporary heightened senses and perception.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000BF": Item("000000BF", "Mystic Amulet", "An amulet infused with ancient mystical energies, amplifying the wearer's magical abilities.",
                     weight=0.1, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C0": Item("000000C0", "Enchanted Gloves", "Gloves imbued with enchantments, granting the wearer increased dexterity and magical finesse.",
                     weight=0.5, armor_value=2, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C1": Item("000000C1", "Silent Shiv", "A small, deadly Shiv that makes no sound when wielded, perfect for stealthy assassinations.",
                     weight=0.3, armor_value=0, attack_value=25, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C2": Item("000000C2", "Wand of Frost", "A wand that unleashes icy blasts, freezing enemies and slowing their movements.",
                     weight=0.4, armor_value=0, attack_value=30, durability=40, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Frost", required_level=0, quest_item=False),
    "000000C3": Item("000000C3", "Ethereal Robe", "A robe crafted from ethereal fabric, enhancing the wearer's magical abilities and providing ethereal protection.",
                     weight=1.5, armor_value=6, attack_value=0, durability=70, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C4": Item("000000C4", "Vampiric Amulet", "An amulet that feeds on the life force of enemies, granting health to the wearer with each successful attack.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C5": Item("000000C5", "Flaming Sword", "A sword imbued with the essence of fire, engulfing enemies in flames upon striking.",
                     weight=2.0, armor_value=0, attack_value=35, durability=60, rarity="Rare",
                     value=450, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Fire", required_level=0, quest_item=False),
    "000000C6": Item("000000C6", "Glyphed Dagger", "A dagger inscribed with ancient glyphs, increasing critical strike chance and amplifying magical damage.",
                     weight=0.6, armor_value=0, attack_value=30, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C7": Item("000000C7", "Crystal Staff", "A staff crafted from enchanted crystals, channeling the power of arcane energy with great precision.",
                     weight=2.5, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C8": Item("000000C8", "Soulstone Ring", "A ring containing a captured soul, providing enhanced magical abilities to the wearer.",
                     weight=0.1, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000C9": Item("000000C9", "Nature's Embrace", "A charm infused with the essence of nature, granting the wearer increased vitality and affinity with flora and fauna.",
                     weight=0.2, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CA": Item("000000CA", "Whisperwind Bow", "A bow favored by skilled archers, known for its whisper-quiet string and deadly accuracy.",
                     weight=2.5, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CB": Item("000000CB", "Chaos Stone", "A stone infused with chaotic energy, unleashing unpredictable elemental effects upon activation.",
                     weight=0.3, armor_value=0, attack_value=0, durability=30, rarity="Rare",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CC": Item("000000CC", "Enchanted Earrings", "Earrings adorned with enchantments, increasing the wearer's magical affinity and spellcasting proficiency.",
                     weight=0.2, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CD": Item("000000CD", "Soulbound Gauntlets", "Gauntlets imbued with the essence of powerful souls, increasing the wearer's strength and resilience.",
                     weight=1.0, armor_value=5, attack_value=0, durability=60, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000CE": Item("000000CE", "Stormcaller Ring", "A ring that harnesses the power of storms, allowing the wearer to summon lightning and control the weather.",
                     weight=0.1, armor_value=2, attack_value=0, durability=20, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage="Lightning", required_level=0, quest_item=False),
    "000000CF": Item("000000CF", "Glimmering Crown", "A crown adorned with glimmering jewels, representing nobility and granting enhanced magical presence.",
                     weight=0.5, armor_value=3, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D0": Item("000000D0", "Phantom Blade", "A blade that phases in and out of reality, allowing the wielder to bypass defenses and strike ethereal targets.",
                     weight=1.5, armor_value=0, attack_value=35, durability=60, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D1": Item("000000D1", "Voidstone Pendant", "A pendant containing a fragment of the void, providing increased resistance to dark magic.",
                     weight=0.2, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D2": Item("000000D2", "Crescent Blade", "A curved blade resembling the moon's crescent, enhancing the wielder's agility and critical strike chance.",
                     weight=1.8, armor_value=0, attack_value=40, durability=70, rarity="Uncommon",
                     value=250, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D3": Item("000000D3", "Arcane Bracelet", "A bracelet infused with arcane energy, enhancing the wearer's spellcasting speed and mana regeneration.",
                     weight=0.3, armor_value=1, attack_value=0, durability=30, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D4": Item("000000D4", "Duskblade", "A blade forged from twilight steel, radiating with a haunting aura and increasing shadow-based attacks.",
                     weight=2.0, armor_value=0, attack_value=45, durability=70, rarity="Uncommon",
                     value=300, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D5": Item("000000D5", "Enchanted Chalice", "A chalice filled with magical energy, restoring the user's health and mana when consumed.",
                     weight=0.5, armor_value=0, attack_value=0, durability=40, rarity="Uncommon",
                     value=150, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D6": Item("000000D6", "Spectral Cloak", "A cloak woven from spectral threads, providing increased evasion and resistance against ethereal attacks.",
                     weight=1.5, armor_value=5, attack_value=0, durability=70, rarity="Uncommon",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D7": Item("000000D7", "Arcane Talisman", "A talisman infused with arcane magic, amplifying the wearer's spellcasting potency and accuracy.",
                     weight=0.2, armor_value=2, attack_value=0, durability=30, rarity="Uncommon",
                     value=120, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D8": Item("000000D8", "Luminous Earrings", "Earrings adorned with radiant gems, bestowing a radiant aura and increased magical power.",
                     weight=0.2, armor_value=1, attack_value=0, durability=20, rarity="Uncommon",
                     value=80, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000D9": Item("000000D9", "Venomous Vial", "A vial containing potent venom, coating weapons with deadly poison upon application.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Uncommon",
                     value=80, usable=True, stackable=True, effects=None,
                     range=None, elemental_damage="Poison", required_level=0, quest_item=False),
    "000000DA": Item("000000DA", "Sage's Tome", "A tome filled with ancient wisdom and knowledge, increasing the wearer's intellect and spellcasting abilities.",
                     weight=1.5, armor_value=0, attack_value=0, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DB": Item("000000DB", "Crystal Shard", "A shard of enchanted crystal, radiating with residual magical energy.",
                     weight=0.1, armor_value=0, attack_value=0, durability=10, rarity="Common",
                     value=50, usable=False, stackable=True, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DC": Item("000000DC", "Arcane Bracers", "Bracers infused with arcane power, increasing the wearer's spellcasting speed and accuracy.",
                     weight=0.4, armor_value=3, attack_value=0, durability=30, rarity="Uncommon",
                     value=150, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DD": Item("000000DD", "Whispering Dagger", "A dagger that whispers secrets to the wielder, increasing critical strike chance and granting sneak attack bonuses.",
                     weight=0.5, armor_value=0, attack_value=30, durability=50, rarity="Uncommon",
                     value=200, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DE": Item("000000DE", "Scepter of Shadows", "A scepter shrouded in darkness, channeling the power of shadows and granting control over the unseen.",
                     weight=2.0, armor_value=0, attack_value=40, durability=60, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000DF": Item("000000DF", "Crown of Illusions", "A crown that creates illusions and conceals the wearer's true identity, granting increased deception and stealth abilities.",
                     weight=0.8, armor_value=2, attack_value=0, durability=50, rarity="Rare",
                     value=400, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False),
    "000000E0": Item("000000E0", "Crystal of Tranquility", "A crystal that emits a calming aura, reducing stress and increasing focus.",
                     weight=0.2, armor_value=0, attack_value=0, durability=20, rarity="Uncommon",
                     value=100, usable=False, stackable=False, effects=None,
                     range=None, elemental_damage=None, required_level=0, quest_item=False)
}


REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\main.py 
# main.py

from game_controller import GameController

def main():
    game_controller = GameController()
    game_controller.run_game_loop()

if __name__ == "__main__":
    main()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\puzzles.py 
class Puzzle:
    def __init__(self, description, solution):
        self.description = description
        self.solution = solution

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\quests.py 
#quests.py

from game import Quest, SideQuest
from story import story

# Define quests and side quests
main_quest = Quest("Unravel the Mystery", "Embark on a journey to unravel the mystery behind the lost civilization.", ["Unravel the Mystery"])
decipher_quest = Quest("Decipher the Ancient Text", "Decipher the encrypted portion of the tome to gain deeper knowledge.", ["Decipher the Ancient Text"])
allies_quest = Quest("Seek Allies", "Seek out potential allies who can aid you in your quest to protect Lumina.", ["Seek Allies"])
confrontation_quest = Quest("Confront Lord Vexis", "Prepare for the final confrontation and defeat Lord Vexis to save Lumina.", ["Confront Lord Vexis"])

first_barrier_side_quest = SideQuest("Unearth the Lost Art of Deciphering", "Find and learn the lost art of deciphering the arcane script.", ["Unearth the Lost Art of Deciphering"])
evidence_side_quest = SideQuest("Gather Evidence of the Threat", "Search for evidence that connects Lord Vexis's ambitions with the prophetic warning.", ["Gather Evidence of the Threat"])
unexpected_ally_side_quest = SideQuest("Earn the Trust of an Unexpected Ally", "Prove your worth and earn the trust of Eris, the enigmatic warrior-mage.", ["Earn the Trust of an Unexpected Ally"])
hidden_secrets_side_quest = SideQuest("Search for Hidden Secrets", "Explore the Royal Library and uncover the hidden chambers filled with scrolls of lost knowledge.", ["Search for Hidden Secrets"])
journey_to_shrine_side_quest = SideQuest("Embark on the Journey to the Hidden Shrine", "Embark on a perilous journey to find the hidden shrine linked to the lost civilization.", ["Embark on the Journey to the Hidden Shrine"])

blank_quest = Quest("No Active Quests", "You currently have no active quests.", [])

# Assign the blank quest for sections without quests
for section in story.values():
    if "quest" not in section:
        section["quest"] = blank_quest
    if "side_quest" not in section:
        section["side_quest"] = blank_quest

# Assign quests and side quests to the corresponding story sections
story["start"]["quest"] = main_quest
story["decision_to_learn"]["quest"] = decipher_quest
story["first_barrier"]["side_quest"] = first_barrier_side_quest
story["learning_the_language"]["side_quest"] = decipher_quest
story["first_insight"]["side_quest"] = hidden_secrets_side_quest
story["evidence_of_threat"]["side_quest"] = evidence_side_quest
story["burden_of_knowledge"]["quest"] = allies_quest
story["seeking_allies"]["quest"] = allies_quest
story["doubt_and_rejection"]["side_quest"] = unexpected_ally_side_quest
story["unexpected_ally"]["side_quest"] = unexpected_ally_side_quest
story["solidifying_the_partnership"]["side_quest"] = unexpected_ally_side_quest
story["curiosity_piqued"]["quest"] = hidden_secrets_side_quest
story["unexpected_allies"]["side_quest"] = hidden_secrets_side_quest
story["realizing_common_goals"]["side_quest"] = hidden_secrets_side_quest
story["first_shared_adventure"]["quest"] = journey_to_shrine_side_quest
story["revelation_of_eris_past"]["side_quest"] = journey_to_shrine_side_quest



REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\save_load.py 
import os
import json
from .game import Player, Item

class SaveLoad:
    @staticmethod
    def save_game(player, save_file='save.json'):
        """
        Save the game state to a file.
        """
        try:
            save_dir = os.path.dirname(save_file)
            if save_dir and not os.path.exists(save_dir):
                os.makedirs(save_dir)
            with open(save_file, 'w') as f:
                game_state = {
                    'player': {
                        'name': player.name,
                        'health': player.health,
                        'inventory': [item.__dict__ for item in player.inventory],
                    },
                    # Add other game state data as needed
                }
                json.dump(game_state, f)
        except Exception as e:
            print(f"Error while saving the game: {e}")

    @staticmethod
    def load_game(save_file='save.json'):
        """
        Load the game state from a file.
        """
        if not os.path.exists(save_file):
            print(f"No save file found at {save_file}")
            return None
        try:
            with open(save_file, 'r') as f:
                saved_data = json.load(f)
                player_data = saved_data.get('player')
                if player_data:
                    player = Player(
                        name=player_data.get('name'),
                        health=player_data.get('health'),
                        inventory=[Item(**item_data) for item_data in player_data.get('inventory')],
                    )
                    # Add other game state loading as needed
                    return player
                else:
                    print("Invalid save file format: Missing player data")
                    return None
        except Exception as e:
            print(f"Error while loading the game: {e}")
            return None

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\scene.py 

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\story.py 
#story.py
'''
class Story:
    def __init__(self, name, description):
        self.name = name
        self.description = description

story = {
    "start": Story("Start", "In the royal city of Lumina, renowned for its vibrant culture and ancient history, our protagonist Caelum, an erudite scholar, comes across an enigmatic tome that hints at a lost civilization. His journey to unravel this mystery commences, unknowingly drawing the attention of the nefarious Lord Vexis."),
    "decision_to_learn": Story("Decision to Learn", "Deciding that the knowledge in the tome is too crucial to be left unearthed, Caelum dedicates himself to deciphering the ancient text, realizing this could be a turning point in his life."),
    "first_barrier": Story("First Barrier", "Caelum faces his first obstacle when he finds a portion of the tome encrypted in an arcane script. He must unearth the lost art of deciphering this ancient language."),
    "learning_the_language": Story("Learning the Language", "After weeks of study and cross-referencing ancient texts, Caelum manages to gain a basic understanding of the lost language, making it possible to slowly decrypt the tome."),
    "first_insight": Story("First Insight", "The first decrypted passages reveal knowledge far beyond Lumina's current understanding of magic and technology. This fuels Caelum's curiosity even further."),
    "evidence_of_threat": Story("Evidence of Threat", "While diving deeper into the translated text, Caelum stumbles upon a prophetic warning about a great darkness that once threatened the lost civilization. It bears unsettling similarities to Lord Vexis’s ambitions."),
    "burden_of_knowledge": Story("Burden of Knowledge", "Understanding the magnitude of the threat, Caelum feels the weight of responsibility. His quest is no longer just about curiosity but about protecting Lumina from a potentially devastating fate."),
    "seeking_allies": Story("Seeking Allies", "Knowing the enormity of his task, Caelum realizes he needs allies. He decides to share his discoveries with trusted scholars and influencers within Lumina."),
    "doubt_and_rejection": Story("Doubt and Rejection", "To his disappointment, Caelum's warnings are met with skepticism and disbelief from many. Some even accuse him of fearmongering and alarmism."),
    "unexpected_ally": Story("Unexpected Ally", "Just when Caelum is losing hope, Eris, who has overheard his attempts to convince others, approaches him. She believes in his cause and offers her help."),
    "solidifying_the_partnership": Story("Solidifying the Partnership", "Eris and Caelum form a pact to explore the secrets of the lost civilization together and stand against the darkness that looms over Lumina."),
    "curiosity_piqued": Story("Curiosity Piqued", "Caelum delves into the esoteric texts and discovers tantalizing hints of powerful magic and advanced knowledge possessed by the lost civilization. His desire to learn more solidifies his resolve to pursue this quest."),
    "hidden_secrets": Story("Hidden Secrets", "While deciphering the tome, Caelum discovers the existence of hidden chambers within the Royal Library. After a relentless search, they unearth a room filled with scrolls that disclose the lost civilization’s secrets. This revelation strengthens their resolve and enhances their abilities."),
    "understanding_the_secrets": Story("Understanding the Secrets", "The group dedicates days to studying the scrolls, gaining insights into the lost civilization's technology, magic, culture, and the catastrophe that led to their downfall."),
    "first_application_of_new_knowledge": Story("First Application of New Knowledge", "Using the newfound knowledge, Caelum and Eris experiment with ancient spells and devices, boosting their capabilities and defenses."),
    "gin's_disturbing_dream": Story("Gin's Disturbing Dream", "While the group is engrossed in their research, Gin has a vivid, disturbing dream that hints at a hidden shrine and an imminent transformation."),
    "interpreting_the_dream": Story("Interpreting the Dream", "Caelum and Eris, drawing upon their knowledge from the scrolls, decipher Gin's dream. They realize it's directing them to a shrine linked to the lost civilization."),
    "journey_to_the_shrine": Story("Journey to the Shrine", "Leaving the library, they embark on a quest to find the hidden shrine. Their journey is fraught with danger and obstacles, testing their strength and resolve."),
    "discovery_of_the_shrine": Story("Discovery of the Shrine", "After a grueling journey, they locate the shrine nestled deep in an ancient forest. Its imposing architecture and arcane energy affirm the insights from Gin's dream."),
    "gin's_transformation_begins": Story("Gin's Transformation Begins", "As Gin steps into the shrine, he's enveloped in a radiant light. His body undergoes a shocking transformation as he morphs into a majestic phoenix."),
    "group's_reaction_and_acceptance": Story("Group's Reaction and Acceptance", "While initially shocked, the group quickly adapts to the unexpected change. They see the transformed Gin not as a monstrous beast, but as a powerful protector and guide."),
    "gin's_new_abilities": Story("Gin's New Abilities", "In his phoenix form, Gin gains enhanced abilities. His prophetic dreams become clearer, and he can now manipulate fire and fly. These skills add a new dynamic to the group and their quest."),
    "vexis_revealed": Story("Vexis Revealed", "With their growing knowledge, Caelum and Eris uncover the true extent of Lord Vexis's ambitions. His pursuit of power, they realize, threatens to shroud Lumina in darkness."),
    "understanding_vexis_plan": Story("Understanding Vexis's Plan", "They decipher that Vexis intends to harness the lost civilization's technology to seize control of Lumina and extend his dominion."),
    "preparation_to_confront_vexis": Story("Preparation to Confront Vexis", "Recognizing the impending danger, the group decides to confront Lord Vexis. They begin preparing for the inevitable showdown, fortifying their defenses and planning their strategy."),
    "gin_predicts_vexis_next_move": Story("Gin Predicts Vexis's Next Move", "In a prophetic dream, Gin sees Vexis making a move to seize an ancient artifact of immense power. The group decides to intercept him and claim the artifact first."),
    "race_against_time": Story("Race Against Time", "The group embarks on a desperate race against time to locate and secure the artifact before Vexis does."),
    "unexpected_setback": Story("Unexpected Setback", "Their journey is hindered by a horde of Vexis’s minions. The group is forced to engage them, delaying their quest."),
    "retrieving_the_artifact": Story("Retrieving the Artifact", "After a grueling battle, the group finally reaches the artifact's location. Using their knowledge of the ancient civilization, they manage to secure it."),
    "vexis_confrontation": Story("Vexis Confrontation", "With the artifact in their possession, the group is ready to confront Vexis. They reach his stronghold, prepared for the inevitable battle."),
    "vexis_battle": Story("Vexis Battle", "The group engages in a fierce battle with Vexis. The fight tests their limits, but they manage to hold their ground, refusing to surrender."),
    "vexis_past": Story("Vexis's Past", "Further research reveals shocking information about Vexis's past, his connections to the lost civilization, and the personal motivations behind his nefarious ambitions."),
    "confirming_vexis_plan": Story("Confirming Vexis's Plan", "Caelum and Eris manage to infiltrate a secret meeting of Vexis's lieutenants, confirming their suspicions and understanding the immediacy of the threat."),
    "gin's_prophetic_dream": Story("Gin's Prophetic Dream", "While the duo deciphers Vexis's plan, Gin has a prophetic dream foretelling an impending attack on their faction and a deadly challenge he must face."),
    "decoding_gin's_dream": Story("Decoding Gin's Dream", "With their enriched understanding of the arcane, Caelum and Eris interpret Gin's dream. They realize that while their faction is at risk, Gin must also confront a colossal dragon."),
    "weighing_the_options": Story("Weighing the Options", "Facing the double-edged sword of danger, they contemplate their options. Should they help their faction ward off Vexis's forces, or should they aid Gin in his potentially deadly challenge?"),
    "internal_struggles": Story("Internal Struggles", "Each member of the trio wrestles with this decision, torn between loyalty to their allies and the urge to protect one another. Their camaraderie is tested as they weigh the stakes."),
    "resolution_to_act": Story("Resolution to Act", "They eventually reach a difficult decision, realizing that their individual paths lie in the choices they make now. They resolve to act, aware of the consequences."),
    "before_the_storm": Story("Before the Storm", "As they prepare for the trials ahead, they spend a moment in silent camaraderie, strengthening their resolve and promising to endure whatever comes their way."),
    "revelations_and_choices": Story("Revelations and Choices", "The trio learns of an impending attack on their faction by Vexis's forces. Simultaneously, Gin, in his phoenix form, is challenged by a colossal dragon, endangering his life. They face a difficult choice, deciding where their aid is needed most."),
    "final_preparation": Story("Final Preparation", "Having made their difficult decision, they engage in a fierce battle, either protecting their faction or saving Gin. Regardless of the outcome, they use the experience, strength, and knowledge they've gained to prepare for the imminent confrontation with Lord Vexis."),
    "repercussions_of_choice": Story("Repercussions of Choice", "The aftermath of their choice leaves an indelible impact, leading to joy, despair, or a bittersweet combination of both. But, it reinforces their determination to thwart Vexis's plans."),
    "gathering_allies": Story("Gathering Allies", "Recognizing the magnitude of their final battle, they rally their allies, forging a united front against Vexis. They make strategic plans, ensuring each ally's strengths are used to their full potential."),
    "strengthening_bonds": Story("Strengthening Bonds", "During the preparation, the group grows closer, strengthening their bonds and forging unbreakable friendships. They draw strength from one another, knowing they can rely on their comrades in the coming fight."),
    "calm_before_the_storm": Story("Calm Before the Storm", "In a brief respite before the final battle, the group finds solace in each other's company. They reflect on their journey, share stories, and brace themselves for what lies ahead."),
    "final_confrontation_with_vexis": Story("Final Confrontation with Vexis", "The time has come to face Lord Vexis. The group, armed with knowledge, allies, and unwavering determination, storms his stronghold, ready to put an end to his reign of darkness."),
    "climactic_battle": Story("Climactic Battle", "The battle between the group and Vexis reaches its climax. Each member fights with everything they have, using their unique abilities and working together to overcome Vexis's powerful magic and minions."),
    "victory_and_revelation": Story("Victory and Revelation", "After a grueling battle, the group emerges victorious, defeating Lord Vexis. In the aftermath, they uncover shocking revelations about Vexis's true identity and the origins of the lost civilization."),
    "rebuilding_and_recovery": Story("Rebuilding and Recovery", "With Vexis defeated, Lumina begins the process of rebuilding and recovery. The group plays a pivotal role in restoring balance, using their knowledge to advance the city's magic and technology."),
    "legacy_of_the_lost_civilization": Story("Legacy of the Lost Civilization", "The group ensures that the knowledge and artifacts of the lost civilization are preserved, recognizing their historical and cultural significance. They establish an institute dedicated to the study and protection of this legacy."),
    "reflection_and_new_beginnings": Story("Reflection and New Beginnings", "As the dust settles, the group takes a moment to reflect on their incredible journey and the personal growth they've experienced. They part ways for a while, but their bond remains unbreakable, and they eagerly anticipate new adventures on the horizon.")
}
'''
story = {
    "start": {
        "name": "Start",
        "description": "In the royal city of Lumina, renowned for its vibrant culture and ancient history, our protagonist Caelum, an erudite scholar, comes across an enigmatic tome that hints at a lost civilization. His journey to unravel this mystery commences, unknowingly drawing the attention of the nefarious Lord Vexis."
    },
    "decision_to_learn": {
        "name": "Decision to Learn",
        "description": "Deciding that the knowledge in the tome is too crucial to be left unearthed, Caelum dedicates himself to deciphering the ancient text, realizing this could be a turning point in his life."
    },
    "first_barrier": {
        "name": "First Barrier",
        "description": "Caelum faces his first obstacle when he finds a portion of the tome encrypted in an arcane script. He must unearth the lost art of deciphering this ancient language."
    },
    "learning_the_language": {
        "name": "Learning the Language",
        "description": "After weeks of study and cross-referencing ancient texts, Caelum manages to gain a basic understanding of the lost language, making it possible to slowly decrypt the tome."
    },
    "first_insight": {
        "name": "First Insight",
        "description": "The first decrypted passages reveal knowledge far beyond Lumina's current understanding of magic and technology. This fuels Caelum's curiosity even further."
    },
    "evidence_of_threat": {
        "name": "Evidence of Threat",
        "description": "While diving deeper into the translated text, Caelum stumbles upon a prophetic warning about a great darkness that once threatened the lost civilization. It bears unsettling similarities to Lord Vexis’s ambitions."
    },
    "burden_of_knowledge": {
        "name": "Burden of Knowledge",
        "description": "Understanding the magnitude of the threat, Caelum feels the weight of responsibility. His quest is no longer just about curiosity but about protecting Lumina from a potentially devastating fate."
    },
    "seeking_allies": {
        "name": "Seeking Allies",
        "description": "Knowing the enormity of his task, Caelum realizes he needs allies. He decides to share his discoveries with trusted scholars and influencers within Lumina."
    },
    "doubt_and_rejection": {
        "name": "Doubt and Rejection",
        "description": "To his disappointment, Caelum's warnings are met with skepticism and disbelief from many. Some even accuse him of fearmongering and alarmism."
    },
    "unexpected_ally": {
        "name": "Unexpected Ally",
        "description": "Just when Caelum is losing hope, Eris, who has overheard his attempts to convince others, approaches him. She believes in his cause and offers her help."
    },
    "solidifying_the_partnership": {
        "name": "Solidifying the Partnership",
        "description": "Eris and Caelum form a pact to explore the secrets of the lost civilization together and stand against the darkness that looms over Lumina."
    },
    "curiosity_piqued": {
        "name": "Curiosity Piqued",
        "description": "Caelum delves into the esoteric texts and discovers tantalizing hints of powerful magic and advanced knowledge possessed by the lost civilization. His desire to learn more solidifies his resolve to pursue this quest."
    },
    "unexpected_allies": {
        "name": "Unexpected Allies",
        "description": "While researching, Caelum encounters Eris, a warrior-mage with an enigmatic past. Her interests align with his, and she offers her aid. Their partnership is formed, each complimenting the other's skills."
    },
    "realizing_common_goals": {
        "name": "Realizing Common Goals",
        "description": "As Caelum and Eris spend more time together, they find common ground in their ambitions and dreams. Their bond strengthens as they commit to aiding each other in their respective quests."
    },
    "first_shared_adventure": {
        "name": "First Shared Adventure",
        "description": "The duo embarks on their first adventure together to retrieve a lost artifact, said to be tied to the ancient civilization. Through their trials and tribulations, they learn to trust and rely on each other."
    },
    "revelation_of_eris_past": {
        "name": "Revelation of Eris' Past",
        "description": "In an emotional moment, Eris shares her past with Caelum. She reveals that she's the last of her kind, a survivor of a forgotten tribe related to the lost civilization. Her personal connection to their quest cements their partnership."
    },
    "eris_teaches_caelum": {
        "name": "Eris Teaches Caelum",
        "description": "Eris begins to teach Caelum martial arts and basic spellcraft, augmenting his scholarly knowledge with practical skills. This not only broadens Caelum's capabilities but also deepens their trust and understanding."
    },
    "first_encounter_with_vexis_forces": {
        "name": "First Encounter with Vexis's Forces",
        "description": "Caelum and Eris face their first encounter with Vexis's minions. They manage to escape but realize that they are being hunted, raising the stakes of their quest."
    },
    "realization_of_their_limitations": {
        "name": "Realization of Their Limitations",
        "description": "Following their narrow escape, Caelum and Eris realize they are ill-prepared to face the dangers ahead alone. They acknowledge the need for allies."
    },
    "research_on_potential_allies": {
        "name": "Research on Potential Allies",
        "description": "They delve into researching potential allies. Two names consistently emerge: the Arcane Circle, a secretive society focused on preserving ancient knowledge, and the Royal Guard, the determined protectors of Lumina."
    },
    "investigation_and_deliberation": {
        "name": "Investigation and Deliberation",
        "description": "Caelum and Eris spend days investigating these factions, weighing the benefits and drawbacks of each. They consider their values, resources, and potential risks involved."
    },
    "resolution_to_join": {
        "name": "Resolution to Join",
        "description": "After much deliberation, they decide it's time to align themselves with one of the factions. They prepare to approach their chosen faction, fully aware that this decision will drastically shape their journey."
    },
    "join_faction": {
        "name": "Joining a Faction",
        "description": "Soon, they are faced with a choice: should they join the Arcane Circle, a clandestine society focused on safeguarding ancient knowledge, or ally with the Royal Guard, stalwart protectors of Lumina? The decision would shape their journey and future alliances."
    },
    "first_conflict": {
        "name": "First Conflict",
        "description": "The duo finds themselves targeted by Lord Vexis’s minions, who aim to hinder their progress. Supported by their chosen faction, Caelum and Eris defend themselves, marking their first battle against Lord Vexis's forces."
    },
    "aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "The first conflict leaves its mark on the group, both physically and emotionally. It's a harsh reminder of the dangers they face but also strengthens their resolve."
    },
    "strengthening_alliances": {
        "name": "Strengthening Alliances",
        "description": "Recognizing the scale of their opposition, Caelum and Eris focus on strengthening their alliances. They undertake missions to help their chosen faction, earning their trust and support."
    },
    "discovery_of_gin": {
        "name": "Discovery of Gin",
        "description": "On one such mission, they come across Gin, a simple farmer with strange, prophetic dreams. Intrigued by his visions, they decide to investigate further."
    },
    "gin_reveals_dreams": {
        "name": "Gin Reveals Dreams",
        "description": "Gin hesitantly shares his dreams, which cryptically hint at looming threats and the path they should take. Caelum and Eris realize the significance of these visions in their quest."
    },
    "confirmation_of_gin's_abilities": {
        "name": "Confirmation of Gin's Abilities",
        "description": "To confirm Gin's abilities, they cautiously act on information from his dreams. When his predictions come true, they understand his immense potential."
    },
    "welcoming_gin": {
        "name": "Welcoming Gin",
        "description": "Convinced of Gin's unique ability, Caelum and Eris offer him a place in their group. They promise to keep him safe and help understand his abilities better."
    },
    "gin's_doubts_and_fears": {
        "name": "Gin's Doubts and Fears",
        "description": "Initially, Gin is overwhelmed by the sudden change and the weight of his abilities. He grapples with fear and doubt, uncertain of his place in this grand quest."
    },
    "assuaging_gin's_fears": {
        "name": "Assuaging Gin's Fears",
        "description": "Seeing his struggle, Caelum and Eris comfort Gin. They assure him that his gift is not a burden but a beacon of hope. They pledge to stand by him, no matter what."
    },
    "gin_accepts": {
        "name": "Gin Accepts",
        "description": "Strengthened by their support, Gin agrees to join their group. He begins to view his gift as a means to contribute to a cause larger than himself."
    },
    "meet_gin": {
        "name": "Meet Gin",
        "description": "During their adventures, they meet Gin, a humble dreamer with the uncanny ability to receive prophetic dreams. Sensing his potential, they welcome him to their group, unaware of the critical role he would play."
    },
    "hidden_secrets": {
        "name": "Hidden Secrets",
        "description": "While deciphering the tome, Caelum discovers the existence of hidden chambers within the Royal Library. After a relentless search, they unearth a room filled with scrolls that disclose the lost civilization’s secrets. This revelation strengthens their resolve and enhances their abilities."
    },
    "understanding_the_secrets": {
        "name": "Understanding the Secrets",
        "description": "The group dedicates days to studying the scrolls, gaining insights into the lost civilization's technology, magic, culture, and the catastrophe that led to their downfall."
    },
    "first_application_of_new_knowledge": {
        "name": "First Application of New Knowledge",
        "description": "Using the newfound knowledge, Caelum and Eris experiment with ancient spells and devices, boosting their capabilities and defenses."
    },
    "gin's_disturbing_dream": {
        "name": "Gin's Disturbing Dream",
        "description": "While the group is engrossed in their research, Gin has a vivid, disturbing dream that hints at a hidden shrine and an imminent transformation."
    },
    "interpreting_the_dream": {
        "name": "Interpreting the Dream",
        "description": "Caelum and Eris, drawing upon their knowledge from the scrolls, decipher Gin's dream. They realize it's directing them to a shrine linked to the lost civilization."
    },
    "journey_to_the_shrine": {
        "name": "Journey to the Shrine",
        "description": "Leaving the library, they embark on a quest to find the hidden shrine. Their journey is fraught with danger and obstacles, testing their strength and resolve."
    },
    "discovery_of_the_shrine": {
        "name": "Discovery of the Shrine",
        "description": "After a grueling journey, they locate the shrine nestled deep in an ancient forest. Its imposing architecture and arcane energy affirm the insights from Gin's dream."
    },
    "gin's_transformation_begins": {
        "name": "Gin's Transformation Begins",
        "description": "As Gin steps into the shrine, he's enveloped in a radiant light. His body undergoes a shocking transformation as he morphs into a majestic phoenix."
    },
    "group's_reaction_and_acceptance": {
        "name": "Group's Reaction and Acceptance",
        "description": "While initially shocked, the group quickly adapts to the unexpected change. They see the transformed Gin not as a monstrous beast, but as a powerful protector and guide."
    },
    "gin's_new_abilities": {
        "name": "Gin's New Abilities",
        "description": "In his phoenix form, Gin gains enhanced abilities. His prophetic dreams become clearer, and he can now manipulate fire and fly. These skills add a new dynamic to the group and their quest."
    },
    "legendary_transformation": {
        "name": "Legendary Transformation",
        "description": "Following a particular prophetic dream, Gin leads the group to a hidden shrine where he undergoes an unexpected transformation. He morphs into a majestic phoenix, serving as a protector and guide, proving pivotal to their quest."
    },
    "vexis_revealed": {
        "name": "Vexis Revealed",
        "description": "With their growing knowledge, Caelum and Eris uncover the true extent of Lord Vexis's ambitions. His pursuit of power, they realize, threatens to shroud Lumina in darkness."
    },
    "understanding_vexis_plan": {
        "name": "Understanding Vexis's Plan",
        "description": "They decipher that Vexis intends to harness the lost civilization's technology to seize control of Lumina and extend his dominion."
    },
    "preparation_to_confront_vexis": {
        "name": "Preparation to Confront Vexis",
        "description": "Recognizing the impending danger, the group decides to confront Lord Vexis. They begin preparing for the inevitable showdown, fortifying their defenses and planning their strategy."
    },
    "gin_predicts_vexis_next_move": {
        "name": "Gin Predicts Vexis's Next Move",
        "description": "In a prophetic dream, Gin sees Vexis making a move to seize an ancient artifact of immense power. The group decides to intercept him and claim the artifact first."
    },
    "race_against_time": {
        "name": "Race Against Time",
        "description": "The group embarks on a desperate race against time to locate and secure the artifact before Vexis does."
    },
    "unexpected_setback": {
        "name": "Unexpected Setback",
        "description": "Their journey is hindered by a horde of Vexis’s minions. The group is forced to engage them, delaying their quest."
    },
    "retrieving_the_artifact": {
        "name": "Retrieving the Artifact",
        "description": "After a grueling battle, the group finally reaches the artifact's location. Using their knowledge of the ancient civilization, they manage to secure it."
    },
    "vexis_confrontation": {
        "name": "Vexis Confrontation",
        "description": "With the artifact in their possession, the group is ready to confront Vexis. They reach his stronghold, prepared for the inevitable battle."
    },
    "vexis_battle": {
        "name": "Vexis Battle",
        "description": "The group engages in a fierce battle with Vexis. The fight tests their limits, but they manage to hold their ground, refusing to surrender."
    },
    "vexis_past": {
        "name": "Vexis's Past",
        "description": "Further research reveals shocking information about Vexis's past, his connections to the lost civilization, and the personal motivations behind his nefarious ambitions."
    },
    "confirming_vexis_plan": {
        "name": "Confirming Vexis's Plan",
        "description": "Caelum and Eris manage to infiltrate a secret meeting of Vexis's lieutenants, confirming their suspicions and understanding the immediacy of the threat."
    },
    "gin's_prophetic_dream": {
        "name": "Gin's Prophetic Dream",
        "description": "While the duo deciphers Vexis's plan, Gin has a prophetic dream foretelling an impending attack on their faction and a deadly challenge he must face."
    },
    "decoding_gin's_dream": {
        "name": "Decoding Gin's Dream",
        "description": "With their enriched understanding of the arcane, Caelum and Eris interpret Gin's dream. They realize that while their faction is at risk, Gin must also confront a colossal dragon."
    },
    "weighing_the_options": {
        "name": "Weighing the Options",
        "description": "Facing the double-edged sword of danger, they contemplate their options. Should they help their faction ward off Vexis's forces, or should they aid Gin in his potentially deadly challenge?"
    },
    "internal_struggles": {
        "name": "Internal Struggles",
        "description": "Each member of the trio wrestles with this decision, torn between loyalty to their allies and the urge to protect one another. Their camaraderie is tested as they weigh the stakes."
    },
    "resolution_to_act": {
        "name": "Resolution to Act",
        "description": "They eventually reach a difficult decision, realizing that their individual paths lie in the choices they make now. They resolve to act, aware of the consequences."
    },
    "before_the_storm": {
        "name": "Before the Storm",
        "description": "As they prepare for the trials ahead, they spend a moment in silent camaraderie, strengthening their resolve and promising to endure whatever comes their way."
    },
    "revelations_and_choices": {
        "name": "Revelations and Choices",
        "description": "The trio learns of an impending attack on their faction by Vexis's forces. Simultaneously, Gin, in his phoenix form, is challenged by a colossal dragon, endangering his life. They face a difficult choice, deciding where their aid is needed most."
    },
    "final_preparation": {
        "name": "Final Preparation",
        "description": "Having made their difficult decision, they engage in a fierce battle, either protecting their faction or saving Gin. Regardless of the outcome, they use the experience, strength, and knowledge they've gained to prepare for the imminent confrontation with Lord Vexis."
    },
    "repercussions_of_choice": {
        "name": "Repercussions of Choice",
        "description": "The aftermath of their choice leaves an indelible impact, leading to joy, despair, or a bittersweet combination of both. But, it reinforces their determination to thwart Vexis's plans."
    },
    "gathering_allies": {
        "name": "Gathering Allies",
        "description": "Recognizing the magnitude of their final battle, they rally their allies, forging a united front against Vexis. They make strategic plans, ensuring each ally's strengths are used to their full potential."
    },
    "strengthening_personal_abilities": {
        "name": "Strengthening Personal Abilities",
        "description": "Each member of the trio focuses on honing their abilities. Eris trains vigorously, Caelum delves into the arcane knowledge, and Gin learns to harness his phoenix powers more effectively."
    },
    "the_last_night": {
        "name": "The Last Night",
        "description": "The night before the final confrontation, they share stories, fears, and hopes around a campfire. Their camaraderie deepens, and they draw strength from their shared resolve."
    },
    "approaching_the_cursed_spire": {
        "name": "Approaching the Cursed Spire",
        "description": "They approach the Cursed Spire, the stage for their final battle. The imposing edifice emanates an oppressive aura, yet they press on, courage unwavering."
    },
    "battles_outside_the_spire": {
        "name": "Battles Outside the Spire",
        "description": "Before they can confront Vexis, they must overcome his formidable defenses. They, along with their allies, engage in intense battles, slowly progressing towards the spire's peak."
    },
    "ascension_to_the_peak": {
        "name": "Ascension to the Peak",
        "description": "With their allies holding the line, the trio ascends the spire. They confront and overcome numerous trials, their resolve tested at each step."
    },
    "vexis_confrontation_prep": {
        "name": "Vexis Confrontation Preparation",
        "description": "As they reach the peak, they steel themselves for the ultimate confrontation. They exchange a final glance of shared determination before stepping into the fray."
    },
    "final_battle": {
        "name": "Final Battle",
        "description": "Armed with the wisdom of the lost civilization, their unique abilities, and their unwavering resolve, Caelum, Eris, and Gin confront Lord Vexis in a climactic battle atop the Cursed Spire."
    },
    "battle_climax": {
        "name": "Battle Climax",
        "description": "The trio's combined efforts begin to overpower Vexis. The battle is intense, but their unity, trust, and shared resolve tip the balance in their favor."
    },
    "good_vexis_defeat": {
        "name": "Vexis's Defeat",
        "description": "With a final, concerted effort, they vanquish Vexis, his dark ambitions crumbling along with him. They stand victorious, the daunting spire resonating with their triumph."
    },
    "good_aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "In the wake of the battle, they help their allies regroup, healing the wounded and mourning the fallen. Their victory is bittersweet, marked with the relief of overcoming a great evil, but also the sorrow of their losses."
    },
    "good_return_to_lumina": {
        "name": "Return to Lumina",
        "description": "They return to Lumina as heroes. The city, once on the brink of despair, now radiates hope and gratitude. Their bravery and tenacity have saved the city and its citizens from Vexis's darkness."
    },
    "good_recognition_of_heroes": {
        "name": "Recognition of Heroes",
        "description": "Caelum, Eris, and Gin are celebrated as the saviors of Lumina. Their deeds become the stuff of legends, stories to inspire future generations."
    },
    "good_peaceful_respite": {
        "name": "Peaceful Respite",
        "description": "After the tumultuous events, they find a moment of peace. They reflect on their journey, understanding the depth of their transformation, and the bonds they've forged."
    },
    "good_glimpse_of_future": {
        "name": "Glimpse of the Future",
        "description": "As they watch Lumina rejoice, they know that their journey doesn't end here. There are still secrets to uncover, battles to fight, and a world to protect."
    },
    "good_end": {
        "name": "Good End",
        "description": "Congratulations! Our heroes have triumphed over Lord Vexis, liberating Lumina from his malicious intentions. Peace returns, and they are hailed as heroes. However, as they look upon the tranquil kingdom, they know that their journey is far from over..."
    },
    "bad_vexis_victory": {
        "name": "Vexis's Victory",
        "description": "Lord Vexis triumphs over the trio, seizing the ancient knowledge they had worked so hard to protect. His malicious laugh echoes across the spire as Lumina falls into his hands."
    },
    "bad_aftermath_of_battle": {
        "name": "Aftermath of Battle",
        "description": "They retreat, nursing their wounds and their bruised spirits. They mourn their defeat, but the flame of resistance still flickers within them."
    },
    "bad_occupied_lumina": {
        "name": "Occupied Lumina",
        "description": "Returning to Lumina, they find a city gripped by Vexis's power. Fear and despair taint the once-vibrant city, but in the hearts of its citizens, hope remains, kindled by the heroes' undying resolve."
    },
    "bad_underground_resistance": {
        "name": "Underground Resistance",
        "description": "Caelum, Eris, and Gin join the budding resistance, vowing to free Lumina from Vexis's iron grip. They operate in the shadows, carefully planning their next move."
    },
    "bad_sacrifices_made": {
        "name": "Sacrifices Made",
        "description": "The trio faces difficult choices, sacrifices made in the name of their cause. They lose allies and experience personal losses, fueling their determination to bring an end to Vexis's tyranny."
    },
    "bad_final_showdown": {
        "name": "Final Showdown",
        "description": "With the resistance rallying behind them, they confront Vexis in a final, desperate battle. The outcome hangs in the balance as they give their all, fighting for the freedom of Lumina."
    },
    "bad_vexis_defeated": {
        "name": "Vexis Defeated",
        "description": "Against all odds, they manage to defeat Vexis, shattering his reign of darkness. The city rejoices, liberated from his oppressive rule."
    },
    "bad_rebuilding_lumina": {
        "name": "Rebuilding Lumina",
        "description": "The trio and the remaining resistance members unite to rebuild Lumina. It's a daunting task, but their determination and the support of the citizens push them forward."
    },
    "bad_bittersweet_victory": {
        "name": "Bittersweet Victory",
        "description": "Although they have freed Lumina, the scars of the conflict run deep. They mourn the losses, but their triumph serves as a beacon of hope, a reminder that darkness can be overcome."
    },
    "bad_end": {
        "name": "Bad End",
        "description": "Oh no! Lord Vexis emerges victorious, plunging Lumina into darkness. However, a flicker of hope remains, as Caelum, Eris, and Gin join the underground resistance to fight against Vexis's tyranny. Their journey to liberate Lumina continues, against all odds..."
    }
}

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\view.py 
# view.py
import curses 

class GameView:
    def __init__(self, game, controller):
        self.game = game
        self.controller = controller

        # Initialize curses
        self.stdscr = curses.initscr()
        curses.cbreak()
        curses.noecho()
        self.stdscr.keypad(True)

    def cleanup(self):
        curses.nocbreak()
        self.stdscr.keypad(False)
        curses.echo()
        curses.endwin()

    def run(self):
        running = True
        while running:
            # Get the key pressed
            c = self.stdscr.getch()

            # Parse the key to a command
            command = self.controller.parse_input(c)
            if command is not None:
                self.stdscr.addstr(f"{command}\n")  # Display the command on the screen
                self.stdscr.refresh()

                # Run the command
                running = self.controller.run_command(command)

        self.cleanup()

REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\whiteboard.py 
from math import sin,cos,sqrt,atan2,pi
import pygame
pygame.init()

class Planet:
    dt = 1/100
    G = 6.67428e-11 #G constant
    scale = 1/(1409466.667) #1 m = 1/1409466.667 pixlar
    def __init__(self,x=0,y=0,radius=0,color=(0,0,0),mass=0,vx=0,vy=0):
        self.x = x #x-coordinate pygame-window
        self.y = y #y-coordinate pygame-window
        self.radius = radius
        self.color = color
        self.mass = mass
        self.vx = vx #velocity in the x axis
        self.vy = vy #velocity in the y axis
        
    def draw(self,screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)
    
    def orbit(self,trace):
        pygame.draw.rect(trace, self.color, (self.x, self.y, 2, 2))
        
    def update_vel(self,Fnx,Fny):
        ax = Fnx/self.mass #Calculates acceleration in x- and y-axis for body 1.
        ay = Fny/self.mass
        self.vx -= ((ax * Planet.dt)/Planet.scale)
        self.vy -= ((ay * Planet.dt)/Planet.scale)
        self.update_pos()
     
    def update_pos(self):
        self.x += ((self.vx * Planet.dt)) #changes position considering each body's velocity.
        self.y += ((self.vy * Planet.dt))
        
    def move(self,body):
        dx = (self.x - body.x) #Calculates difference in x- and y-axis between the bodies
        dy = (self.y - body.y)
        r = (sqrt((dy**2)+(dx**2))) #Calculates the distance between the bodies
        angle = atan2(dy, dx) #Calculates the angle between the bodies with atan2!
        if r < self.radius: #Checks if the distance between the bodies is less than the radius of the bodies. Uses then Gauss gravitational law to calculate force.
            F = 4/3 * pi * r
            Fx = cos(angle) * F
            Fy = sin(angle) * F
        else:  
            F = (Planet.G*self.mass*body.mass)/((r/Planet.scale)**2) #Newtons gravitational formula.
            Fx = cos(angle) * F
            Fy = sin(angle) * F
        return Fx,Fy

def motion():
    for i in range(0,len(bodies)):
        Fnx = 0 #net force
        Fny = 0
        for j in range(0,len(bodies)):
            if bodies[i] != bodies[j]:
                Fnx += (bodies[i].move(bodies[j]))[0]
                Fny += (bodies[i].move(bodies[j]))[1]
            elif bodies[i] == bodies[j]:
                continue
        bodies[i].update_vel(Fnx,Fny)
        bodies[i].draw(screen)
        bodies[i].orbit(trace)
        Fnx,Fny=0,0 

screen = pygame.display.set_mode([900,650]) #width - height
trace = pygame.Surface((900, 650))
pygame.display.set_caption("Moon simulation")
FPS = 60 #how quickly/frames per second our game should update. Change?

earth = Planet(450,325,30,(0,0,255),5.97219*10**(24),-24.947719394204714/2) #450= xpos,325=ypos,30=radius
luna = Planet(450,(575/11),10,(128,128,128),7.349*10**(22),1023)
moon = Planet() #the second moon
bodies = [earth,luna]

running = True
clock = pygame.time.Clock()

while running: #if user clicks close window
    clock.tick(FPS)    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    screen.fill((0,0,0))
    pygame.Surface.blit(screen, trace, (0, 0))
    motion()

    pygame.display.flip() #update? flip? 

pygame.quit()
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\description_generator.py 
import random
from faker import Faker
import spacy

faker = Faker()
nlp = spacy.load("en_core_web_sm")

def generate_description(entity, name):
    if entity == "Universe":
        return generate_universe_description()
    elif entity == "Planet":
        return generate_planet_description(name)
    elif entity == "Continent":
        return generate_continent_description(name)
    elif entity == "Country":
        return generate_country_description(name)
    elif entity == "Region":
        return generate_region_description(name)
    elif entity == "State":
        return generate_state_description(name)
    elif entity == "Province":
        return generate_province_description(name)
    elif entity == "City":
        return generate_city_description(name)
    elif entity == "Village":
        return generate_village_description(name)
    elif entity == "Town":
        return generate_town_description(name)
    elif entity == "Landmark":
        return generate_landmark_description(name)
    else:
        return ""

def generate_universe_description():
    return "A vast cosmos"

def generate_planet_description(name):
    return f"A mysterious and enchanting planet called {name} in the far reaches of the universe."

def generate_continent_description(name):
    return f"A continent named {name} rich in history and ancient ruins."

def generate_country_description(name):
    return f"A country known as {name} with its own unique characteristics and cultural heritage."

def generate_region_description(name):
    return f"A region called {name} where you can experience the beauty of nature and the local traditions."

def generate_state_description(name):
    return f"A state named {name} with its own distinct landscapes and connections to the environment."

def generate_province_description(name):
    return f"A province named {name} known for its notable features and contributions."

def generate_city_description(name):
    return f"A bustling city called {name} that offers a vibrant mix of cultures and opportunities."

def generate_village_description(name):
    return f"A peaceful village known as {name} where you can enjoy tranquility and the local community."

def generate_town_description(name):
    return f"A charming town named {name} that captures the essence of small-town life and hospitality."

def generate_landmark_description(name):
    doc = nlp(faker.text())
    sentences = [sent.text for sent in doc.sents]
    return f"A remarkable landmark called {name} that {random.choice(sentences)}"
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\location_classes.py 
from ..game import Location

class Container(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        self.locations = []

    def add_location(self, location):
        if self.validate_containment(location):
            self.locations.append(location)
        else:
            print(f"Error: Cannot place {type(location).__name__} within {type(self).__name__}.")

    def get_location(self, name):
        for location in self.locations:
            if location.name == name:
                return location
        return None

    def validate_containment(self, location):
        if hasattr(self, 'valid_locations'):
            return isinstance(location, self.valid_locations)
        else:
            return False

class Forest(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Swamp(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Ruin(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Field(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Ruins(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class City(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Village(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Town(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Landmark(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Universe(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Planet(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Continent(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Country(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Region(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class State(Container):

    def __init__(self, name, description):
        super().__init__(name, description)

class Province(Container):

    def __init__(self, name, description):
        super().__init__(name, description)
        
class Island(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Ocean(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Mountain(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Desert(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Lake(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class River(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Building(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Castle(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Dungeon(Container):
    
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Room(Container):
    valid_locations = tuple() # To be filled after all location classes are defined
    # This is a special case, as it is the only location that cannot contain other locations        
    def __init__(self, name, description):
        super().__init__(name, description)

# Defining valid locations after all classes are defined
Universe.valid_locations = (Planet,)
Planet.valid_locations = (Continent, Ocean)
Ocean.valid_locations = (Continent, Island)
Continent.valid_locations = (Country, Region)
Island.valid_locations = (Country, Region, Forest, Desert, Field, Ruins, Mountain, Castle, Dungeon)
Country.valid_locations = (Region, State, Province, Desert, Mountain, Lake, River)
Region.valid_locations = (Country, State, Province, Desert, Mountain, Village, Landmark, Forest, Field, Ruins)
Mountain.valid_locations = (Village, Landmark, Forest, Ruins)
Lake.valid_locations = (Landmark, Ruins)
River.valid_locations = (Landmark, Ruins)
Desert.valid_locations = (Landmark, Ruins)
State.valid_locations = (City, Village, Town, Landmark, Forest, Field, Desert, Ruins)
Province.valid_locations = (City, Village, Town, Landmark, Forest, Field, Ruins)
City.valid_locations = (Landmark, Ruins, Building, Castle, Dungeon)
Castle.valid_locations = (Landmark, Ruins, Building, Dungeon, Room)
Village.valid_locations = (Landmark, Forest, Field, Ruins, Building)
Town.valid_locations = (Landmark, Forest, Field, Ruins, Building)
Forest.valid_locations = (Landmark, Ruins, River, Lake)
Field.valid_locations = (Landmark, Ruins, River, Lake)
Ruins.valid_locations = (Landmark, River, Lake, Dungeon)
Landmark.valid_locations = (Building, Dungeon)
Building.valid_locations = (Dungeon, Room)
Dungeon.valid_locations = (Room,)
Room.valid_locations = tuple()
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\map_generator.py 
# map_generator.py

import random
import os.path
from location_description import *

class Map:
    def __init__(self, size=(100, 100)):
        self.size = size
        self.contents = []

    def generate(self):
        if os.path.exists('location_description.py'):
            self.generate_maps_from_description()
        else:
            self.generate_maps_organically()

    def generate_maps_from_description(self):
        # Read location_description.py and generate maps based on the data
        # ...

    def generate_maps_organically(self):
        # Generate maps organically from the bottom up
        maps = []
        for continent in continents:
            continent_map = self.generate_continent_map(continent)
            maps.append(continent_map)

        with open('maps.py', 'w') as f:
            f.write("from map_classes import Map\n\n")
            for i, map in enumerate(maps):
                f.write(f"map_{i+1} = Map({map.size})\n")
                f.write(f"map_{i+1}.contents = {map.contents}\n")

    def generate_continent_map(self, continent):
        # Generate the map for a continent
        continent_map = Map()
        # ...

        for country in continent.countries:
            country_map = self.generate_country_map(country)
            continent_map.contents.append(country_map)

        return continent_map

    def generate_country_map(self, country):
        # Generate the map for a country
        country_map = Map()
        # ...

        for city in country.cities:
            city_map = self.generate_city_map(city)
            country_map.contents.append(city_map)

        return country_map

    def generate_city_map(self, city):
        # Generate the map for a city
        city_map = Map()
        # ...

        for building in city.buildings:
            building_map = self.generate_building_map(building)
            city_map.contents.append(building_map)

        return city_map

    def generate_building_map(self, building):
        # Generate the map for a building
        building_map = Map()
        # ...

        return building_map

    def generate_castle_map(self, castle):
        # Generate the map for a castle
        castle_map = Map()
        # ...

        return castle_map

    def generate_dungeon_map(self, dungeon):
        # Generate the map for a dungeon
        dungeon_map = Map()
        # ...

        return dungeon_map


def generate_maps():
    map = Map()
    map.generate()
    return map


if __name__ == "__main__":
    generated_map = generate_maps()
    # Use the generated_map for the game
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\name_generator.py 
from faker import Faker
import random
import string

fake = Faker()

class NameGenerator:

    def __init__(self):
        self.vowels = ['a', 'e', 'i', 'o', 'u']
        self.consonants = [ch for ch in string.ascii_lowercase if ch not in self.vowels]

        self.prefixes = {
        'continent': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'country': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'state': ['South', 'North', 'West', 'East', 'Western', 'Eastern'],
        'mountain': ['Mount', 'Mt.', 'Pico', 'Massif'],
        'lake': ['Lake', 'Lago', 'Mar'],
        'sea': ['Mar'],
        'castle': ['Castle', 'Chateau', 'Schloss', 'Burg', 'Fort'],
        'general': ['The', 'Grand', 'Old', 'New']
    }
        self.suffixes = {
        'continent': ['major', 'minor'],    
        'mountain': ['Peak', 'Ridge', 'Pass', 'Summit', 'Crest', 'Top', 'Point'],
        'river': ['River', 'Stream', 'Creek', 'Brook', 'Riviera', 'Fjord'],
        'forest': ['Woods', 'Forest', 'Groves', 'Thicket', 'Copse', 'Stand'],
        'swamp': ['Swamp', 'Marsh', 'Bog', 'Fen', 'Mire', 'Wetlands'],
        'desert': ['Desert', 'Wastes', 'Expanse', 'Sands', 'Dunes'],
        'island': ['Island', 'Isle', 'Isle of', 'Archipelago', 'Cay', 'Atoll'],
        'ocean': ['Ocean', 'Sea', 'Bay', 'Gulf', 'Harbor', 'Strait', 'Channel'],
        'building': ['Building', 'Tower', 'Hall', 'Palace', 'Manor', 'Mansion', 'Fortress'],
        'city': ['City', 'Metropolis', 'Capital', 'Haven', 'ville', 'burg'],
        'province': ['Province', 'County', 'Region', 'Territory', 'Shire'],
        'state': ['State', 'Commonwealth', 'Republic'],
        'village': ['Village', 'Hamlet', 'Settlement'],
        'town': ['Town', 'Borough', 'Township', 'ton'],
        'landmark': ['Monument', 'Memorial', 'Statue', 'Obelisk', 'Pillar', 'Column'],
        'dungeon': ['Dungeon', 'Crypt', 'Vault', 'Labyrinth', 'Catacombs', 'Cavern', 'Caverns', 'Den'],
        'castle': ['Castle', 'Fort', 'Keep', 'Tower', 'Palace', 'Spire', 'Stronghold', 'Citadel', 'Bastion', 'Burg', 'Chateau', 'Schloss'],
    }
        self.characteristics = {
        'general': ['Broad', 'Tall', 'Grand', 'Majestic', 'Mighty', 'Ancient', 'Brilliant', 'Colossal', 'Dazzling', 'Enormous', 'Gigantic', 'Golden', 'Haunting', 'Immense', 'Jagged', 'Lush', 'Mystical', 'Narrow', 'Ominous', 'Pristine', 'Quaint', 'Radiant', 'Secluded', 'Turquoise', 'Unspoiled', 'Vibrant', 'Winding', 'Xenophilic', 'Yielding', 'Zenithal']
    }

        self.first_names = [name for name in dir(Faker()) if "first_name" in name]
        
    def generate_syllable(self):
        syllable = random.choice(self.consonants) + random.choice(self.vowels)
        if random.choice([True, False]):  # With 50% chance add a trailing consonant
            syllable += random.choice(self.consonants)
        return syllable

    def generate_fantasy_name(self, syllable_count=2):
        name = ''.join(self.generate_syllable() for _ in range(syllable_count))
        return name.capitalize()

    def generate_single_word_name(self):
        return fake.word().capitalize()

    def generate_two_part_name(self):
        characteristic = random.choice(self.characteristics)
        name = fake.word().capitalize()
        return f"{characteristic} {name}"

    def generate_possessive_name(self):
        first_name_func = random.choice(self.first_names)
        first_name = getattr(fake, first_name_func)().capitalize()
        suffix = random.choice(self.suffixes)
        return f"{first_name}'s {suffix}"

    def generate_non_english_name(self):
        return fake.words(nb=1, ext_word_list=None, unique=False)[0].capitalize()

    def generate_prefixed_name(self):
        prefix = random.choice(self.prefixes)
        name = fake.word().capitalize()
        return f"{prefix} {name}"

def generate_continent_name(self):
    # select a random method for name generation
    generator = random.choice([self.generate_single_word_name,
                               self.generate_two_part_name,
                               self.generate_possessive_name,
                               self.generate_non_english_name,
                               self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['continent'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['continent'])
        name = f"{name} {suffix}"

    
def generate_mountain_name(self):
    # select a random method for name generation
    generator = random.choice([self.generate_single_word_name,
                               self.generate_two_part_name,
                               self.generate_possessive_name,
                               self.generate_non_english_name,
                               self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['mountain'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['mountain'])
        name = f"{name} {suffix}"

    return name

def generate_river_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['river'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['river'])
        name = f"{name} {suffix}"

    return name

def generate_state_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['state'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['state'])
        name = f"{name} {suffix}"

    return name

def generate_forest_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['forest'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['forest'])
        name = f"{name} {suffix}"

    return name

def generate_country_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['country'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['country'])
        name = f"{name} {suffix}"

    return name

def generate_swamp_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['swamp'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['swamp'])
        name = f"{name} {suffix}"

    return name

def generate_desert_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['desert'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['desert'])
        name = f"{name} {suffix}"

    return name

def generate_lake_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['lake'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['lake'])
        name = f"{name} {suffix}"

    return name

def generate_island_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['island'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['island'])
        name = f"{name} {suffix}"

    return name

def generate_ocean_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['ocean'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['ocean'])
        name = f"{name} {suffix}"

    return name


    
def generate_building_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['building'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['building'])
        name = f"{name} {suffix}"

    return name


    
def generate_city_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['city'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['city'])
        name = f"{name} {suffix}"

    return name

def generate_province_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['province'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['province'])
        name = f"{name} {suffix}"

    return name

def generate_landmark_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['landmark'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['landmark'])
        name = f"{name} {suffix}"

    return name

def generate_castle_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['castle'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['castle'])
        name = f"{name} {suffix}"

    return name


    
def generate_dungeon_name(self):
    generator = ([self.generate_single_word_name,
                   self.generate_two_part_name,
                   self.generate_possessive_name,
                   self.generate_non_english_name,
                   self.generate_prefixed_name])
    name = generator()

    # only 30% chance to add prefix or suffix, never both
    chance = random.randint(1, 100)
    if chance <= 20: # 20% chance to add a prefix
        prefix = random.choice(self.prefixes['dungeon'])
        name = f"{prefix} {name}"
    elif chance <= 45: # 45% chance to add a suffix
        suffix = random.choice(self.suffixes['dungeon'])
        name = f"{name} {suffix}"

    return name



name_generator = NameGenerator()
for i in range(10):
    print(name_generator.generate_mountain_name())


    def generate_river_name(self):
        return "The " + self.generate_fantasy_name() + " River"

    def generate_continent_name(self):
        return self.generate_fantasy_name()

    def generate_forest_name(self):
        return self.generate_fantasy_name() + " Woods"

    def generate_country_name(self):
        return self.generate_fantasy_name()

    def generate_Swamp_name(self):
        return self.generate_fantasy_name() + " Swamp"

    def generate_desert_name(self):
        return self.generate_fantasy_name() + " Desert"

    def generate_lake_name(self):
        return "Lake " + self.generate_fantasy_name()

    def generate_island_name(self):
        return self.generate_fantasy_name() + " Island"

    def generate_ocean_name(self):
        return "The " + self.generate_fantasy_name() + " Ocean"

    def generate_building_name(self):
        return self.generate_fantasy_name() + " Building"

    def generate_city_name(self):
        return self.generate_fantasy_name() + " City"

    def generate_province_name(self):
        return self.generate_fantasy_name() + " Province"

    def generate_landmark_name(self):
        return "The " + self.generate_fantasy_name() + " Monument"

    def generate_castle_name(self):
        return "Castle " + self.generate_fantasy_name()

    def generate_dungeon_name(self):
        return "The " + self.generate_fantasy_name() + " Dungeon"

    def generate_name(self, name_type):
        if name_type == "fantasy":
            return self.generate_fantasy_name()
        elif name_type == "continent":
            return self.generate_continent_name()
        elif name_type == "country":
            return self.generate_country_name()
        elif name_type == "swamp":
            return self.generate_swamp_name()
        elif name_type == "state":
            return self.generate_state_name()
        elif name_type == "mountain":
            return self.generate_mountain_name()
        elif name_type == "river":
            return self.generate_river_name()
        elif name_type == "forest":
            return self.generate_forest_name()
        elif name_type == "desert":
            return self.generate_desert_name()
        elif name_type == "lake":
            return self.generate_lake_name()
        elif name_type == "island":
            return self.generate_island_name()
        elif name_type == "ocean":
            return self.generate_ocean_name()
        elif name_type == "building":
            return self.generate_building_name()
        elif name_type == "city":
            return self.generate_city_name()
        elif name_type == "province":
            return self.generate_province_name()
        elif name_type == "landmark":
            return self.generate_landmark_name()
        elif name_type == "castle":
            return self.generate_castle_name()
        elif name_type == "dungeon":
            return self.generate_dungeon_name()
        else:
            return fake.first_name()

name_generator = NameGenerator()
print(name_generator.generate_name("continent"))  # Generates a continent name
print(name_generator.generate_name("country"))  # Generates a country name
print(name_generator.generate_name("swamp"))  # Generates a swamp name
print(name_generator.generate_name("state"))  # Generates a state name
print(name_generator.generate_name("mountain"))  # Generates a mountain name
print(name_generator.generate_name("river"))  # Generates a river name
print(name_generator.generate_name("forest"))  # Generates a forest name
print(name_generator.generate_name("desert"))  # Generates a desert name
print(name_generator.generate_name("lake"))  # Generates a lake name
print(name_generator.generate_name("island"))  # Generates an island name
print(name_generator.generate_name("ocean"))  # Generates an ocean name
print(name_generator.generate_name("building"))  # Generates a building name
print(name_generator.generate_name("city"))  # Generates a city name
print(name_generator.generate_name("province"))  # Generates a province name
print(name_generator.generate_name("landmark"))  # Generates a landmark name
print(name_generator.generate_name("castle"))  # Generates a castle name
print(name_generator.generate_name("dungeon"))  # Generates a dungeon name
print(name_generator.generate_name("fantasy"))  # Generates a fantasy name.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\planet_test_one.py 
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_asciiart.py 
from math import ceil

from PIL import (
    Image,
    ImageFont,
    ImageDraw,
)

PIL_GRAYSCALE = 'L'
PIL_WIDTH_INDEX = 0
PIL_HEIGHT_INDEX = 1
COMMON_MONO_FONT_FILENAMES = [
    'DejaVuSansMono.ttf',  # Linux
    'Consolas Mono.ttf',   # MacOS, I think
    'Consola.ttf',         # Windows, I think
]


def main():
    image = textfile_to_image('content.txt')
    image.show()
    image.save('content.png')


def textfile_to_image(textfile_path):
    """Convert text file to a grayscale image.

    arguments:
    textfile_path - the content of this file will be converted to an image
    font_path - path to a font file (for example impact.ttf)
    """
    # parse the file into lines stripped of whitespace on the right side
    with open(textfile_path) as f:
        lines = tuple(line.rstrip() for line in f.readlines())

    # choose a font (you can see more detail in the linked library on github)
    font = None
    large_font = 20  # get better resolution with larger size
    for font_filename in COMMON_MONO_FONT_FILENAMES:
        try:
            font = ImageFont.truetype(font_filename, size=large_font)
            print(f'Using font "{font_filename}".')
            break
        except IOError:
            print(f'Could not load font "{font_filename}".')
    if font is None:
        font = ImageFont.load_default()
        print('Using default font.').
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\text_to_image.py 
def text_to_image(
    text: str,
    font_filepath: str,
    font_size: int,
    color: Tuple[int, int, int, int],
) -> ImageType:
    font = ImageFont.truetype(font_filepath, size=font_size)

    img = Image.new("RGBA", font.getmask(text).size)

    draw = ImageDraw.Draw(img)
    draw_point = (0, 0)

    draw.multiline_text(draw_point, text, font=font, fill=color)
    font = ImageFont.truetype(font_filepath, size=font_size)

    text_window = img.getbbox()
    img = img.crop(text_window)


    return img.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder.py 
import os
import random
from map_generator import Map, generate_locations
from description_generator import DescriptionGenerator
from name_generator import NameGenerator
from map_generator import generate_maps
from location_classes import *

class World:
    def __init__(self, name="default", universe="one_alpha"):
        self.name = name
        self.universe = universe
        self.locations = []
        self.maps = []

    def generate(self):
        name_gen = NameGenerator()
        desc_gen = DescriptionGenerator()
        universe = Universe(name_gen.generate_universe_name(), desc_gen.generate_universe_description())
        self.locations.append(universe)

        planet_name = input("Enter the name of the planet: ")
        planet = Planet(planet_name, desc_gen.generate_planet_description())
        universe.add_location(planet)

        num_continents = random.randint(4, 7)  # Generate a random number of continents (4 to 7)
        for _ in range(num_continents):
            continent_name = name_gen.generate_continent_name()
            continent_desc = desc_gen.generate_continent_description()
            continent = Continent(continent_name, continent_desc)
            planet.add_location(continent)

            num_countries_per_continent = random.randint(3, 6)  # Generate a random number of countries per continent
            for _ in range(num_countries_per_continent):
                country_name = name_gen.generate_country_name()
                country_desc = desc_gen.generate_country_description()
                country = Country(country_name, country_desc)
                continent.add_location(country)

                num_regions_per_continent = random.randint(2, 5)  # Generate a random number of regions per continent
                for _ in range(num_regions_per_continent):
                    region_name = name_gen.generate_region_name()
                    region_desc = desc_gen.generate_region_description()
                    region = Region(region_name, region_desc)
                    continent.add_location(region)

                    num_provinces_per_country = random.randint(1, 3)  # Generate a random number of provinces per country
                    for _ in range(num_provinces_per_country):
                        province_name = name_gen.generate_province_name()
                        province_desc = desc_gen.generate_province_description()
                        province = Province(province_name, province_desc)
                        country.add_location(province)

                        num_rivers_per_province = random.randint(1, 2)  # Generate a random number of rivers per province
                        for _ in range(num_rivers_per_province):
                            river_name = name_gen.generate_river_name()
                            river_desc = desc_gen.generate_river_description()
                            river = River(river_name, river_desc)
                            province.add_location(river)

                        num_cities_per_province = random.randint(1, 3)  # Generate a random number of cities per province
                        for _ in range(num_cities_per_province):
                            city_name = name_gen.generate_city_name()
                            city_desc = desc_gen.generate_city_description()
                            city = City(city_name, city_desc)
                            province.add_location(city)

                            num_buildings_per_city = random.randint(10, 20)  # Generate a random number of buildings per city
                            for _ in range(num_buildings_per_city):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                city.add_location(building)

                        num_villages_per_province = random.randint(3, 5)  # Generate a random number of villages per province
                        for _ in range(num_villages_per_province):
                            village_name = name_gen.generate_village_name()
                            village_desc = desc_gen.generate_village_description()
                            village = Village(village_name, village_desc)
                            province.add_location(village)

                            num_buildings_per_village = random.randint(5, 9)  # Generate a random number of buildings per village
                            for _ in range(num_buildings_per_village):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                village.add_location(building)

                        num_towns_per_province = random.randint(2, 4)  # Generate a random number of towns per province
                        for _ in range(num_towns_per_province):
                            town_name = name_gen.generate_town_name()
                            town_desc = desc_gen.generate_town_description()
                            town = Town(town_name, town_desc)
                            province.add_location(town)

                            num_buildings_per_town = random.randint(8, 14)  # Generate a random number of buildings per town
                            for _ in range(num_buildings_per_town):
                                building_name = name_gen.generate_building_name()
                                building_desc = desc_gen.generate_building_description()
                                building = Building(building_name, building_desc)
                                town.add_location(building)

                        num_forests_per_region = random.randint(1, 3)  # Generate a random number of forests per region
                        for _ in range(num_forests_per_region):
                            forest_name = name_gen.generate_forest_name()
                            forest_desc = desc_gen.generate_forest_description()
                            forest = Forest(forest_name, forest_desc)
                            region.add_location(forest)

                            num_landmarks_per_forest = random.randint(1, 3)  # Generate a random number of landmarks per forest
                            for _ in range(num_landmarks_per_forest):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                forest.add_location(landmark)

                                num_ruins_per_forest = random.randint(1, 3)  # Generate a random number of ruins per forest
                                for _ in range(num_ruins_per_forest):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    forest.add_location(ruin)

                        num_swamps_per_region = random.randint(1, 3)  # Generate a random number of swamps per region
                        for _ in range(num_swamps_per_region):
                            swamp_name = name_gen.generate_swamp_name()
                            swamp_desc = desc_gen.generate_swamp_description()
                            swamp = Swamp(swamp_name, swamp_desc)
                            region.add_location(swamp)

                            num_landmarks_per_swamp = random.randint(1, 3)  # Generate a random number of landmarks per swamp
                            for _ in range(num_landmarks_per_swamp):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                swamp.add_location(landmark)

                                num_ruins_per_swamp = random.randint(1, 3)  # Generate a random number of ruins per swamp
                                for _ in range(num_ruins_per_swamp):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    swamp.add_location(ruin)

                        num_fields_per_region = random.randint(1, 3)  # Generate a random number of fields per region
                        for _ in range(num_fields_per_region):
                            field_name = name_gen.generate_field_name()
                            field_desc = desc_gen.generate_field_description()
                            field = Field(field_name, field_desc)
                            region.add_location(field)

                            num_landmarks_per_field = random.randint(1, 3)  # Generate a random number of landmarks per field
                            for _ in range(num_landmarks_per_field):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                field.add_location(landmark)

                                num_ruins_per_field = random.randint(1, 3)  # Generate a random number of ruins per field
                                for _ in range(num_ruins_per_field):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    field.add_location(ruin)

                        num_deserts_per_region = random.randint(1, 3)  # Generate a random number of deserts per region
                        for _ in range(num_deserts_per_region):
                            desert_name = name_gen.generate_desert_name()
                            desert_desc = desc_gen.generate_desert_description()
                            desert = Desert(desert_name, desert_desc)
                            region.add_location(desert)

                            num_landmarks_per_desert = random.randint(1, 3)  # Generate a random number of landmarks per desert
                            for _ in range(num_landmarks_per_desert):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                desert.add_location(landmark)

                                num_ruins_per_desert = random.randint(1, 3)  # Generate a random number of ruins per desert
                                for _ in range(num_ruins_per_desert):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    desert.add_location(ruin)

                        num_lakes_per_region = random.randint(1, 3)  # Generate a random number of lakes per region
                        for _ in range(num_lakes_per_region):
                            lake_name = name_gen.generate_lake_name()
                            lake_desc = desc_gen.generate_lake_description()
                            lake = Lake(lake_name, lake_desc)
                            region.add_location(lake)

                            num_landmarks_per_lake = random.randint(1, 3)  # Generate a random number of landmarks per lake
                            for _ in range(num_landmarks_per_lake):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                lake.add_location(landmark)

                        num_mountains_per_continent = random.randint(1, 3)  # Generate a random number of mountains per continent
                        for _ in range(num_mountains_per_continent):
                            mountain_name = name_gen.generate_mountain_name()
                            mountain_desc = desc_gen.generate_mountain_description()
                            mountain = Mountain(mountain_name, mountain_desc)
                            continent.add_location(mountain)

                            num_landmarks_per_mountain = random.randint(1, 3)  # Generate a random number of landmarks per mountain
                            for _ in range(num_landmarks_per_mountain):
                                landmark_name = name_gen.generate_landmark_name()
                                landmark_desc = desc_gen.generate_landmark_description()
                                landmark = Landmark(landmark_name, landmark_desc)
                                mountain.add_location(landmark)

                                num_ruins_per_mountain = random.randint(1, 3)  # Generate a random number of ruins per mountain
                                for _ in range(num_ruins_per_mountain):
                                    ruin_name = name_gen.generate_ruin_name()
                                    ruin_desc = desc_gen.generate_ruin_description()
                                    ruin = Ruin(ruin_name, ruin_desc)
                                    mountain.add_location(ruin)

        num_oceans = random.randint(4, 7)  # Generate a random number of oceans (4 to 7)
        for _ in range(num_oceans):
            ocean_name = name_gen.generate_ocean_name()
            ocean_desc = desc_gen.generate_ocean_description()
            ocean = Ocean(ocean_name, ocean_desc)
            planet.add_location(ocean)

        num_islands = random.randint(2, 8)  # Generate a random number of islands (2 to 8)
        for _ in range(num_islands):
            island_name = name_gen.generate_island_name()
            island_desc = desc_gen.generate_island_description()
            island = Island(island_name, island_desc)
            planet.add_location(island)

        self.locations += generate_locations()
        map = Map()
        map.generate()
        self.maps.append(map)

    def save(self):
        os.makedirs(self.name.lower(), exist_ok=True)
        with open(os.path.join(self.name.lower(), 'location_definitions.py'), 'w') as f:
            f.write("from location_classes import Universe, Planet, Continent, Country, Region, Province, City, Village, Town, "
                    "Landmark, Forest, Field, Ruin, Mountain, Desert, Lake, River, Building, Castle, Dungeon, Room, Ocean, Island\n\n")
            for location in self.locations:
                f.write(f"{location.name.lower().replace(' ', '_')} = {location.__class__.__name__}("
                        f'"{location.name}", "{location.description}")\n')
                if isinstance(location, Container):
                    for contained_location in location.locations:
                        f.write(f"{contained_location.name.lower().replace(' ', '_')} = "
                                f"{contained_location.__class__.__name__}("
                                f'"{contained_location.name}", "{contained_location.description}")\n')

def main():
    name = input("Enter the name of the world: ")
    universe_name = input("Enter the name of the universe (default: one_alpha): ")
    if not universe_name:
        universe_name = "one_alpha"
    world = World(name, universe_name)
    world.generate()
    world.save()

    generate_maps(world.name)

if __name__ == "__main__":
    main()
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\mapgen\world_builder_gui.py 
import pygame
import sys
import random
import noise
import numpy as np

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
MAP_HEIGHT = SCREEN_HEIGHT * 2 // 3
CONSOLE_HEIGHT = SCREEN_HEIGHT - MAP_HEIGHT
BLUE = (0, 0, 255)
WHITE = (255, 255, 255)
CONTINENT_COLOR = (139, 69, 19)  # Brown color for continents
DESERT_COLOR = (255, 255, 0)  # Beige color for desert
FOREST_COLOR = (0, 100, 0)  # Dark green color for forest
MOUNTAIN_COLOR = (128, 128, 128)  # Gray color for mountains
SWAMP_COLOR = (0, 255,255)  # Grey Green color for swamp
PLAINS_COLOR = (255, 255, 255)  # Light Grey Green color for plains

# Initialize Pygame
pygame.init()
clock = pygame.time.Clock()

# Create the Pygame window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("World Builder")

# Clear the screen
screen.fill(BLUE)

def generate_waves_shape():
    shape = []
    num_points = random.randint(50, 130)  # Number of points for the vector line
    start_x = random.randint(0, SCREEN_WIDTH)
    start_y = random.randint(SCREEN_HEIGHT // 3, int(SCREEN_HEIGHT * 3 / 5))

    scale = 0.1  # The smaller the scale the smoother the noise
    octaves = 6  # Number of levels of detail
    persistence = 0.5  # Amplitude of each successive octave
    lacunarity = 2.0  # Frequency of each successive octave

    for i in range(num_points):
        x = start_x + i
        y = start_y + noise.pnoise2(x * scale, 
                                     start_y * scale, 
                                     octaves=octaves, 
                                     persistence=persistence, 
                                     lacunarity=lacunarity, 
                                     repeatx=SCREEN_WIDTH, 
                                     repeaty=SCREEN_HEIGHT, 
                                     base=0)
        shape.append((x, int(y)))

    return shape

def generate_continent_shape():
    shape = []
    num_points = random.randint(160000, 288000)  # Number of points for the vector line
    start_x = random.randint(0, SCREEN_WIDTH)
    start_y = random.randint(SCREEN_HEIGHT // 3, int(SCREEN_HEIGHT * 3 / 5))

    for _ in range(num_points):
        shape.append((start_x, start_y))
        direction = random.randint(0, 3)  # Random direction (0 = up, 1 = down, 2 = left, 3 = right)
        if direction == 0:
            start_y -= 1
        elif direction == 1:
            start_y += 1
        elif direction == 2:
            start_x -= 1
        else:
            start_x += 1

    return shape

# Draw the map area
map_area = pygame.Rect(0, 0, SCREEN_WIDTH, MAP_HEIGHT)
pygame.draw.rect(screen, BLUE, map_area)

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    # Generate and draw the continent shape
    continent_shape = generate_continent_shape()
    pygame.draw.lines(screen, CONTINENT_COLOR, False, continent_shape, 2)

    # Display the continent shape on the map
    for i in range(len(continent_shape) - 1):
        pygame.draw.line(screen, CONTINENT_COLOR, continent_shape[i], continent_shape[i + 1], 1)

# Draw the console area
console_area = pygame.Rect(0, MAP_HEIGHT, SCREEN_WIDTH, CONSOLE_HEIGHT)
pygame.draw.rect(screen, WHITE, console_area)

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Generate and draw the waves shape
    waves_shape = generate_waves_shape()
    pygame.draw.lines(screen, WHITE, False, waves_shape, 2)
    
    # Update the display
    pygame.display.flip()
    clock.tick(2)
    
# Quit the game
pygame.quit()
sys.exit().
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeOne.py 
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\procedures\generateTreeTwo.py 
#generateTreeTwo.py

from PIL import Image, ImageDraw

# Image size
width = 200
height = 200

# Define the trunk of the tree
trunk_height = 50
trunk_width = 10

# Define the tree color
tree_color = (34, 139, 34) # Green
trunk_color = (139,69,19) # Brown

# Create a new image with white background
img = Image.new('RGB', (width, height), (255, 255, 255))
draw = ImageDraw.Draw(img)

# Draw the trunk
draw.rectangle(
    [(width // 2 - trunk_width // 2, height - trunk_height), 
     (width // 2 + trunk_width // 2, height)], 
    fill=trunk_color
)

# Draw the tree
for i in range(height - trunk_height, 0, -1):
    color = tree_color
    start = width // 2 - i
    end = width // 2 + i
    draw.line([(start, i), (end, i)], fill=color)

# Save the image
img.save('pixel_tree.png')
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_classes.py 
from ..game import Location

class Container(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        self.locations = []

    def add_location(self, location):
        if self.validate_containment(location):
            self.locations.append(location)
        else:
            print(f"Error: Cannot place {type(location).__name__} within {type(self).__name__}.")

    def get_location(self, name):
        for location in self.locations:
            if location.name == name:
                return location
        return None

    def validate_containment(self, location):
        return isinstance(location, (Region, State, Province, City, Village, Town, Landmark))

class Universe(Container):
    def __init__(self, name, description):
        super().__init__(name, description)
    
class Planet(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Continent(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Country(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Region(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class State(Container):
    def __init__(self, name, description):
        super().__init__(name, description)

class Province(Container):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Forrest(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Field(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
                
class Ruins(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class City(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Village(Location):
    def __init__(self, name, description):
        super().__init__(name, description)

class Town(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
        
class Landmark(Location):
    def __init__(self, name, description):
        super().__init__(name, description)
.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\location_definitions.py 
#location_definitions.py

from location_classes import Universe, Planet, Continent, Country, Region, State, Province, City, Village, Town, Landmark

# Create instances of locations

one_alpha = Universe("The Universe", "A vast cosmos")
thulea = Planet("Thulea", "A mysterious and enchanting planet in the far reaches of the universe.")
lumos = Continent("Lumos", "A continent rich in history and ancient ruins.")
dawnbreak = Region("Dawnbreak", "A region where the first rays of sunlight touch the land.")
luminaria = Country("Luminaria", "A country known for its radiant beauty and rich culture.")
astravale = State("Astravale", "A state nestled in the valley of astral wonders.")
province = Province("Ontario", "A province in Canada")
luminaria_city = Village("Luminaria City", "A bustling city that shines like a beacon of light.")
royal_library = Landmark("Royal Library", "A grand library that holds the knowledge of countless ages.")
luminaria_city.add_landmark(royal_library)
starcrest = Village("Starcrest", "A peaceful village known for its stargazing observatory.")
astral_archive = Landmark("Astral Archive", "An ancient repository of celestial knowledge.")
starcrest.add_landmark(astral_archive)
ezitahan = Country("Ezitahan", "A country of ancient traditions and mystical secrets.")
reqedor = State("Reqedor", "A state with lush landscapes and a deep connection to nature.")
wravora = Village("Wravora", "A charming village nestled in the heart of the wilderness.")
pekkopan_tower = Landmark("Pekkopan Tower", "A towering structure that houses the wisdom of the ancient Pekko tribe.")
wravora.add_landmark(pekkopan_tower)
ikrecrizar = Village("Ikrecrizar", "A remote village known for its skilled artisans and craftsmanship.")
erissenem_gardens = Landmark("Erissenem Gardens", "Exquisite gardens filled with rare and mystical plants.")
ikrecrizar.add_landmark(erissenem_gardens)
yocutha = Country("Yocutha", "A country shrouded in mystery and ancient legends.")
dawnshire = State("Dawnshire", "A state where the first light of dawn brings hope and new beginnings.")
shimmerfield = Village("Shimmerfield", "A village adorned with shimmering fields of luminescent flowers.")
trilith_drift_palace = Landmark("Trilith Drift Palace", "A magnificent palace perched on floating rock formations.")
shimmerfield.add_landmark(trilith_drift_palace)
argentia_reach = Village("Argentia Reach", "A coastal village renowned for its silvery beaches and sparkling waters.")
verdantide_glade = Landmark("Verdantide Glade", "An enchanting glade where nature flourishes in vibrant hues.")
argentia_reach.add_landmark(verdantide_glade)
frostholm_highlands = Region("Frostholm Highlands", "A region of icy landscapes and majestic snow-capped mountains.")
mugulux = Country("Mugulux", "A country known for its frozen tundras and resilient people.")
frostholm = State("Frostholm", "A state where frost and ice dominate the landscape.")
frostholm_village = Village("Frostholm Village", "A cozy village nestled amidst snowy valleys.")
hearthfire_inn = Landmark("Hearthfire Inn", "A warm and welcoming inn where travelers find respite from the cold.")
frostholm_village.add_landmark(hearthfire_inn)
astralyn_bluff = Village("Astralyn Bluff", "A village perched on a cliff overlooking vast astral plains.")
emberfall_enclave = Landmark("Emberfall Enclave", "A hidden sanctuary where embers dance and flicker eternally.")
astralyn_bluff.add_landmark(emberfall_enclave)
aine_pusea = Country("Ainepusea", "A country of mesmerizing landscapes and mystical energies.")
stormwatch_crest = State("Stormwatch Crest", "A state where stormy skies unleash raw elemental power.")
stormwatch_city = Village("Stormwatch City", "A bustling city where lightning crackles through the air.")
frostholm_highlands_citadel = Landmark("Frostholm Highlands Citadel", "An imposing fortress that stands as a beacon of strength.")
stormwatch_city.add_landmark(frostholm_highlands_citadel)
havenholm_vale = Village("Havenholm Vale", "A tranquil village nestled in a verdant valley.")
royal_citadel = Landmark("Royal Citadel", "The majestic seat of power where rulers govern with wisdom and grace.")
havenholm_vale.add_landmark(royal_citadel)
shadowfen_marsh = Region("Shadowfen Marsh", "A region cloaked in darkness and mystery, where shadows dance on murky waters.")
phakkeacaea = Country("Phakkeacaea", "A country of mist-laden forests and ancient arcane traditions.")
shadowfen_marsh_state = State("Shadowfen Marsh", "A state where the marshlands hold ancient secrets and hidden dangers.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
shadowfen_marsh_state.add_place(ezitahan_city)
shadowfen_marsh_state.add_place(reqedor_village)
zeloria_landmark = Landmark("Zeloria", "A mystical sanctuary hidden within the depths of Shadowfen Marsh.")
ezitahan_city.add_landmark(zeloria_landmark)
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
mugulux_landmark = Landmark("Mugulux", "A sacred site where the spirits of the ancestors are honored.")
yocutha_village.add_landmark(mugulux_landmark)
luxuinia = Country("Luxuinia", "A country known for its ethereal beauty and captivating aura.")
astralyn_bluff_state = State("Astralyn Bluff", "A state where the bluffs hold breathtaking views of astral phenomena.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
luxuinia_state = State("Astralyn Bluff", "A state where astral energies permeate every corner.")
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
astralyn_bluff_state.add_place(pekkopan_village)
astralyn_bluff_state.add_place(ikrecrizar_village)
aiharreolum = Continent("Aiharreolum", "A continent steeped in celestial mysteries and magic.")
uzaikaton = Region("Uzaikaton", "A region where ancient ruins and celestial phenomena intertwine.")
eaprastorith = Country("Eaprastorith", "A country where the power of the heavens is harnessed.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
stormwatch_crest_village = Village("Stormwatch Crest", "A village nestled amidst the storm-wracked peaks.")
havenholm_vale_state.add_place(astralyn_bluff_city)
havenholm_vale_state.add_place(stormwatch_crest_village)
stormwatch_crest_village.add_landmark(frostholm_highlands_citadel)
eaprastorith.add_place(havenholm_vale_state)
eaprastorith.add_place(stormwatch_crest_village)
astosheopan = Country("Astosheopan", "A country blessed with celestial wonders and mystical phenomena.")
celestria_expanse = State("Celestria Expanse", "A state where the celestial veil is thin, allowing glimpses of other realms.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
celestria_expanse.add_place(ezitahan_city)
celestria_expanse.add_place(reqedor_village)
celestria_expanse.add_place(yocutha_village)

toggurean = Region("Toggurean", "A region of rugged landscapes and untamed beauty.")
homaivaria = Country("Homaivaria", "A country known for its vast forests and deep spiritual connections.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
shadowfen_marsh_city.add_landmark(zeloria_landmark)
homaivaria.add_place(frostholm_highlands_state)
homaivaria.add_place(shadowfen_marsh_city)

hegrukya = Country("Hegruckya", "A country where ancient spirits and primal forces shape the land.")
stormwatch_crest_state = State("Stormwatch Crest", "A state where the storms rage with unrivaled fury.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
stormwatch_crest_state.add_place(pekkopan_village)
stormwatch_crest_state.add_place(ikrecrizar_village)
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
hegrukya.add_place(stormwatch_crest_state)
hegrukya.add_place(pekkopan_village)
hegrukya.add_place(ikrecrizar_village)

kreottodia = Region("Kreottodia", "A region of enchanting landscapes and ancient wonders.")
xuppagary = Country("Xuppagary", "A country known for its diverse terrains and cultural heritage.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
xuppagary.add_place(trilith_drift_state)
xuppagary.add_place(argentia_reach_city)

hisrasal = Country("Hisrasal", "A country where the dawn's first light holds divine significance.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
hisrasal.add_place(dawnshire_state)

mustopis = Continent("Mustopis", "A continent where magic and technology intertwine harmoniously.")
draisaborg = Region("Draisaborg", "A region known for its vibrant cities and cultural diversity.")
grufathage = Country("Grufathage", "A country of diverse landscapes and rich folklore.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
grufathage.add_place(shimmerfield_state)
grufathage.add_place(ezitahan_city)
grufathage.add_place(reqedor_village)
grufathage.add_place(yocutha_village)
grufathage.add_place(zeloria_landmark)
grufathage.add_place(royal_library)
grufathage.add_place(astral_archive)
grufathage.add_place(trilith_drift_palace)
grufathage.add_place(verdantide_glade)

ouyecrogary = Region("Ouyecrogary", "A region where ancient ruins hold untold secrets and hidden treasures.")
hakusha = Country("Hakusha", "A country where the elements dance in harmony and spiritual enlightenment is sought.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
astralyn_bluff_city.add_landmark(zeloria_landmark)
hakusha.add_place(frostholm_highlands_state)
hakusha.add_place(astralyn_bluff_city)
hakusha.add_place(shadowfen_marsh_city)

astibberal = Country("Astibberal", "A country where ancient wisdom and arcane arts intertwine.")
oudrattuthia = Region("Oudrattuthia", "A region of dark forests and hidden magical enclaves.")
hegrukya_state = State("Hegruckya", "A state where ancient spirits and primal forces shape the land.")
stormwatch_crest_village = Village("Stormwatch Crest", "A village embraced by stormy skies and fierce winds.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
zeloria_landmark = Landmark("Zeloria", "A place of ancient power and mystic energies.")
hegrukya_state.add_place(stormwatch_crest_village)
hegrukya_state.add_place(pekkopan_village)
stormwatch_crest_village.add_landmark(zeloria_landmark)
astibberal.add_place(hegrukya_state)
astibberal.add_place(stormwatch_crest_village)
oudrattuthia.add_place(pekkopan_village)
oudrattuthia.add_place(zeloria_landmark)
astibberal.add_place(oudrattuthia)

hegrukya.add_place(astibberal)

kreassiston = Region("Kreassiston", "A region of ancient ruins and magical anomalies.")
zenagon = Continent("Zenagon", "A continent where mysticism and technological advancements coexist.")
keasodor = Region("Keasodor", "A region known for its lush forests and harmonious coexistence with nature.")
kracceviel = Country("Kracceviel", "A country celebrated for its vibrant culture and rich traditions.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
kracceviel.add_place(trilith_drift_state)
kracceviel.add_place(argentia_reach_city)
kracceviel.add_place(zeloria_landmark)

thaslisan = Country("Thaslisan", "A country known for its captivating landscapes and ethereal beauty.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
thaslisan.add_place(dawnshire_state)

darrethen = Region("Darrethen", "A region where enchantment and elegance pervade every corner.")
celestia = Country("Celestia", "A country where celestial beauty and divine radiance shine brightly.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
darrethen.add_place(shimmerfield_state)
darrethen.add_place(ezitahan_city)
darrethen.add_place(reqedor_village)
darrethen.add_place(yocutha_village)
celestia.add_place(darrethen)

sunspire = Country("Sunspire", "A country where the sun's radiant energy fuels life and inspiration.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
sunspire.add_place(dawnshire_state)

eclipsia = Continent("Eclipsia", "A continent where darkness and light dance in eternal balance.")
gloaming_province = Region("Gloaming Province", "A region bathed in the soft hues of twilight and shimmering stars.")
illumina = Country("Illumina", "A country known for its radiant landscapes and ethereal allure.")
astravale = State("Astravale", "A state nestled in the valley of astral wonders.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
starcrest_village.add_landmark(astral_archive)
astravale.add_place(luminaria_city)
astravale.add_place(starcrest_village)
astravale.add_place(zeloria_landmark)
astravale.add_place(royal_library)
astravale.add_place(astral_archive)
astravale.add_place(trilith_drift_palace)
astravale.add_place(verdantide_glade)
illumina.add_place(astravale)
illumina.add_place(luminaria_city)
illumina.add_place(starcrest_village)
eventide = Country("Eventide", "A country where twilight casts a bewitching spell and shadows come alive.")
reqedor_state = State("Reqedor", "A state where ancient forests and mystical beings coexist in harmony.")
wravora_city = Village("Wravora", "A city embraced by the tranquility of nature.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
wravora_city.add_landmark(pekkopan_tower)
ikrecrizar_village.add_landmark(erissenem_gardens)
reqedor_state.add_place(wravora_city)
reqedor_state.add_place(ikrecrizar_village)
eventide.add_place(reqedor_state)

lusteria = Region("Lusteria", "A region of shimmering landscapes and magical allure.")
dawnshire = Country("Dawnshire", "A country where the first light of dawn brings hope and new beginnings.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
shimmerfield_city = Village("Shimmerfield", "A city adorned with shimmering fields of luminescent flowers.")
trilith_drift_palace = Landmark("Trilith Drift Palace", "A magnificent palace perched on floating rock formations.")
shimmerfield_city.add_landmark(trilith_drift_palace)
argentia_reach_city = Village("Argentia Reach", "A coastal village renowned for its silvery beaches and sparkling waters.")
verdantide_glade = Landmark("Verdantide Glade", "An enchanting glade where nature flourishes in vibrant hues.")
argentia_reach_city.add_landmark(verdantide_glade)
dawnshire_state.add_place(shimmerfield_city)
dawnshire_state.add_place(argentia_reach_city)
lusteria.add_place(dawnshire_state)

shadowfen_marsh = Region("Shadowfen Marsh", "A region cloaked in darkness and mystery, where shadows dance on murky waters.")
phakkeacaea = Country("Phakkeacaea", "A country of mist-laden forests and ancient arcane traditions.")
shadowfen_marsh_state = State("Shadowfen Marsh", "A state where the marshlands hold ancient secrets and hidden dangers.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shadowfen_marsh_state.add_place(ezitahan_city)
shadowfen_marsh_state.add_place(reqedor_village)
shadowfen_marsh_state.add_place(yocutha_village)
shadowfen_marsh.add_place(shadowfen_marsh_state)

luxuinia = Country("Luxuinia", "A country known for its ethereal beauty and captivating aura.")
astralyn_bluff_state = State("Astralyn Bluff", "A state where the bluffs hold breathtaking views of astral phenomena.")
pekkopan_village = Village("Pekkopan", "A village renowned for its vibrant festivals and lively celebrations.")
ikrecrizar_village = Village("Ikrecrizar", "A village where creativity and artistic expression flourish.")
zeloria_landmark = Landmark("Zeloria", "A place of ancient power and mystic energies.")
luxuinia_state = State("Astralyn Bluff", "A state where astral energies permeate every corner.")
pekkopan_village.add_landmark(zeloria_landmark)
ikrecrizar_village.add_landmark(zeloria_landmark)
astralyn_bluff_state.add_place(pekkopan_village)
astralyn_bluff_state.add_place(ikrecrizar_village)
luxuinia.add_place(astralyn_bluff_state)

oudrattuthia = Region("Oudrattuthia", "A region of ancient forests and magical enclaves.")
hegrukya = Country("Hegruckya", "A country where ancient spirits and primal forces shape the land.")
frostholm_highlands_state = State("Frostholm Highlands", "A state where towering peaks touch the skies and winter's grip never fades.")
havenholm_vale_state = State("Havenholm Vale", "A state blessed with bountiful nature and harmonious communities.")
astralyn_bluff_city = Village("Astralyn Bluff", "A city where the astral energies resonate in every step.")
shadowfen_marsh_city = Village("Shadowfen Marsh", "A city surrounded by mist-shrouded marshlands.")
frostholm_highlands_state.add_place(astralyn_bluff_city)
frostholm_highlands_state.add_place(shadowfen_marsh_city)
astralyn_bluff_city.add_landmark(zeloria_landmark)
hegrukya.add_place(frostholm_highlands_state)
hegrukya.add_place(astralyn_bluff_city)
hegrukya.add_place(shadowfen_marsh_city)

kreassiston = Region("Kreassiston", "A region of ancient ruins and magical anomalies.")
kreassiston.add_place(zeloria_landmark)
kreassiston.add_place(royal_library)
kreassiston.add_place(astral_archive)
kreassiston.add_place(trilith_drift_palace)
kreassiston.add_place(verdantide_glade)

xuppagary = Country("Xuppagary", "A country known for its diverse terrains and cultural heritage.")
trilith_drift_state = State("Trilith Drift", "A state where floating rocks defy gravity and create breathtaking vistas.")
argentia_reach_city = Village("Argentia Reach", "A city embraced by the shimmering silver beaches.")
frostholm_city = Village("Frostholm", "A city surrounded by snow-capped mountains and frost-laden forests.")
trilith_drift_state.add_place(argentia_reach_city)
trilith_drift_state.add_place(frostholm_city)
argentia_reach_city.add_landmark(zeloria_landmark)
xuppagary.add_place(trilith_drift_state)
xuppagary.add_place(argentia_reach_city)

thaslisan = Country("Thaslisan", "A country known for its captivating landscapes and ethereal beauty.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
thaslisan.add_place(dawnshire_state)

darrethen = Region("Darrethen", "A region where enchantment and elegance pervade every corner.")
celestia = Country("Celestia", "A country where celestial beauty and divine radiance shine brightly.")
shimmerfield_state = State("Shimmerfield", "A state blessed with shimmering fields and enchanting vistas.")
ezitahan_city = Village("Ezitahan", "A city where ancient and modern cultures converge.")
reqedor_village = Village("Reqedor", "A village known for its tranquil beauty and serene atmosphere.")
yocutha_village = Village("Yocutha", "A village brimming with rich folklore and ancient traditions.")
ezitahan_city.add_landmark(zeloria_landmark)
reqedor_village.add_landmark(zeloria_landmark)
yocutha_village.add_landmark(zeloria_landmark)
shimmerfield_state.add_place(ezitahan_city)
shimmerfield_state.add_place(reqedor_village)
shimmerfield_state.add_place(yocutha_village)
darrethen.add_place(shimmerfield_state)
darrethen.add_place(ezitahan_city)
darrethen.add_place(reqedor_village)
darrethen.add_place(yocutha_village)
celestia.add_place(darrethen)

sunspire = Country("Sunspire", "A country where the sun's radiant energy fuels life and inspiration.")
dawnshire_state = State("Dawnshire", "A state where the break of dawn marks the beginning of new possibilities.")
luminaria_city = Village("Luminaria City", "A city bathed in the golden glow of the rising sun.")
starcrest_village = Village("Starcrest", "A village known for its captivating stargazing experiences.")
luminaria_city.add_landmark(royal_library)
starcrest_village.add_landmark(astral_archive)
dawnshire_state.add_place(luminaria_city)
dawnshire_state.add_place(starcrest_village)
sunspire.add_place(dawnshire_state)

universe = Universe("The Vast Cosmos", "A mysterious and expansive cosmos")
thelea = Planet("Thelea", "A mesmerizing celestial body brimming with otherworldly wonders")
continent = Continent("Zephyrion", "A continent within the realm of Thelea, where mystical landscapes and ancient civilizations intertwine")
country = Country("Etherea", "A mystical realm within the continent of Zephyrion, where magic and enchantment flourish")
region = Region("Azure Highlands", "A realm of breathtaking beauty and ethereal landscapes within the country of Etherea")
state = State("Astralweave", "A realm within the Azure Highlands, where cosmic energies intertwine with the fabric of reality")
province = Province("Luminary Reach", "An enchanting province in the realm of Astralweave, known for its radiant beauty and celestial wonders")
city = City("Stellaris", "The celestial capital city of the province Luminary Reach, where starlight dances upon ancient spires")
village = Village("Moonshadow", "A tranquil village nestled beneath the luminescent glow of celestial moons")
town = Town("Stardust Crossing", "A vibrant town where interstellar travelers gather and cosmic energies converge")
landmark = Landmark("Celestial Cascade", "A magnificent waterfall of shimmering stardust, flowing through the heart of the Astralweave realm")

# Add locations to containers

universe.add_location(thelea)
thelea.add_location(continent)
continent.add_location(country)
country.add_location(region)
region.add_location(state)
state.add_location(city)
state.add_location(village)
state.add_location(town)
country.add_location(province)
province.add_location(city)
province.add_location(town)
state.add_location(landmark)


.
REM File: C:\Users\adamm\OneDrive\Documents\GitHub\ShadowsOfThulea\workspace\thulea\maps.py 
.
