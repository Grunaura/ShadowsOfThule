[{"role": "system", "content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\nThen you will output the content of each file, with syntax below.\n(You will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.)\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nFile syntax:\n\n```file.py/ts/html\n[ADD YOUR CODE HERE]\n```\n\nUseful to know:\nYou almost always put different classes in different files\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"}, {"role": "user", "content": "Instructions: We are writing a text based adventure game called Masters of the Universe in python. The brave adventurer seeks the masters and goes on a quest with He-Man and the other Masters against the evil Skeletor and his forces.  The flavor will be similar to the filmation version of He-Man and the Masters of the Universe. The game should be three times as large as the average text based adventure game and be unparralelled in detail. MVC components split in separate files. Keyboard control. Please generate twenty areas the character can move to within this text based game. Create detailed documentation explaining how to run the game and about the story line. Create an engaging story for the adventurer to go on. Create a main quest. Create ten subquests.\n\n"}, {"role": "user", "content": "Specification:\n\nSpecification for Masters of the Universe Text-Based Adventure Game:\n\nThe program should be a text-based adventure game where the player takes on the role of a brave adventurer seeking the Masters of the Universe to help defeat the evil Skeletor and his forces. The game should have a similar flavor to the filmation version of He-Man and the Masters of the Universe. The game should be three times as large as the average text-based adventure game and be unparalleled in detail. The player should be able to move between twenty different areas within the game. The game should have a main quest and ten sub-quests.\n\nCore Classes:\n- Player: Represents the player and their attributes such as health, inventory, and location.\n- Area: Represents an area within the game and its attributes such as name, description, and items.\n- Item: Represents an item within the game and its attributes such as name, description, and effects.\n- Quest: Represents a quest within the game and its attributes such as name, description, and objectives.\n\nCore Functions/Methods:\n- move_player(direction: str) -> bool: Moves the player in the specified direction if possible and returns a boolean indicating if the move was successful.\n- get_area_description(area: Area) -> str: Returns the description of the specified area.\n- get_item_description(item: Item) -> str: Returns the description of the specified item.\n- use_item(item: Item) -> bool: Uses the specified item and returns a boolean indicating if the item was successfully used.\n- start_quest(quest: Quest) -> bool: Starts the specified quest and returns a boolean indicating if the quest was successfully started.\n- complete_quest(quest: Quest) -> bool: Completes the specified quest and returns a boolean indicating if the quest was successfully completed.\n\nNon-Standard Dependencies:\n- None\n\nStoryline:\nThe player takes on the role of a brave adventurer seeking the Masters of the Universe to help defeat the evil Skeletor and his forces. The player starts in the village of Eternia and must travel to different areas to find the Masters and complete quests to gain their trust and assistance in defeating Skeletor. The main quest is to retrieve the Sword of Power and use it to defeat Skeletor. The ten sub-quests involve tasks such as finding lost artifacts, rescuing prisoners, and defeating Skeletor's minions.\n\nTo run the game, the user should run the main.py file. The game will be controlled via keyboard input. The user will be presented with a description of their current area and a list of available actions. The user can then input a command to perform an action such as moving to a different area, using an item, or starting/completing a quest. The game will continue until the player completes the main quest or dies."}, {"role": "user", "content": "You are a super smart developer using Test Driven Development to write tests according to a specification.\n\nPlease generate tests based on the above specification. The tests should be as simple as possible, but still cover all the functionality.\n"}, {"role": "assistant", "content": "Here are some sample tests based on the above specification:\n\n```python\nimport pytest\nfrom game import Player, Area, Item, Quest\n\ndef test_move_player_success():\n    player = Player(\"Test Player\", 100, [])\n    area1 = Area(\"Area 1\", \"This is area 1.\")\n    area2 = Area(\"Area 2\", \"This is area 2.\")\n    area1.connect(area2, \"north\")\n    assert player.move(\"north\", area1) == True\n    assert player.current_area == area2\n\ndef test_move_player_failure():\n    player = Player(\"Test Player\", 100, [])\n    area1 = Area(\"Area 1\", \"This is area 1.\")\n    area2 = Area(\"Area 2\", \"This is area 2.\")\n    assert player.move(\"north\", area1) == False\n    assert player.current_area == area1\n\ndef test_get_area_description():\n    area = Area(\"Area\", \"This is an area.\")\n    assert area.get_description() == \"This is an area.\"\n\ndef test_get_item_description():\n    item = Item(\"Item\", \"This is an item.\")\n    assert item.get_description() == \"This is an item.\"\n\ndef test_use_item_success():\n    player = Player(\"Test Player\", 100, [])\n    item = Item(\"Healing Potion\", \"This potion heals the player.\")\n    player.add_item(item)\n    assert player.use_item(item) == True\n    assert player.health == 110\n\ndef test_use_item_failure():\n    player = Player(\"Test Player\", 100, [])\n    item = Item(\"Healing Potion\", \"This potion heals the player.\")\n    assert player.use_item(item) == False\n    assert player.health == 100\n\ndef test_start_quest_success():\n    player = Player(\"Test Player\", 100, [])\n    quest = Quest(\"Find the Lost Artifact\", \"Find the lost artifact in the forest.\")\n    assert player.start_quest(quest) == True\n    assert quest in player.active_quests\n\ndef test_start_quest_failure():\n    player = Player(\"Test Player\", 100, [])\n    quest = Quest(\"Find the Lost Artifact\", \"Find the lost artifact in the forest.\")\n    player.start_quest(quest)\n    assert player.start_quest(quest) == False\n    assert quest in player.active_quests\n\ndef test_complete_quest_success():\n    player = Player(\"Test Player\", 100, [])\n    quest = Quest(\"Find the Lost Artifact\", \"Find the lost artifact in the forest.\")\n    player.start_quest(quest)\n    assert player.complete_quest(quest) == True\n    assert quest not in player.active_quests\n\ndef test_complete_quest_failure():\n    player = Player(\"Test Player\", 100, [])\n    quest = Quest(\"Find the Lost Artifact\", \"Find the lost artifact in the forest.\")\n    assert player.complete_quest(quest) == False\n    assert quest not in player.active_quests\n``` \n\nNote that these tests are not exhaustive and more tests may be needed to fully test the game. Additionally, the implementation of the game classes and functions are not provided, so these tests may not run without errors until the implementation is completed."}]